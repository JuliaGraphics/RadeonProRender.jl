module RPR

using RadeonProRender_jll
export RadeonProRender_jll

using CEnum

function check_error(error_code)
    error_code == RPR_SUCCESS && return
    return error("Error code returned: $(error_code)")
end


const rpr_char = Cchar

const rpr_uchar = Cuchar

const rpr_int = Cint

const rpr_uint = Cuint

const rpr_long = Clong

const rpr_ulong = Culong

const rpr_short = Cshort

const rpr_ushort = Cushort

const rpr_float = Cfloat

const rpr_double = Cdouble

const rpr_longlong = Clonglong

const rpr_bool = Cint

const rpr_bitfield = rpr_uint

struct rpr_context_t
    _::Ptr{Cvoid}
end

const rpr_context = Ptr{rpr_context_t}

struct rpr_camera_t
    _::Ptr{Cvoid}
end

const rpr_camera = Ptr{rpr_camera_t}

struct rpr_shape_t
    _::Ptr{Cvoid}
end

const rpr_shape = Ptr{rpr_shape_t}

struct rpr_light_t
    _::Ptr{Cvoid}
end

const rpr_light = Ptr{rpr_light_t}

struct rpr_scene_t
    _::Ptr{Cvoid}
end

const rpr_scene = Ptr{rpr_scene_t}

struct rpr_image_t
    _::Ptr{Cvoid}
end

const rpr_image = Ptr{rpr_image_t}

struct rpr_buffer_t
    _::Ptr{Cvoid}
end

const rpr_buffer = Ptr{rpr_buffer_t}

struct rpr_hetero_volume_t
    _::Ptr{Cvoid}
end

const rpr_hetero_volume = Ptr{rpr_hetero_volume_t}

struct rpr_grid_t
    _::Ptr{Cvoid}
end

const rpr_grid = Ptr{rpr_grid_t}

struct rpr_curve_t
    _::Ptr{Cvoid}
end

const rpr_curve = Ptr{rpr_curve_t}

struct rpr_framebuffer_t
    _::Ptr{Cvoid}
end

const rpr_framebuffer = Ptr{rpr_framebuffer_t}

struct rpr_material_system_t
    _::Ptr{Cvoid}
end

const rpr_material_system = Ptr{rpr_material_system_t}

struct rpr_material_node_t
    _::Ptr{Cvoid}
end

const rpr_material_node = Ptr{rpr_material_node_t}

struct rpr_post_effect_t
    _::Ptr{Cvoid}
end

const rpr_post_effect = Ptr{rpr_post_effect_t}

struct rpr_context_properties_t
    _::Ptr{Cvoid}
end

const rpr_context_properties = Ptr{rpr_context_properties_t}

struct rpr_composite_t
    _::Ptr{Cvoid}
end

const rpr_composite = Ptr{rpr_composite_t}

struct rpr_lut_t
    _::Ptr{Cvoid}
end

const rpr_lut = Ptr{rpr_lut_t}

const rpr_image_option = rpr_uint

const rpr_context_type = rpr_uint

const rpr_creation_flags = rpr_bitfield

const rpr_channel_order = rpr_uint

const rpr_channel_type = rpr_uint

const rpr_material_system_type = rpr_uint

const rpr_environment_override = rpr_uint

@cenum rpr_status::Int32 begin
    RPR_SUCCESS = 0
    RPR_ERROR_COMPUTE_API_NOT_SUPPORTED = -1
    RPR_ERROR_OUT_OF_SYSTEM_MEMORY = -2
    RPR_ERROR_OUT_OF_VIDEO_MEMORY = -3
    RPR_ERROR_INVALID_LIGHTPATH_EXPR = -5
    RPR_ERROR_INVALID_IMAGE = -6
    RPR_ERROR_INVALID_AA_METHOD = -7
    RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT = -8
    RPR_ERROR_INVALID_GL_TEXTURE = -9
    RPR_ERROR_INVALID_CL_IMAGE = -10
    RPR_ERROR_INVALID_OBJECT = -11
    RPR_ERROR_INVALID_PARAMETER = -12
    RPR_ERROR_INVALID_TAG = -13
    RPR_ERROR_INVALID_LIGHT = -14
    RPR_ERROR_INVALID_CONTEXT = -15
    RPR_ERROR_UNIMPLEMENTED = -16
    RPR_ERROR_INVALID_API_VERSION = -17
    RPR_ERROR_INTERNAL_ERROR = -18
    RPR_ERROR_IO_ERROR = -19
    RPR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE = -20
    RPR_ERROR_MATERIAL_STACK_OVERFLOW = -21
    RPR_ERROR_INVALID_PARAMETER_TYPE = -22
    RPR_ERROR_UNSUPPORTED = -23
    RPR_ERROR_OPENCL_OUT_OF_HOST_MEMORY = -24
    RPR_ERROR_OPENGL = -25
    RPR_ERROR_OPENCL = -26
    RPR_ERROR_NULLPTR = -27
    RPR_ERROR_NODETYPE = -28
    RPR_ERROR_ABORTED = -29
end

@cenum rpr_parameter_type::UInt32 begin
    RPR_PARAMETER_TYPE_UNDEF = 0
    RPR_PARAMETER_TYPE_FLOAT = 1
    RPR_PARAMETER_TYPE_FLOAT2 = 2
    RPR_PARAMETER_TYPE_FLOAT3 = 3
    RPR_PARAMETER_TYPE_FLOAT4 = 4
    RPR_PARAMETER_TYPE_IMAGE = 5
    RPR_PARAMETER_TYPE_STRING = 6
    RPR_PARAMETER_TYPE_SHADER = 7
    RPR_PARAMETER_TYPE_UINT = 8
    RPR_PARAMETER_TYPE_ULONG = 9
    RPR_PARAMETER_TYPE_LONGLONG = 10
end

@cenum rpr_creation_flags_t::Int32 begin
    RPR_CREATION_FLAGS_ENABLE_GPU0 = 1
    RPR_CREATION_FLAGS_ENABLE_GPU1 = 2
    RPR_CREATION_FLAGS_ENABLE_GPU2 = 4
    RPR_CREATION_FLAGS_ENABLE_GPU3 = 8
    RPR_CREATION_FLAGS_ENABLE_CPU = 16
    RPR_CREATION_FLAGS_ENABLE_GL_INTEROP = 32
    RPR_CREATION_FLAGS_ENABLE_GPU4 = 64
    RPR_CREATION_FLAGS_ENABLE_GPU5 = 128
    RPR_CREATION_FLAGS_ENABLE_GPU6 = 256
    RPR_CREATION_FLAGS_ENABLE_GPU7 = 512
    RPR_CREATION_FLAGS_ENABLE_METAL = 1024
    RPR_CREATION_FLAGS_ENABLE_GPU8 = 2048
    RPR_CREATION_FLAGS_ENABLE_GPU9 = 4096
    RPR_CREATION_FLAGS_ENABLE_GPU10 = 8192
    RPR_CREATION_FLAGS_ENABLE_GPU11 = 16384
    RPR_CREATION_FLAGS_ENABLE_GPU12 = 32768
    RPR_CREATION_FLAGS_ENABLE_GPU13 = 65536
    RPR_CREATION_FLAGS_ENABLE_GPU14 = 131072
    RPR_CREATION_FLAGS_ENABLE_GPU15 = 262144
    RPR_CREATION_FLAGS_ENABLE_HIP = 524288
    RPR_CREATION_FLAGS_ENABLE_DEBUG = -2147483648
end

@cenum rpr_aa_filter::UInt32 begin
    RPR_FILTER_NONE = 0
    RPR_FILTER_BOX = 1
    RPR_FILTER_TRIANGLE = 2
    RPR_FILTER_GAUSSIAN = 3
    RPR_FILTER_MITCHELL = 4
    RPR_FILTER_LANCZOS = 5
    RPR_FILTER_BLACKMANHARRIS = 6
end

@cenum rpr_context_sampler_type::UInt32 begin
    RPR_CONTEXT_SAMPLER_TYPE_SOBOL = 1
    RPR_CONTEXT_SAMPLER_TYPE_RANDOM = 2
    RPR_CONTEXT_SAMPLER_TYPE_CMJ = 3
end

@cenum rpr_primvar_interpolation_type::UInt32 begin
    RPR_PRIMVAR_INTERPOLATION_CONSTANT = 1
    RPR_PRIMVAR_INTERPOLATION_UNIFORM = 2
    RPR_PRIMVAR_INTERPOLATION_VERTEX = 3
    RPR_PRIMVAR_INTERPOLATION_FACEVARYING_NORMAL = 4
    RPR_PRIMVAR_INTERPOLATION_FACEVARYING_UV = 5
end

@cenum rpr_shape_type::UInt32 begin
    RPR_SHAPE_TYPE_MESH = 1
    RPR_SHAPE_TYPE_INSTANCE = 2
end

@cenum rpr_light_type::UInt32 begin
    RPR_LIGHT_TYPE_POINT = 1
    RPR_LIGHT_TYPE_DIRECTIONAL = 2
    RPR_LIGHT_TYPE_SPOT = 3
    RPR_LIGHT_TYPE_ENVIRONMENT = 4
    RPR_LIGHT_TYPE_SKY = 5
    RPR_LIGHT_TYPE_IES = 6
    RPR_LIGHT_TYPE_SPHERE = 7
    RPR_LIGHT_TYPE_DISK = 8
end

@cenum rpr_context_info::UInt32 begin
    RPR_CONTEXT_CREATION_FLAGS = 258
    RPR_CONTEXT_CACHE_PATH = 259
    RPR_CONTEXT_RENDER_STATUS = 260
    RPR_CONTEXT_RENDER_STATISTICS = 261
    RPR_CONTEXT_DEVICE_COUNT = 262
    RPR_CONTEXT_PARAMETER_COUNT = 263
    RPR_CONTEXT_ACTIVE_PLUGIN = 264
    RPR_CONTEXT_SCENE = 265
    RPR_CONTEXT_ITERATIONS = 267
    RPR_CONTEXT_IMAGE_FILTER_TYPE = 268
    RPR_CONTEXT_TONE_MAPPING_TYPE = 275
    RPR_CONTEXT_TONE_MAPPING_LINEAR_SCALE = 276
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY = 277
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE = 278
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP = 279
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE = 280
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE = 281
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_BURN = 282
    RPR_CONTEXT_MAX_RECURSION = 283
    RPR_CONTEXT_RAY_CAST_EPSILON = 284
    RPR_CONTEXT_RADIANCE_CLAMP = 285
    RPR_CONTEXT_X_FLIP = 286
    RPR_CONTEXT_Y_FLIP = 287
    RPR_CONTEXT_TEXTURE_GAMMA = 288
    RPR_CONTEXT_PDF_THRESHOLD = 289
    RPR_CONTEXT_RENDER_MODE = 290
    RPR_CONTEXT_ROUGHNESS_CAP = 291
    RPR_CONTEXT_DISPLAY_GAMMA = 292
    RPR_CONTEXT_MATERIAL_STACK_SIZE = 293
    RPR_CONTEXT_CUTTING_PLANES = 294
    RPR_CONTEXT_GPU0_NAME = 295
    RPR_CONTEXT_GPU1_NAME = 296
    RPR_CONTEXT_GPU2_NAME = 297
    RPR_CONTEXT_GPU3_NAME = 298
    RPR_CONTEXT_CPU_NAME = 299
    RPR_CONTEXT_GPU4_NAME = 300
    RPR_CONTEXT_GPU5_NAME = 301
    RPR_CONTEXT_GPU6_NAME = 302
    RPR_CONTEXT_GPU7_NAME = 303
    RPR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY = 304
    RPR_CONTEXT_FRAMECOUNT = 305
    RPR_CONTEXT_TEXTURE_COMPRESSION = 306
    RPR_CONTEXT_AO_RAY_LENGTH = 307
    RPR_CONTEXT_OOC_TEXTURE_CACHE = 308
    RPR_CONTEXT_PREVIEW = 309
    RPR_CONTEXT_CPU_THREAD_LIMIT = 310
    RPR_CONTEXT_LAST_ERROR_MESSAGE = 311
    RPR_CONTEXT_MAX_DEPTH_DIFFUSE = 312
    RPR_CONTEXT_MAX_DEPTH_GLOSSY = 313
    RPR_CONTEXT_OOC_CACHE_PATH = 314
    RPR_CONTEXT_MAX_DEPTH_REFRACTION = 315
    RPR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION = 316
    RPR_CONTEXT_RENDER_LAYER_MASK = 317
    RPR_CONTEXT_SINGLE_LEVEL_BVH_ENABLED = 318
    RPR_CONTEXT_TRANSPARENT_BACKGROUND = 319
    RPR_CONTEXT_MAX_DEPTH_SHADOW = 320
    RPR_CONTEXT_API_VERSION = 321
    RPR_CONTEXT_GPU8_NAME = 322
    RPR_CONTEXT_GPU9_NAME = 323
    RPR_CONTEXT_GPU10_NAME = 324
    RPR_CONTEXT_GPU11_NAME = 325
    RPR_CONTEXT_GPU12_NAME = 326
    RPR_CONTEXT_GPU13_NAME = 327
    RPR_CONTEXT_GPU14_NAME = 328
    RPR_CONTEXT_GPU15_NAME = 329
    RPR_CONTEXT_API_VERSION_MINOR = 330
    RPR_CONTEXT_METAL_PERFORMANCE_SHADER = 331
    RPR_CONTEXT_USER_TEXTURE_0 = 332
    RPR_CONTEXT_USER_TEXTURE_1 = 333
    RPR_CONTEXT_USER_TEXTURE_2 = 334
    RPR_CONTEXT_USER_TEXTURE_3 = 335
    RPR_CONTEXT_MIPMAP_LOD_OFFSET = 336
    RPR_CONTEXT_AO_RAY_COUNT = 337
    RPR_CONTEXT_SAMPLER_TYPE = 338
    RPR_CONTEXT_ADAPTIVE_SAMPLING_TILE_SIZE = 339
    RPR_CONTEXT_ADAPTIVE_SAMPLING_MIN_SPP = 340
    RPR_CONTEXT_ADAPTIVE_SAMPLING_THRESHOLD = 341
    RPR_CONTEXT_TILE_SIZE = 342
    RPR_CONTEXT_LIST_CREATED_CAMERAS = 343
    RPR_CONTEXT_LIST_CREATED_MATERIALNODES = 344
    RPR_CONTEXT_LIST_CREATED_LIGHTS = 345
    RPR_CONTEXT_LIST_CREATED_SHAPES = 346
    RPR_CONTEXT_LIST_CREATED_POSTEFFECTS = 347
    RPR_CONTEXT_LIST_CREATED_HETEROVOLUMES = 348
    RPR_CONTEXT_LIST_CREATED_GRIDS = 349
    RPR_CONTEXT_LIST_CREATED_BUFFERS = 350
    RPR_CONTEXT_LIST_CREATED_IMAGES = 351
    RPR_CONTEXT_LIST_CREATED_FRAMEBUFFERS = 352
    RPR_CONTEXT_LIST_CREATED_SCENES = 353
    RPR_CONTEXT_LIST_CREATED_CURVES = 354
    RPR_CONTEXT_LIST_CREATED_MATERIALSYSTEM = 355
    RPR_CONTEXT_LIST_CREATED_COMPOSITE = 356
    RPR_CONTEXT_LIST_CREATED_LUT = 357
    RPR_CONTEXT_AA_ENABLED = 358
    RPR_CONTEXT_ACTIVE_PIXEL_COUNT = 359
    RPR_CONTEXT_TRACING_ENABLED = 360
    RPR_CONTEXT_TRACING_PATH = 361
    RPR_CONTEXT_TILE_RECT = 362
    RPR_CONTEXT_PLUGIN_VERSION = 363
    RPR_CONTEXT_RUSSIAN_ROULETTE_DEPTH = 364
    RPR_CONTEXT_SHADOW_CATCHER_BAKING = 365
    RPR_CONTEXT_RENDER_UPDATE_CALLBACK_FUNC = 366
    RPR_CONTEXT_RENDER_UPDATE_CALLBACK_DATA = 367
    RPR_CONTEXT_COMPILE_CALLBACK_FUNC = 1537
    RPR_CONTEXT_COMPILE_CALLBACK_DATA = 1538
    RPR_CONTEXT_TEXTURE_CACHE_PATH = 368
    RPR_CONTEXT_OCIO_CONFIG_PATH = 369
    RPR_CONTEXT_OCIO_RENDERING_COLOR_SPACE = 370
    RPR_CONTEXT_CONTOUR_USE_OBJECTID = 371
    RPR_CONTEXT_CONTOUR_USE_MATERIALID = 372
    RPR_CONTEXT_CONTOUR_USE_NORMAL = 373
    RPR_CONTEXT_CONTOUR_USE_UV = 390
    RPR_CONTEXT_CONTOUR_NORMAL_THRESHOLD = 374
    RPR_CONTEXT_CONTOUR_UV_THRESHOLD = 391
    RPR_CONTEXT_CONTOUR_UV_SECONDARY = 404
    RPR_CONTEXT_CONTOUR_LINEWIDTH_OBJECTID = 375
    RPR_CONTEXT_CONTOUR_LINEWIDTH_MATERIALID = 376
    RPR_CONTEXT_CONTOUR_LINEWIDTH_NORMAL = 377
    RPR_CONTEXT_CONTOUR_LINEWIDTH_UV = 392
    RPR_CONTEXT_CONTOUR_ANTIALIASING = 378
    RPR_CONTEXT_CONTOUR_DEBUG_ENABLED = 383
    RPR_CONTEXT_GPUINTEGRATOR = 379
    RPR_CONTEXT_CPUINTEGRATOR = 380
    RPR_CONTEXT_BEAUTY_MOTION_BLUR = 381
    RPR_CONTEXT_CAUSTICS_REDUCTION = 382
    RPR_CONTEXT_GPU_MEMORY_LIMIT = 384
    RPR_CONTEXT_RENDER_LAYER_LIST = 385
    RPR_CONTEXT_WINDING_ORDER_CORRECTION = 386
    RPR_CONTEXT_DEEP_SUBPIXEL_MERGE_Z_THRESHOLD = 387
    RPR_CONTEXT_DEEP_GPU_ALLOCATION_LEVEL = 388
    RPR_CONTEXT_DEEP_COLOR_ENABLED = 389
    RPR_CONTEXT_FOG_COLOR = 393
    RPR_CONTEXT_FOG_DISTANCE = 394
    RPR_CONTEXT_FOG_HEIGHT = 395
    RPR_CONTEXT_ATMOSPHERE_VOLUME_COLOR = 396
    RPR_CONTEXT_ATMOSPHERE_VOLUME_DENSITY = 397
    RPR_CONTEXT_ATMOSPHERE_VOLUME_RADIANCE_CLAMP = 399
    RPR_CONTEXT_FOG_HEIGHT_OFFSET = 398
    RPR_CONTEXT_INDIRECT_DOWNSAMPLE = 400
    RPR_CONTEXT_CRYPTOMATTE_EXTENDED = 401
    RPR_CONTEXT_CRYPTOMATTE_SPLIT_INDIRECT = 402
    RPR_CONTEXT_FOG_DIRECTION = 403
    RPR_CONTEXT_RANDOM_SEED = 4096
    RPR_CONTEXT_IBL_DISPLAY = 405
    RPR_CONTEXT_FRAMEBUFFER_SAVE_FLOAT32 = 406
    RPR_CONTEXT_UPDATE_TIME_CALLBACK_FUNC = 407
    RPR_CONTEXT_UPDATE_TIME_CALLBACK_DATA = 408
    RPR_CONTEXT_RENDER_TIME_CALLBACK_FUNC = 409
    RPR_CONTEXT_RENDER_TIME_CALLBACK_DATA = 410
    RPR_CONTEXT_FIRST_ITERATION_TIME_CALLBACK_FUNC = 411
    RPR_CONTEXT_FIRST_ITERATION_TIME_CALLBACK_DATA = 412
    RPR_CONTEXT_IMAGE_FILTER_RADIUS = 413
    RPR_CONTEXT_PRECOMPILED_BINARY_PATH = 414
    RPR_CONTEXT_NAME = 7829367
    RPR_CONTEXT_UNIQUE_ID = 7829368
    RPR_CONTEXT_CUSTOM_PTR = 7829369
end

@cenum rpr_camera_info::UInt32 begin
    RPR_CAMERA_TRANSFORM = 513
    RPR_CAMERA_FSTOP = 514
    RPR_CAMERA_APERTURE_BLADES = 515
    RPR_CAMERA_RESPONSE = 516
    RPR_CAMERA_EXPOSURE = 517
    RPR_CAMERA_FOCAL_LENGTH = 518
    RPR_CAMERA_SENSOR_SIZE = 519
    RPR_CAMERA_MODE = 520
    RPR_CAMERA_ORTHO_WIDTH = 521
    RPR_CAMERA_ORTHO_HEIGHT = 522
    RPR_CAMERA_FOCUS_DISTANCE = 523
    RPR_CAMERA_POSITION = 524
    RPR_CAMERA_LOOKAT = 525
    RPR_CAMERA_UP = 526
    RPR_CAMERA_FOCAL_TILT = 527
    RPR_CAMERA_LENS_SHIFT = 528
    RPR_CAMERA_IPD = 529
    RPR_CAMERA_TILT_CORRECTION = 530
    RPR_CAMERA_NEAR_PLANE = 531
    RPR_CAMERA_FAR_PLANE = 532
    RPR_CAMERA_LINEAR_MOTION = 533
    RPR_CAMERA_ANGULAR_MOTION = 534
    RPR_CAMERA_MOTION_TRANSFORMS_COUNT = 535
    RPR_CAMERA_MOTION_TRANSFORMS = 536
    RPR_CAMERA_POST_SCALE = 537
    RPR_CAMERA_NAME = 7829367
    RPR_CAMERA_UNIQUE_ID = 7829368
    RPR_CAMERA_CUSTOM_PTR = 7829369
end

@cenum rpr_image_info::UInt32 begin
    RPR_IMAGE_FORMAT = 769
    RPR_IMAGE_DESC = 770
    RPR_IMAGE_DATA = 771
    RPR_IMAGE_DATA_SIZEBYTE = 772
    RPR_IMAGE_WRAP = 773
    RPR_IMAGE_FILTER = 774
    RPR_IMAGE_GAMMA = 775
    RPR_IMAGE_MIPMAP_ENABLED = 776
    RPR_IMAGE_MIP_COUNT = 777
    RPR_IMAGE_GAMMA_FROM_FILE = 778
    RPR_IMAGE_UDIM = 779
    RPR_IMAGE_OCIO_COLORSPACE = 780
    RPR_IMAGE_INTERNAL_COMPRESSION = 781
    RPR_IMAGE_NAME = 7829367
    RPR_IMAGE_UNIQUE_ID = 7829368
    RPR_IMAGE_CUSTOM_PTR = 7829369
end

@cenum rpr_buffer_info::UInt32 begin
    RPR_BUFFER_DESC = 848
    RPR_BUFFER_DATA = 849
    RPR_BUFFER_NAME = 7829367
    RPR_BUFFER_UNIQUE_ID = 7829368
    RPR_BUFFER_CUSTOM_PTR = 7829369
end

@cenum rpr_shape_info::UInt32 begin
    RPR_SHAPE_TYPE = 1025
    RPR_SHAPE_VIDMEM_USAGE = 1026
    RPR_SHAPE_TRANSFORM = 1027
    RPR_SHAPE_MATERIAL = 1028
    RPR_SHAPE_LINEAR_MOTION = 1029
    RPR_SHAPE_ANGULAR_MOTION = 1030
    RPR_SHAPE_SHADOW_FLAG = 1032
    RPR_SHAPE_SUBDIVISION_FACTOR = 1033
    RPR_SHAPE_DISPLACEMENT_SCALE = 1034
    RPR_SHAPE_SHADOW_CATCHER_FLAG = 1038
    RPR_SHAPE_VOLUME_MATERIAL = 1039
    RPR_SHAPE_OBJECT_GROUP_ID = 1040
    RPR_SHAPE_SUBDIVISION_CREASEWEIGHT = 1041
    RPR_SHAPE_SUBDIVISION_BOUNDARYINTEROP = 1042
    RPR_SHAPE_DISPLACEMENT_MATERIAL = 1043
    RPR_SHAPE_MATERIALS_PER_FACE = 1045
    RPR_SHAPE_SCALE_MOTION = 1046
    RPR_SHAPE_HETERO_VOLUME = 1047
    RPR_SHAPE_LAYER_MASK = 1048
    RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG = 1036
    RPR_SHAPE_VISIBILITY_SHADOW = 1050
    RPR_SHAPE_VISIBILITY_REFLECTION = 1051
    RPR_SHAPE_VISIBILITY_REFRACTION = 1052
    RPR_SHAPE_VISIBILITY_TRANSPARENT = 1053
    RPR_SHAPE_VISIBILITY_DIFFUSE = 1054
    RPR_SHAPE_VISIBILITY_GLOSSY_REFLECTION = 1055
    RPR_SHAPE_VISIBILITY_GLOSSY_REFRACTION = 1056
    RPR_SHAPE_VISIBILITY_LIGHT = 1057
    RPR_SHAPE_LIGHT_GROUP_ID = 1058
    RPR_SHAPE_STATIC = 1059
    RPR_SHAPE_PER_VERTEX_VALUE0 = 1060
    RPR_SHAPE_PER_VERTEX_VALUE1 = 1061
    RPR_SHAPE_PER_VERTEX_VALUE2 = 1062
    RPR_SHAPE_PER_VERTEX_VALUE3 = 1063
    RPR_SHAPE_REFLECTION_CATCHER_FLAG = 1064
    RPR_SHAPE_OBJECT_ID = 1065
    RPR_SHAPE_SUBDIVISION_AUTO_RATIO_CAP = 1066
    RPR_SHAPE_MOTION_TRANSFORMS_COUNT = 1067
    RPR_SHAPE_MOTION_TRANSFORMS = 1068
    RPR_SHAPE_CONTOUR_IGNORE = 1069
    RPR_SHAPE_RENDER_LAYER_LIST = 1070
    RPR_SHAPE_SHADOW_COLOR = 1071
    RPR_SHAPE_VISIBILITY_RECEIVE_SHADOW = 1072
    RPR_SHAPE_PRIMVARS = 1073
    RPR_SHAPE_ENVIRONMENT_LIGHT = 1074
    RPR_SHAPE_NAME = 7829367
    RPR_SHAPE_UNIQUE_ID = 7829368
    RPR_SHAPE_CUSTOM_PTR = 7829369
end

@cenum rpr_mesh_info::UInt32 begin
    RPR_MESH_POLYGON_COUNT = 1281
    RPR_MESH_VERTEX_COUNT = 1282
    RPR_MESH_NORMAL_COUNT = 1283
    RPR_MESH_UV_COUNT = 1284
    RPR_MESH_VERTEX_ARRAY = 1285
    RPR_MESH_NORMAL_ARRAY = 1286
    RPR_MESH_UV_ARRAY = 1287
    RPR_MESH_VERTEX_INDEX_ARRAY = 1288
    RPR_MESH_NORMAL_INDEX_ARRAY = 1289
    RPR_MESH_UV_INDEX_ARRAY = 1290
    RPR_MESH_VERTEX_STRIDE = 1292
    RPR_MESH_NORMAL_STRIDE = 1293
    RPR_MESH_UV_STRIDE = 1294
    RPR_MESH_VERTEX_INDEX_STRIDE = 1295
    RPR_MESH_NORMAL_INDEX_STRIDE = 1296
    RPR_MESH_UV_INDEX_STRIDE = 1297
    RPR_MESH_NUM_FACE_VERTICES_ARRAY = 1298
    RPR_MESH_UV2_COUNT = 1299
    RPR_MESH_UV2_ARRAY = 1300
    RPR_MESH_UV2_INDEX_ARRAY = 1301
    RPR_MESH_UV2_STRIDE = 1302
    RPR_MESH_UV2_INDEX_STRIDE = 1303
    RPR_MESH_UV_DIM = 1304
    RPR_MESH_MOTION_DIMENSION = 1305
    RPR_MESH_VOLUME_FLAG = 1306
end

@cenum rpr_scene_info::UInt32 begin
    RPR_SCENE_SHAPE_COUNT = 1793
    RPR_SCENE_LIGHT_COUNT = 1794
    RPR_SCENE_SHAPE_LIST = 1796
    RPR_SCENE_LIGHT_LIST = 1797
    RPR_SCENE_CAMERA = 1798
    RPR_SCENE_CAMERA_RIGHT = 1799
    RPR_SCENE_BACKGROUND_IMAGE = 1800
    RPR_SCENE_AABB = 1805
    RPR_SCENE_HETEROVOLUME_LIST = 1806
    RPR_SCENE_HETEROVOLUME_COUNT = 1807
    RPR_SCENE_CURVE_LIST = 1808
    RPR_SCENE_CURVE_COUNT = 1809
    RPR_SCENE_ENVIRONMENT_LIGHT = 1810
    RPR_SCENE_NAME = 7829367
    RPR_SCENE_UNIQUE_ID = 7829368
    RPR_SCENE_CUSTOM_PTR = 7829369
end

@cenum rpr_lut_info::UInt32 begin
    RPR_LUT_FILENAME = 2128
    RPR_LUT_DATA = 2129
end

@cenum rpr_light_info::UInt32 begin
    RPR_LIGHT_TYPE = 2049
    RPR_LIGHT_TRANSFORM = 2051
    RPR_LIGHT_GROUP_ID = 2053
    RPR_LIGHT_RENDER_LAYER_LIST = 2054
    RPR_LIGHT_VISIBILITY_LIGHT = 2055
    RPR_LIGHT_NAME = 7829367
    RPR_LIGHT_UNIQUE_ID = 7829368
    RPR_LIGHT_CUSTOM_PTR = 7829369
    RPR_POINT_LIGHT_RADIANT_POWER = 2052
    RPR_DIRECTIONAL_LIGHT_RADIANT_POWER = 2056
    RPR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE = 2058
    RPR_SPOT_LIGHT_RADIANT_POWER = 2059
    RPR_SPOT_LIGHT_CONE_SHAPE = 2060
    RPR_SPOT_LIGHT_IMAGE = 2061
    RPR_ENVIRONMENT_LIGHT_IMAGE = 2063
    RPR_ENVIRONMENT_LIGHT_INTENSITY_SCALE = 2064
    RPR_ENVIRONMENT_LIGHT_PORTAL_LIST = 2072
    RPR_ENVIRONMENT_LIGHT_PORTAL_COUNT = 2073
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION = 2074
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION = 2075
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY = 2076
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND = 2077
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE = 2078
    RPR_SKY_LIGHT_TURBIDITY = 2066
    RPR_SKY_LIGHT_ALBEDO = 2067
    RPR_SKY_LIGHT_SCALE = 2068
    RPR_SKY_LIGHT_DIRECTION = 2069
    RPR_SKY_LIGHT_PORTAL_LIST = 2080
    RPR_SKY_LIGHT_PORTAL_COUNT = 2081
    RPR_IES_LIGHT_RADIANT_POWER = 2070
    RPR_IES_LIGHT_IMAGE_DESC = 2071
    RPR_SPHERE_LIGHT_RADIANT_POWER = 2082
    RPR_SPHERE_LIGHT_RADIUS = 2084
    RPR_DISK_LIGHT_RADIANT_POWER = 2083
    RPR_DISK_LIGHT_RADIUS = 2085
    RPR_DISK_LIGHT_ANGLE = 2086
    RPR_DISK_LIGHT_INNER_ANGLE = 2087
end

@cenum rpr_parameter_info::UInt32 begin
    RPR_PARAMETER_NAME = 4609
    RPR_PARAMETER_TYPE = 4611
    RPR_PARAMETER_DESCRIPTION = 4612
    RPR_PARAMETER_VALUE = 4613
end

@cenum rpr_framebuffer_info::UInt32 begin
    RPR_FRAMEBUFFER_FORMAT = 4865
    RPR_FRAMEBUFFER_DESC = 4866
    RPR_FRAMEBUFFER_DATA = 4867
    RPR_FRAMEBUFFER_GL_TARGET = 4868
    RPR_FRAMEBUFFER_GL_MIPLEVEL = 4869
    RPR_FRAMEBUFFER_GL_TEXTURE = 4870
    RPR_FRAMEBUFFER_LPE = 4871
    RPR_FRAMEBUFFER_NAME = 7829367
    RPR_FRAMEBUFFER_UNIQUE_ID = 7829368
    RPR_FRAMEBUFFER_CUSTOM_PTR = 7829369
end

@cenum rpr_component_type::UInt32 begin
    RPR_COMPONENT_TYPE_UINT8 = 1
    RPR_COMPONENT_TYPE_FLOAT16 = 2
    RPR_COMPONENT_TYPE_FLOAT32 = 3
    RPR_COMPONENT_TYPE_UNKNOWN = 4
    RPR_COMPONENT_TYPE_DEEP = 5
    RPR_COMPONENT_TYPE_UINT32 = 6
end

@cenum rpr_buffer_element_type::UInt32 begin
    RPR_BUFFER_ELEMENT_TYPE_INT32 = 1
    RPR_BUFFER_ELEMENT_TYPE_FLOAT32 = 2
end

@cenum rpr_render_mode::UInt32 begin
    RPR_RENDER_MODE_GLOBAL_ILLUMINATION = 1
    RPR_RENDER_MODE_DIRECT_ILLUMINATION = 2
    RPR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW = 3
    RPR_RENDER_MODE_WIREFRAME = 4
    RPR_RENDER_MODE_MATERIAL_INDEX = 5
    RPR_RENDER_MODE_POSITION = 6
    RPR_RENDER_MODE_NORMAL = 7
    RPR_RENDER_MODE_TEXCOORD = 8
    RPR_RENDER_MODE_AMBIENT_OCCLUSION = 9
    RPR_RENDER_MODE_DIFFUSE = 10
end

@cenum rpr_camera_mode::UInt32 begin
    RPR_CAMERA_MODE_PERSPECTIVE = 1
    RPR_CAMERA_MODE_ORTHOGRAPHIC = 2
    RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360 = 3
    RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO = 4
    RPR_CAMERA_MODE_CUBEMAP = 5
    RPR_CAMERA_MODE_CUBEMAP_STEREO = 6
    RPR_CAMERA_MODE_FISHEYE = 7
end

@cenum rpr_tonemapping_operator::UInt32 begin
    RPR_TONEMAPPING_OPERATOR_NONE = 0
    RPR_TONEMAPPING_OPERATOR_LINEAR = 1
    RPR_TONEMAPPING_OPERATOR_PHOTOLINEAR = 2
    RPR_TONEMAPPING_OPERATOR_AUTOLINEAR = 3
    RPR_TONEMAPPING_OPERATOR_MAXWHITE = 4
    RPR_TONEMAPPING_OPERATOR_REINHARD02 = 5
    RPR_TONEMAPPING_OPERATOR_EXPONENTIAL = 6
end

@cenum rpr_volume_type::UInt32 begin
    RPR_VOLUME_TYPE_NONE = 65535
    RPR_VOLUME_TYPE_HOMOGENEOUS = 0
    RPR_VOLUME_TYPE_HETEROGENEOUS = 1
end

@cenum rpr_material_system_info::UInt32 begin
    RPR_MATERIAL_SYSTEM_NODE_LIST = 4352
end

@cenum rpr_material_node_info::UInt32 begin
    RPR_MATERIAL_NODE_TYPE = 4353
    RPR_MATERIAL_NODE_SYSTEM = 4354
    RPR_MATERIAL_NODE_INPUT_COUNT = 4355
    RPR_MATERIAL_NODE_ID = 4356
    RPR_MATERIAL_NODE_NAME = 7829367
    RPR_MATERIAL_NODE_UNIQUE_ID = 7829368
    RPR_MATERIAL_CUSTOM_PTR = 7829369
end

@cenum rpr_material_node_input_info::UInt32 begin
    RPR_MATERIAL_NODE_INPUT_NAME = 4355
    RPR_MATERIAL_NODE_INPUT_DESCRIPTION = 4357
    RPR_MATERIAL_NODE_INPUT_VALUE = 4358
    RPR_MATERIAL_NODE_INPUT_TYPE = 4359
end

@cenum rpr_material_node_type::UInt32 begin
    RPR_MATERIAL_NODE_DIFFUSE = 1
    RPR_MATERIAL_NODE_MICROFACET = 2
    RPR_MATERIAL_NODE_REFLECTION = 3
    RPR_MATERIAL_NODE_REFRACTION = 4
    RPR_MATERIAL_NODE_MICROFACET_REFRACTION = 5
    RPR_MATERIAL_NODE_TRANSPARENT = 6
    RPR_MATERIAL_NODE_EMISSIVE = 7
    RPR_MATERIAL_NODE_WARD = 8
    RPR_MATERIAL_NODE_ADD = 9
    RPR_MATERIAL_NODE_BLEND = 10
    RPR_MATERIAL_NODE_ARITHMETIC = 11
    RPR_MATERIAL_NODE_FRESNEL = 12
    RPR_MATERIAL_NODE_NORMAL_MAP = 13
    RPR_MATERIAL_NODE_IMAGE_TEXTURE = 14
    RPR_MATERIAL_NODE_NOISE2D_TEXTURE = 15
    RPR_MATERIAL_NODE_DOT_TEXTURE = 16
    RPR_MATERIAL_NODE_GRADIENT_TEXTURE = 17
    RPR_MATERIAL_NODE_CHECKER_TEXTURE = 18
    RPR_MATERIAL_NODE_CONSTANT_TEXTURE = 19
    RPR_MATERIAL_NODE_INPUT_LOOKUP = 20
    RPR_MATERIAL_NODE_BLEND_VALUE = 22
    RPR_MATERIAL_NODE_PASSTHROUGH = 23
    RPR_MATERIAL_NODE_ORENNAYAR = 24
    RPR_MATERIAL_NODE_FRESNEL_SCHLICK = 25
    RPR_MATERIAL_NODE_DIFFUSE_REFRACTION = 27
    RPR_MATERIAL_NODE_BUMP_MAP = 28
    RPR_MATERIAL_NODE_VOLUME = 29
    RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION = 30
    RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION = 31
    RPR_MATERIAL_NODE_TWOSIDED = 32
    RPR_MATERIAL_NODE_UV_PROCEDURAL = 33
    RPR_MATERIAL_NODE_MICROFACET_BECKMANN = 34
    RPR_MATERIAL_NODE_PHONG = 35
    RPR_MATERIAL_NODE_BUFFER_SAMPLER = 36
    RPR_MATERIAL_NODE_UV_TRIPLANAR = 37
    RPR_MATERIAL_NODE_AO_MAP = 38
    RPR_MATERIAL_NODE_USER_TEXTURE_0 = 39
    RPR_MATERIAL_NODE_USER_TEXTURE_1 = 40
    RPR_MATERIAL_NODE_USER_TEXTURE_2 = 41
    RPR_MATERIAL_NODE_USER_TEXTURE_3 = 42
    RPR_MATERIAL_NODE_UBERV2 = 43
    RPR_MATERIAL_NODE_TRANSFORM = 44
    RPR_MATERIAL_NODE_RGB_TO_HSV = 45
    RPR_MATERIAL_NODE_HSV_TO_RGB = 46
    RPR_MATERIAL_NODE_USER_TEXTURE = 47
    RPR_MATERIAL_NODE_TOON_CLOSURE = 48
    RPR_MATERIAL_NODE_TOON_RAMP = 49
    RPR_MATERIAL_NODE_VORONOI_TEXTURE = 50
    RPR_MATERIAL_NODE_GRID_SAMPLER = 51
    RPR_MATERIAL_NODE_BLACKBODY = 52
    RPR_MATERIAL_NODE_RAMP = 53
    RPR_MATERIAL_NODE_PRIMVAR_LOOKUP = 54
    RPR_MATERIAL_NODE_ROUNDED_CORNER = 55
    RPR_MATERIAL_NODE_MATX_DIFFUSE_BRDF = 4096
    RPR_MATERIAL_NODE_MATX_DIELECTRIC_BRDF = 4097
    RPR_MATERIAL_NODE_MATX_GENERALIZED_SCHLICK_BRDF = 4098
    RPR_MATERIAL_NODE_MATX_NOISE3D = 4099
    RPR_MATERIAL_NODE_MATX_TANGENT = 4100
    RPR_MATERIAL_NODE_MATX_NORMAL = 4101
    RPR_MATERIAL_NODE_MATX_POSITION = 4102
    RPR_MATERIAL_NODE_MATX_ROUGHNESS_ANISOTROPY = 4103
    RPR_MATERIAL_NODE_MATX_ROTATE3D = 4104
    RPR_MATERIAL_NODE_MATX_NORMALIZE = 4105
    RPR_MATERIAL_NODE_MATX_IFGREATER = 4106
    RPR_MATERIAL_NODE_MATX_SHEEN_BRDF = 4107
    RPR_MATERIAL_NODE_MATX_DIFFUSE_BTDF = 4108
    RPR_MATERIAL_NODE_MATX_CONVERT = 4109
    RPR_MATERIAL_NODE_MATX_SUBSURFACE_BRDF = 4110
    RPR_MATERIAL_NODE_MATX_DIELECTRIC_BTDF = 4111
    RPR_MATERIAL_NODE_MATX_CONDUCTOR_BRDF = 4112
    RPR_MATERIAL_NODE_MATX_FRESNEL = 4113
    RPR_MATERIAL_NODE_MATX_LUMINANCE = 4114
    RPR_MATERIAL_NODE_MATX_FRACTAL3D = 4115
    RPR_MATERIAL_NODE_MATX_MIX = 4116
    RPR_MATERIAL_NODE_MATX = 4117
    RPR_MATERIAL_NODE_MATX_ARTISTIC_IOR = 4118
    RPR_MATERIAL_NODE_MATX_GENERALIZED_SCHLICK_BTDF = 4119
    RPR_MATERIAL_NODE_MATX_LAYER = 4120
    RPR_MATERIAL_NODE_MATX_THIN_FILM = 4121
    RPR_MATERIAL_NODE_MATX_BITANGENT = 4122
    RPR_MATERIAL_NODE_MATX_TEXCOORD = 4123
    RPR_MATERIAL_NODE_MATX_MODULO = 4124
    RPR_MATERIAL_NODE_MATX_ABSVAL = 4125
    RPR_MATERIAL_NODE_MATX_SIGN = 4126
    RPR_MATERIAL_NODE_MATX_FLOOR = 4127
    RPR_MATERIAL_NODE_MATX_CEIL = 4128
    RPR_MATERIAL_NODE_MATX_ATAN2 = 4129
    RPR_MATERIAL_NODE_MATX_SQRT = 4130
    RPR_MATERIAL_NODE_MATX_LN = 4131
    RPR_MATERIAL_NODE_MATX_EXP = 4132
    RPR_MATERIAL_NODE_MATX_CLAMP = 4133
    RPR_MATERIAL_NODE_MATX_MIN = 4134
    RPR_MATERIAL_NODE_MATX_MAX = 4135
    RPR_MATERIAL_NODE_MATX_MAGNITUDE = 4136
    RPR_MATERIAL_NODE_MATX_CROSSPRODUCT = 4137
    RPR_MATERIAL_NODE_MATX_REMAP = 4138
    RPR_MATERIAL_NODE_MATX_SMOOTHSTEP = 4139
    RPR_MATERIAL_NODE_MATX_RGBTOHSV = 4140
    RPR_MATERIAL_NODE_MATX_HSVTORGB = 4141
    RPR_MATERIAL_NODE_MATX_IFGREATEREQ = 4142
    RPR_MATERIAL_NODE_MATX_IFEQUAL = 4143
    RPR_MATERIAL_NODE_MATX_SWIZZLE = 4144
    RPR_MATERIAL_NODE_MATX_NOISE2D = 4145
    RPR_MATERIAL_NODE_MATX_PLUS = 4146
    RPR_MATERIAL_NODE_MATX_MINUS = 4147
    RPR_MATERIAL_NODE_MATX_DIFFERENCE = 4148
    RPR_MATERIAL_NODE_MATX_BURN = 4149
    RPR_MATERIAL_NODE_MATX_DODGE = 4150
    RPR_MATERIAL_NODE_MATX_SCREEN = 4151
    RPR_MATERIAL_NODE_MATX_OVERLAY = 4152
    RPR_MATERIAL_NODE_MATX_INSIDE = 4153
    RPR_MATERIAL_NODE_MATX_OUTSIDE = 4154
    RPR_MATERIAL_NODE_MATX_RAMPLR = 4155
    RPR_MATERIAL_NODE_MATX_RAMPTB = 4156
    RPR_MATERIAL_NODE_MATX_SPLITLR = 4157
    RPR_MATERIAL_NODE_MATX_SPLITTB = 4158
    RPR_MATERIAL_NODE_MATX_CELLNOISE2D = 4159
    RPR_MATERIAL_NODE_MATX_CELLNOISE3D = 4160
    RPR_MATERIAL_NODE_MATX_ROTATE2D = 4161
    RPR_MATERIAL_NODE_MATX_DOT = 4162
    RPR_MATERIAL_NODE_MATX_RANGE = 4163
    RPR_MATERIAL_NODE_MATX_SWITCH = 4164
    RPR_MATERIAL_NODE_MATX_EXTRACT = 4165
    RPR_MATERIAL_NODE_MATX_COMBINE2 = 4166
    RPR_MATERIAL_NODE_MATX_COMBINE3 = 4167
    RPR_MATERIAL_NODE_MATX_COMBINE4 = 4168
    RPR_MATERIAL_NODE_MATX_TRIPLANARPROJECTION = 4169
    RPR_MATERIAL_NODE_MATX_MULTIPLY = 4170
end

@cenum rpr_material_node_input::UInt32 begin
    RPR_MATERIAL_INPUT_COLOR = 0
    RPR_MATERIAL_INPUT_COLOR0 = 1
    RPR_MATERIAL_INPUT_COLOR1 = 2
    RPR_MATERIAL_INPUT_NORMAL = 3
    RPR_MATERIAL_INPUT_UV = 4
    RPR_MATERIAL_INPUT_DATA = 5
    RPR_MATERIAL_INPUT_ROUGHNESS = 6
    RPR_MATERIAL_INPUT_IOR = 7
    RPR_MATERIAL_INPUT_ROUGHNESS_X = 8
    RPR_MATERIAL_INPUT_ROUGHNESS_Y = 9
    RPR_MATERIAL_INPUT_ROTATION = 10
    RPR_MATERIAL_INPUT_WEIGHT = 11
    RPR_MATERIAL_INPUT_OP = 12
    RPR_MATERIAL_INPUT_INVEC = 13
    RPR_MATERIAL_INPUT_UV_SCALE = 14
    RPR_MATERIAL_INPUT_VALUE = 15
    RPR_MATERIAL_INPUT_REFLECTANCE = 16
    RPR_MATERIAL_INPUT_SCALE = 17
    RPR_MATERIAL_INPUT_SCATTERING = 18
    RPR_MATERIAL_INPUT_ABSORBTION = 19
    RPR_MATERIAL_INPUT_EMISSION = 20
    RPR_MATERIAL_INPUT_G = 21
    RPR_MATERIAL_INPUT_MULTISCATTER = 22
    RPR_MATERIAL_INPUT_COLOR2 = 23
    RPR_MATERIAL_INPUT_COLOR3 = 24
    RPR_MATERIAL_INPUT_ANISOTROPIC = 25
    RPR_MATERIAL_INPUT_FRONTFACE = 26
    RPR_MATERIAL_INPUT_BACKFACE = 27
    RPR_MATERIAL_INPUT_ORIGIN = 28
    RPR_MATERIAL_INPUT_ZAXIS = 29
    RPR_MATERIAL_INPUT_XAXIS = 30
    RPR_MATERIAL_INPUT_THRESHOLD = 31
    RPR_MATERIAL_INPUT_OFFSET = 32
    RPR_MATERIAL_INPUT_UV_TYPE = 33
    RPR_MATERIAL_INPUT_RADIUS = 34
    RPR_MATERIAL_INPUT_SIDE = 35
    RPR_MATERIAL_INPUT_CAUSTICS = 36
    RPR_MATERIAL_INPUT_TRANSMISSION_COLOR = 37
    RPR_MATERIAL_INPUT_THICKNESS = 38
    RPR_MATERIAL_INPUT_0 = 39
    RPR_MATERIAL_INPUT_1 = 40
    RPR_MATERIAL_INPUT_2 = 41
    RPR_MATERIAL_INPUT_3 = 42
    RPR_MATERIAL_INPUT_4 = 43
    RPR_MATERIAL_INPUT_SCHLICK_APPROXIMATION = 44
    RPR_MATERIAL_INPUT_APPLYSURFACE = 45
    RPR_MATERIAL_INPUT_TANGENT = 46
    RPR_MATERIAL_INPUT_DISTRIBUTION = 47
    RPR_MATERIAL_INPUT_BASE = 48
    RPR_MATERIAL_INPUT_TINT = 49
    RPR_MATERIAL_INPUT_EXPONENT = 50
    RPR_MATERIAL_INPUT_AMPLITUDE = 51
    RPR_MATERIAL_INPUT_PIVOT = 52
    RPR_MATERIAL_INPUT_POSITION = 53
    RPR_MATERIAL_INPUT_AMOUNT = 54
    RPR_MATERIAL_INPUT_AXIS = 55
    RPR_MATERIAL_INPUT_LUMACOEFF = 56
    RPR_MATERIAL_INPUT_REFLECTIVITY = 57
    RPR_MATERIAL_INPUT_EDGE_COLOR = 58
    RPR_MATERIAL_INPUT_VIEW_DIRECTION = 59
    RPR_MATERIAL_INPUT_INTERIOR = 60
    RPR_MATERIAL_INPUT_OCTAVES = 61
    RPR_MATERIAL_INPUT_LACUNARITY = 62
    RPR_MATERIAL_INPUT_DIMINISH = 63
    RPR_MATERIAL_INPUT_WRAP_U = 64
    RPR_MATERIAL_INPUT_WRAP_V = 65
    RPR_MATERIAL_INPUT_WRAP_W = 66
    RPR_MATERIAL_INPUT_5 = 67
    RPR_MATERIAL_INPUT_6 = 68
    RPR_MATERIAL_INPUT_7 = 69
    RPR_MATERIAL_INPUT_8 = 70
    RPR_MATERIAL_INPUT_9 = 71
    RPR_MATERIAL_INPUT_10 = 72
    RPR_MATERIAL_INPUT_11 = 73
    RPR_MATERIAL_INPUT_12 = 74
    RPR_MATERIAL_INPUT_13 = 75
    RPR_MATERIAL_INPUT_14 = 76
    RPR_MATERIAL_INPUT_15 = 77
    RPR_MATERIAL_INPUT_DIFFUSE_RAMP = 78
    RPR_MATERIAL_INPUT_SHADOW = 79
    RPR_MATERIAL_INPUT_MID = 80
    RPR_MATERIAL_INPUT_HIGHLIGHT = 81
    RPR_MATERIAL_INPUT_POSITION1 = 82
    RPR_MATERIAL_INPUT_POSITION2 = 83
    RPR_MATERIAL_INPUT_RANGE1 = 84
    RPR_MATERIAL_INPUT_RANGE2 = 85
    RPR_MATERIAL_INPUT_INTERPOLATION = 86
    RPR_MATERIAL_INPUT_RANDOMNESS = 87
    RPR_MATERIAL_INPUT_DIMENSION = 88
    RPR_MATERIAL_INPUT_OUTTYPE = 89
    RPR_MATERIAL_INPUT_DENSITY = 90
    RPR_MATERIAL_INPUT_DENSITYGRID = 91
    RPR_MATERIAL_INPUT_DISPLACEMENT = 92
    RPR_MATERIAL_INPUT_TEMPERATURE = 93
    RPR_MATERIAL_INPUT_KELVIN = 94
    RPR_MATERIAL_INPUT_EXTINCTION = 95
    RPR_MATERIAL_INPUT_THIN_FILM = 96
    RPR_MATERIAL_INPUT_TOP = 97
    RPR_MATERIAL_INPUT_HIGHLIGHT2 = 98
    RPR_MATERIAL_INPUT_SHADOW2 = 99
    RPR_MATERIAL_INPUT_POSITION_SHADOW = 100
    RPR_MATERIAL_INPUT_POSITION_HIGHLIGHT = 101
    RPR_MATERIAL_INPUT_RANGE_SHADOW = 102
    RPR_MATERIAL_INPUT_RANGE_HIGHLIGHT = 103
    RPR_MATERIAL_INPUT_TOON_5_COLORS = 104
    RPR_MATERIAL_INPUT_X = 105
    RPR_MATERIAL_INPUT_Y = 106
    RPR_MATERIAL_INPUT_Z = 107
    RPR_MATERIAL_INPUT_W = 108
    RPR_MATERIAL_INPUT_LIGHT = 109
    RPR_MATERIAL_INPUT_MID_IS_ALBEDO = 110
    RPR_MATERIAL_INPUT_SAMPLES = 111
    RPR_MATERIAL_INPUT_BASE_NORMAL = 112
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_COLOR = 2320
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_WEIGHT = 2343
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_ROUGHNESS = 2321
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_NORMAL = 2322
    RPR_MATERIAL_INPUT_UBER_REFLECTION_COLOR = 2323
    RPR_MATERIAL_INPUT_UBER_REFLECTION_WEIGHT = 2344
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ROUGHNESS = 2324
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY = 2325
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY_ROTATION = 2326
    RPR_MATERIAL_INPUT_UBER_REFLECTION_MODE = 2327
    RPR_MATERIAL_INPUT_UBER_REFLECTION_IOR = 2328
    RPR_MATERIAL_INPUT_UBER_REFLECTION_METALNESS = 2329
    RPR_MATERIAL_INPUT_UBER_REFLECTION_NORMAL = 2345
    RPR_MATERIAL_INPUT_UBER_REFLECTION_DIELECTRIC_REFLECTANCE = 2366
    RPR_MATERIAL_INPUT_UBER_REFRACTION_COLOR = 2330
    RPR_MATERIAL_INPUT_UBER_REFRACTION_WEIGHT = 2346
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ROUGHNESS = 2331
    RPR_MATERIAL_INPUT_UBER_REFRACTION_IOR = 2332
    RPR_MATERIAL_INPUT_UBER_REFRACTION_NORMAL = 2347
    RPR_MATERIAL_INPUT_UBER_REFRACTION_THIN_SURFACE = 2333
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_COLOR = 2348
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_DISTANCE = 2349
    RPR_MATERIAL_INPUT_UBER_REFRACTION_CAUSTICS = 2350
    RPR_MATERIAL_INPUT_UBER_COATING_COLOR = 2334
    RPR_MATERIAL_INPUT_UBER_COATING_WEIGHT = 2351
    RPR_MATERIAL_INPUT_UBER_COATING_ROUGHNESS = 2335
    RPR_MATERIAL_INPUT_UBER_COATING_MODE = 2336
    RPR_MATERIAL_INPUT_UBER_COATING_IOR = 2337
    RPR_MATERIAL_INPUT_UBER_COATING_METALNESS = 2338
    RPR_MATERIAL_INPUT_UBER_COATING_NORMAL = 2339
    RPR_MATERIAL_INPUT_UBER_COATING_TRANSMISSION_COLOR = 2352
    RPR_MATERIAL_INPUT_UBER_COATING_THICKNESS = 2353
    RPR_MATERIAL_INPUT_UBER_SHEEN = 2354
    RPR_MATERIAL_INPUT_UBER_SHEEN_TINT = 2355
    RPR_MATERIAL_INPUT_UBER_SHEEN_WEIGHT = 2356
    RPR_MATERIAL_INPUT_UBER_EMISSION_COLOR = 2340
    RPR_MATERIAL_INPUT_UBER_EMISSION_WEIGHT = 2341
    RPR_MATERIAL_INPUT_UBER_EMISSION_MODE = 2357
    RPR_MATERIAL_INPUT_UBER_TRANSPARENCY = 2342
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_COLOR = 2359
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_DISTANCE = 2360
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_DIRECTION = 2361
    RPR_MATERIAL_INPUT_UBER_SSS_WEIGHT = 2362
    RPR_MATERIAL_INPUT_UBER_SSS_MULTISCATTER = 2363
    RPR_MATERIAL_INPUT_UBER_BACKSCATTER_WEIGHT = 2364
    RPR_MATERIAL_INPUT_UBER_BACKSCATTER_COLOR = 2365
    RPR_MATERIAL_INPUT_ADDRESS = 2366
    RPR_MATERIAL_INPUT_TYPE = 2367
    RPR_MATERIAL_INPUT_UBER_FRESNEL_SCHLICK_APPROXIMATION = 44
end

@cenum rpr_material_input_raster::UInt32 begin
    RPR_MATERIAL_INPUT_RASTER_METALLIC = 2305
    RPR_MATERIAL_INPUT_RASTER_ROUGHNESS = 2306
    RPR_MATERIAL_INPUT_RASTER_SUBSURFACE = 2307
    RPR_MATERIAL_INPUT_RASTER_ANISOTROPIC = 2308
    RPR_MATERIAL_INPUT_RASTER_SPECULAR = 2309
    RPR_MATERIAL_INPUT_RASTER_SPECULARTINT = 2310
    RPR_MATERIAL_INPUT_RASTER_SHEEN = 2311
    RPR_MATERIAL_INPUT_RASTER_SHEENTINT = 2312
    RPR_MATERIAL_INPUT_RASTER_CLEARCOAT = 2314
    RPR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS = 2315
    RPR_MATERIAL_INPUT_RASTER_COLOR = 2316
    RPR_MATERIAL_INPUT_RASTER_NORMAL = 2317
end

@cenum rpr_interpolation_mode::UInt32 begin
    RPR_INTERPOLATION_MODE_NONE = 0
    RPR_INTERPOLATION_MODE_LINEAR = 1
end

@cenum rpr_ubermaterial_ior_mode::UInt32 begin
    RPR_UBER_MATERIAL_IOR_MODE_PBR = 1
    RPR_UBER_MATERIAL_IOR_MODE_METALNESS = 2
end

@cenum rpr_ubermaterial_emission_mode::UInt32 begin
    RPR_UBER_MATERIAL_EMISSION_MODE_SINGLESIDED = 1
    RPR_UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED = 2
end

@cenum rpr_material_node_arithmetic_operation::UInt32 begin
    RPR_MATERIAL_NODE_OP_ADD = 0
    RPR_MATERIAL_NODE_OP_SUB = 1
    RPR_MATERIAL_NODE_OP_MUL = 2
    RPR_MATERIAL_NODE_OP_DIV = 3
    RPR_MATERIAL_NODE_OP_SIN = 4
    RPR_MATERIAL_NODE_OP_COS = 5
    RPR_MATERIAL_NODE_OP_TAN = 6
    RPR_MATERIAL_NODE_OP_SELECT_X = 7
    RPR_MATERIAL_NODE_OP_SELECT_Y = 8
    RPR_MATERIAL_NODE_OP_SELECT_Z = 9
    RPR_MATERIAL_NODE_OP_COMBINE = 10
    RPR_MATERIAL_NODE_OP_DOT3 = 11
    RPR_MATERIAL_NODE_OP_CROSS3 = 12
    RPR_MATERIAL_NODE_OP_LENGTH3 = 13
    RPR_MATERIAL_NODE_OP_NORMALIZE3 = 14
    RPR_MATERIAL_NODE_OP_POW = 15
    RPR_MATERIAL_NODE_OP_ACOS = 16
    RPR_MATERIAL_NODE_OP_ASIN = 17
    RPR_MATERIAL_NODE_OP_ATAN = 18
    RPR_MATERIAL_NODE_OP_AVERAGE_XYZ = 19
    RPR_MATERIAL_NODE_OP_AVERAGE = 20
    RPR_MATERIAL_NODE_OP_MIN = 21
    RPR_MATERIAL_NODE_OP_MAX = 22
    RPR_MATERIAL_NODE_OP_FLOOR = 23
    RPR_MATERIAL_NODE_OP_MOD = 24
    RPR_MATERIAL_NODE_OP_ABS = 25
    RPR_MATERIAL_NODE_OP_SHUFFLE_YZWX = 26
    RPR_MATERIAL_NODE_OP_SHUFFLE_ZWXY = 27
    RPR_MATERIAL_NODE_OP_SHUFFLE_WXYZ = 28
    RPR_MATERIAL_NODE_OP_MAT_MUL = 29
    RPR_MATERIAL_NODE_OP_SELECT_W = 30
    RPR_MATERIAL_NODE_OP_DOT4 = 31
    RPR_MATERIAL_NODE_OP_LOG = 32
    RPR_MATERIAL_NODE_OP_LOWER_OR_EQUAL = 33
    RPR_MATERIAL_NODE_OP_LOWER = 34
    RPR_MATERIAL_NODE_OP_GREATER_OR_EQUAL = 35
    RPR_MATERIAL_NODE_OP_GREATER = 36
    RPR_MATERIAL_NODE_OP_EQUAL = 37
    RPR_MATERIAL_NODE_OP_NOT_EQUAL = 38
    RPR_MATERIAL_NODE_OP_AND = 39
    RPR_MATERIAL_NODE_OP_OR = 40
    RPR_MATERIAL_NODE_OP_TERNARY = 41
end

@cenum rpr_material_node_lookup_value::UInt32 begin
    RPR_MATERIAL_NODE_LOOKUP_UV = 0
    RPR_MATERIAL_NODE_LOOKUP_N = 1
    RPR_MATERIAL_NODE_LOOKUP_P = 2
    RPR_MATERIAL_NODE_LOOKUP_INVEC = 3
    RPR_MATERIAL_NODE_LOOKUP_OUTVEC = 4
    RPR_MATERIAL_NODE_LOOKUP_UV1 = 5
    RPR_MATERIAL_NODE_LOOKUP_P_LOCAL = 6
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE0 = 7
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE1 = 8
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE2 = 9
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE3 = 10
    RPR_MATERIAL_NODE_LOOKUP_SHAPE_RANDOM_COLOR = 11
    RPR_MATERIAL_NODE_LOOKUP_OBJECT_ID = 12
    RPR_MATERIAL_NODE_LOOKUP_PRIMITIVE_RANDOM_COLOR = 13
end

@cenum rpr_material_gradient_procedural_type::UInt32 begin
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_LINEAR = 1
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_QUADRATIC = 2
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_EASING = 3
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_DIAGONAL = 4
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_SPHERICAL = 5
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_QUAD_SPHERE = 6
    RPR_MATERIAL_GRADIENT_PROCEDURAL_TYPE_RADIAL = 7
end

@cenum rpr_material_node_uvtype_value::UInt32 begin
    RPR_MATERIAL_NODE_UVTYPE_PLANAR = 0
    RPR_MATERIAL_NODE_UVTYPE_CYLINDICAL = 1
    RPR_MATERIAL_NODE_UVTYPE_SPHERICAL = 2
    RPR_MATERIAL_NODE_UVTYPE_PROJECT = 3
end

@cenum rpr_material_node_transform_op::UInt32 begin
    RPR_MATERIAL_NODE_TRANSFORM_ROTATE_LOCAL_TO_WORLD = 1
end

@cenum rpr_post_effect_info::UInt32 begin
    RPR_POST_EFFECT_TYPE = 0
    RPR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE = 4
    RPR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE = 5
    RPR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE = 6
    RPR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST = 7
    RPR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP = 8
    RPR_POST_EFFECT_BLOOM_RADIUS = 9
    RPR_POST_EFFECT_BLOOM_THRESHOLD = 10
    RPR_POST_EFFECT_BLOOM_WEIGHT = 11
    RPR_POST_EFFECT_NAME = 7829367
    RPR_POST_EFFECT_UNIQUE_ID = 7829368
    RPR_POST_EFFECT_CUSTOM_PTR = 7829369
end

@cenum rpr_aov::UInt32 begin
    RPR_AOV_COLOR = 0
    RPR_AOV_OPACITY = 1
    RPR_AOV_WORLD_COORDINATE = 2
    RPR_AOV_UV = 3
    RPR_AOV_MATERIAL_ID = 4
    RPR_AOV_GEOMETRIC_NORMAL = 5
    RPR_AOV_SHADING_NORMAL = 6
    RPR_AOV_DEPTH = 7
    RPR_AOV_OBJECT_ID = 8
    RPR_AOV_OBJECT_GROUP_ID = 9
    RPR_AOV_SHADOW_CATCHER = 10
    RPR_AOV_BACKGROUND = 11
    RPR_AOV_EMISSION = 12
    RPR_AOV_VELOCITY = 13
    RPR_AOV_DIRECT_ILLUMINATION = 14
    RPR_AOV_INDIRECT_ILLUMINATION = 15
    RPR_AOV_AO = 16
    RPR_AOV_DIRECT_DIFFUSE = 17
    RPR_AOV_DIRECT_REFLECT = 18
    RPR_AOV_INDIRECT_DIFFUSE = 19
    RPR_AOV_INDIRECT_REFLECT = 20
    RPR_AOV_REFRACT = 21
    RPR_AOV_VOLUME = 22
    RPR_AOV_LIGHT_GROUP0 = 23
    RPR_AOV_LIGHT_GROUP1 = 24
    RPR_AOV_LIGHT_GROUP2 = 25
    RPR_AOV_LIGHT_GROUP3 = 26
    RPR_AOV_DIFFUSE_ALBEDO = 27
    RPR_AOV_VARIANCE = 28
    RPR_AOV_VIEW_SHADING_NORMAL = 29
    RPR_AOV_REFLECTION_CATCHER = 30
    RPR_AOV_COLOR_RIGHT = 31
    RPR_AOV_LPE_0 = 32
    RPR_AOV_LPE_1 = 33
    RPR_AOV_LPE_2 = 34
    RPR_AOV_LPE_3 = 35
    RPR_AOV_LPE_4 = 36
    RPR_AOV_LPE_5 = 37
    RPR_AOV_LPE_6 = 38
    RPR_AOV_LPE_7 = 39
    RPR_AOV_LPE_8 = 40
    RPR_AOV_CAMERA_NORMAL = 41
    RPR_AOV_MATTE_PASS = 42
    RPR_AOV_SSS = 43
    RPR_AOV_CRYPTOMATTE_MAT0 = 48
    RPR_AOV_CRYPTOMATTE_MAT1 = 49
    RPR_AOV_CRYPTOMATTE_MAT2 = 50
    RPR_AOV_CRYPTOMATTE_MAT3 = 51
    RPR_AOV_CRYPTOMATTE_MAT4 = 52
    RPR_AOV_CRYPTOMATTE_MAT5 = 53
    RPR_AOV_CRYPTOMATTE_OBJ0 = 56
    RPR_AOV_CRYPTOMATTE_OBJ1 = 57
    RPR_AOV_CRYPTOMATTE_OBJ2 = 58
    RPR_AOV_CRYPTOMATTE_OBJ3 = 59
    RPR_AOV_CRYPTOMATTE_OBJ4 = 60
    RPR_AOV_CRYPTOMATTE_OBJ5 = 61
    RPR_AOV_DEEP_COLOR = 64
    RPR_AOV_LIGHT_GROUP4 = 80
    RPR_AOV_LIGHT_GROUP5 = 81
    RPR_AOV_LIGHT_GROUP6 = 82
    RPR_AOV_LIGHT_GROUP7 = 83
    RPR_AOV_LIGHT_GROUP8 = 84
    RPR_AOV_LIGHT_GROUP9 = 85
    RPR_AOV_LIGHT_GROUP10 = 86
    RPR_AOV_LIGHT_GROUP11 = 87
    RPR_AOV_LIGHT_GROUP12 = 88
    RPR_AOV_LIGHT_GROUP13 = 89
    RPR_AOV_LIGHT_GROUP14 = 90
    RPR_AOV_LIGHT_GROUP15 = 91
    RPR_AOV_MESH_ID = 96
end

@cenum rpr_post_effect_type::UInt32 begin
    RPR_POST_EFFECT_TONE_MAP = 0
    RPR_POST_EFFECT_WHITE_BALANCE = 1
    RPR_POST_EFFECT_SIMPLE_TONEMAP = 2
    RPR_POST_EFFECT_NORMALIZATION = 3
    RPR_POST_EFFECT_GAMMA_CORRECTION = 4
    RPR_POST_EFFECT_BLOOM = 5
end

@cenum rpr_color_space::UInt32 begin
    RPR_COLOR_SPACE_SRGB = 1
    RPR_COLOR_SPACE_ADOBE_RGB = 2
    RPR_COLOR_SPACE_REC2020 = 3
    RPR_COLOR_SPACE_DCIP3 = 4
end

@cenum rpr_material_node_input_type::UInt32 begin
    RPR_MATERIAL_NODE_INPUT_TYPE_FLOAT4 = 1
    RPR_MATERIAL_NODE_INPUT_TYPE_UINT = 2
    RPR_MATERIAL_NODE_INPUT_TYPE_NODE = 3
    RPR_MATERIAL_NODE_INPUT_TYPE_IMAGE = 4
    RPR_MATERIAL_NODE_INPUT_TYPE_BUFFER = 5
    RPR_MATERIAL_NODE_INPUT_TYPE_GRID = 6
    RPR_MATERIAL_NODE_INPUT_TYPE_DATA = 7
    RPR_MATERIAL_NODE_INPUT_TYPE_LIGHT = 8
end

@cenum rpr_subdiv_boundary_interfop_type::UInt32 begin
    RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER = 1
    RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY = 2
end

@cenum rpr_image_wrap_type::UInt32 begin
    RPR_IMAGE_WRAP_TYPE_REPEAT = 1
    RPR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT = 2
    RPR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE = 3
    RPR_IMAGE_WRAP_TYPE_CLAMP_ZERO = 5
    RPR_IMAGE_WRAP_TYPE_CLAMP_ONE = 6
end

@cenum rpr_voronoi_out_type::UInt32 begin
    RPR_VORONOI_OUT_TYPE_DISTANCE = 1
    RPR_VORONOI_OUT_TYPE_COLOR = 2
    RPR_VORONOI_OUT_TYPE_POSITION = 3
end

@cenum rpr_image_filter_type::UInt32 begin
    RPR_IMAGE_FILTER_TYPE_NEAREST = 1
    RPR_IMAGE_FILTER_TYPE_LINEAR = 2
end

@cenum rpr_composite_info::UInt32 begin
    RPR_COMPOSITE_TYPE = 1
    RPR_COMPOSITE_FRAMEBUFFER_INPUT_FB = 2
    RPR_COMPOSITE_NORMALIZE_INPUT_COLOR = 3
    RPR_COMPOSITE_NORMALIZE_INPUT_AOVTYPE = 4
    RPR_COMPOSITE_CONSTANT_INPUT_VALUE = 5
    RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR0 = 6
    RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR1 = 7
    RPR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT = 8
    RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR0 = 9
    RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR1 = 10
    RPR_COMPOSITE_ARITHMETIC_INPUT_OP = 11
    RPR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR = 12
    RPR_COMPOSITE_LUT_INPUT_LUT = 13
    RPR_COMPOSITE_LUT_INPUT_COLOR = 14
    RPR_COMPOSITE_NAME = 7829367
    RPR_COMPOSITE_UNIQUE_ID = 7829368
    RPR_COMPOSITE_CUSTOM_PTR = 7829369
end

@cenum rpr_composite_type::UInt32 begin
    RPR_COMPOSITE_ARITHMETIC = 1
    RPR_COMPOSITE_LERP_VALUE = 2
    RPR_COMPOSITE_INVERSE = 3
    RPR_COMPOSITE_NORMALIZE = 4
    RPR_COMPOSITE_GAMMA_CORRECTION = 5
    RPR_COMPOSITE_EXPOSURE = 6
    RPR_COMPOSITE_CONTRAST = 7
    RPR_COMPOSITE_SIDE_BY_SIDE = 8
    RPR_COMPOSITE_TONEMAP_ACES = 9
    RPR_COMPOSITE_TONEMAP_REINHARD = 10
    RPR_COMPOSITE_TONEMAP_LINEAR = 11
    RPR_COMPOSITE_FRAMEBUFFER = 12
    RPR_COMPOSITE_CONSTANT = 13
    RPR_COMPOSITE_LUT = 14
end

@cenum rpr_grid_parameter::UInt32 begin
    RPR_GRID_SIZE_X = 2352
    RPR_GRID_SIZE_Y = 2353
    RPR_GRID_SIZE_Z = 2354
    RPR_GRID_DATA = 2355
    RPR_GRID_DATA_SIZEBYTE = 2356
    RPR_GRID_INDICES = 2358
    RPR_GRID_INDICES_NUMBER = 2359
    RPR_GRID_INDICES_TOPOLOGY = 2360
    RPR_GRID_NAME = 7829367
    RPR_GRID_UNIQUE_ID = 7829368
    RPR_GRID_CUSTOM_PTR = 7829369
end

@cenum rpr_hetero_volume_parameter::UInt32 begin
    RPR_HETEROVOLUME_TRANSFORM = 1845
    RPR_HETEROVOLUME_ALBEDO_V2 = 1852
    RPR_HETEROVOLUME_DENSITY_V2 = 1853
    RPR_HETEROVOLUME_EMISSION_V2 = 1854
    RPR_HETEROVOLUME_ALBEDO_LOOKUP_VALUES = 1855
    RPR_HETEROVOLUME_ALBEDO_LOOKUP_VALUES_COUNT = 1856
    RPR_HETEROVOLUME_DENSITY_LOOKUP_VALUES = 1857
    RPR_HETEROVOLUME_DENSITY_LOOKUP_VALUES_COUNT = 1858
    RPR_HETEROVOLUME_EMISSION_LOOKUP_VALUES = 1859
    RPR_HETEROVOLUME_EMISSION_LOOKUP_VALUES_COUNT = 1860
    RPR_HETEROVOLUME_ALBEDO_SCALE = 1861
    RPR_HETEROVOLUME_DENSITY_SCALE = 1862
    RPR_HETEROVOLUME_EMISSION_SCALE = 1863
    RPR_HETEROVOLUME_NAME = 7829367
    RPR_HETEROVOLUME_UNIQUE_ID = 7829368
    RPR_HETEROVOLUME_CUSTOM_PTR = 7829369
end

@cenum rpr_grid_indices_topology::UInt32 begin
    RPR_GRID_INDICES_TOPOLOGY_I_U64 = 2384
    RPR_GRID_INDICES_TOPOLOGY_XYZ_U32 = 2385
    RPR_GRID_INDICES_TOPOLOGY_I_S64 = 2386
    RPR_GRID_INDICES_TOPOLOGY_XYZ_S32 = 2387
end

@cenum rpr_curve_parameter::UInt32 begin
    RPR_CURVE_CONTROLPOINTS_COUNT = 2096
    RPR_CURVE_CONTROLPOINTS_DATA = 2097
    RPR_CURVE_CONTROLPOINTS_STRIDE = 2098
    RPR_CURVE_INDICES_COUNT = 2099
    RPR_CURVE_INDICES_DATA = 2100
    RPR_CURVE_RADIUS = 2101
    RPR_CURVE_UV = 2102
    RPR_CURVE_COUNT_CURVE = 2103
    RPR_CURVE_SEGMENTS_PER_CURVE = 2104
    RPR_CURVE_CREATION_FLAG = 2105
    RPR_CURVE_NAME = 7829367
    RPR_CURVE_UNIQUE_ID = 7829368
    RPR_CURVE_CUSTOM_PTR = 7829369
    RPR_CURVE_TRANSFORM = 1027
    RPR_CURVE_MATERIAL = 1028
    RPR_CURVE_VISIBILITY_PRIMARY_ONLY_FLAG = 1036
    RPR_CURVE_VISIBILITY_SHADOW = 1050
    RPR_CURVE_VISIBILITY_REFLECTION = 1051
    RPR_CURVE_VISIBILITY_REFRACTION = 1052
    RPR_CURVE_VISIBILITY_TRANSPARENT = 1053
    RPR_CURVE_VISIBILITY_DIFFUSE = 1054
    RPR_CURVE_VISIBILITY_GLOSSY_REFLECTION = 1055
    RPR_CURVE_VISIBILITY_GLOSSY_REFRACTION = 1056
    RPR_CURVE_VISIBILITY_LIGHT = 1057
    RPR_CURVE_VISIBILITY_RECEIVE_SHADOW = 1072
end

struct rpr_image_desc
    image_width::rpr_uint
    image_height::rpr_uint
    image_depth::rpr_uint
    image_row_pitch::rpr_uint
    image_slice_pitch::rpr_uint
end

struct rpr_buffer_desc
    nb_element::rpr_uint
    element_type::rpr_buffer_element_type
    element_channel_size::rpr_uint
end

struct rpr_framebuffer_desc
    fb_width::rpr_uint
    fb_height::rpr_uint
end

struct rpr_render_statistics
    gpumem_usage::rpr_longlong
    gpumem_total::rpr_longlong
    gpumem_max_allocation::rpr_longlong
    sysmem_usage::rpr_longlong
end

struct rpr_image_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct rpr_framebuffer_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct rpr_ies_image_desc
    w::rpr_int
    h::rpr_int
    data::Ptr{rpr_char}
    filename::Ptr{rpr_char}
end

"""
    rprRegisterPlugin(path)

Register rendering plugin

<Description>

### Parameters
* `path`: Path of plugin to load (for UNICODE, supports UTF-8 encoding)
### Returns
unique identifier of plugin, -1 otherwise
"""
function rprRegisterPlugin(path)
    ccall((:rprRegisterPlugin, libRadeonProRender64), rpr_int, (Ptr{rpr_char},), path)
end

"""
    rprCreateContext(api_version, pluginIDs, pluginCount, creation_flags, props, cache_path)

Create rendering context

Rendering context is a root concept encapsulating the render states and responsible for execution control. All the entities in Radeon ProRender are created for a particular rendering context. Entities created for some context can't be used with other contexts. Possible error codes for this call are:

[`RPR_ERROR_COMPUTE_API_NOT_SUPPORTED`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_INVALID_API_VERSION`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `api_version`: Api version constant
* `context_type`: Determines compute API to use, OPENCL only is supported for now
* `creation_flags`: Determines multi-gpu or cpu-gpu configuration
* `props`: Context creation properties. Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value. The list is terminated with 0.
* `cache_path`: Full path to kernel cache created by Radeon ProRender, NULL means to use current folder (for UNICODE, supports UTF-8 encoding)
* `cpu_thread_limit`:	Limit for the number of threads used for CPU rendering
* `out_context`:	Pointer to context object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCreateContext(api_version, pluginIDs, pluginCount, creation_flags, props, cache_path)
    out_context = Ref{rpr_context}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprCreateContext, libRadeonProRender64), rpr_status, (rpr_uint, Ptr{rpr_int}, Csize_t, rpr_creation_flags, Ptr{rpr_context_properties}, Ptr{rpr_char}, Ptr{rpr_context}), api_version, pluginIDs, pluginCount, creation_flags, props, cache_path, out_context))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_context[]
end

"""
    rprContextSetActivePlugin(context, pluginID)

Set active context plugin
"""
function rprContextSetActivePlugin(context, pluginID)
    check_error(ccall((:rprContextSetActivePlugin, libRadeonProRender64), rpr_status, (rpr_context, rpr_int), context, pluginID))
end

"""
    rprContextGetInfo(context, context_info, size, data, size_ret)

Query information about a context

The workflow is usually two-step: query with the data == NULL and size = 0 to get the required buffer size in size\\_ret, then query with size\\_ret == NULL to fill the buffer with the data. Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `context`: The context to query
* `context_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextGetInfo(context, context_info, size, data, size_ret)
    check_error(ccall((:rprContextGetInfo, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), context, context_info, size, data, size_ret))
end

"""
    rprContextGetParameterInfo(context, param_idx, parameter_info, size, data, size_ret)

Query information about a context parameter

The workflow is usually two-step: query with the data == NULL and size = 0 to get the required buffer size in size\\_ret, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `context`: The context to query
* `param_idx`:	The index of the parameter - must be between 0 and (value stored by [`RPR_CONTEXT_PARAMETER_COUNT`](@ref))-1
* `parameter_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextGetParameterInfo(context, param_idx, parameter_info, size, data, size_ret)
    check_error(ccall((:rprContextGetParameterInfo, libRadeonProRender64), rpr_status, (rpr_context, Cint, rpr_parameter_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), context, param_idx, parameter_info, size, data, size_ret))
end

"""
    rprContextGetAOV(context, aov)

Query the AOV

### Parameters
* `context`: The context to get a frame buffer from
* `out_fb`:	Pointer to framebuffer object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextGetAOV(context, aov)
    out_fb = Ref{rpr_framebuffer}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextGetAOV, libRadeonProRender64), rpr_status, (rpr_context, rpr_aov, Ptr{rpr_framebuffer}), context, aov, out_fb))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_fb[]
end

"""
    rprContextSetAOV(context, aov, frame_buffer)

Set AOV

### Parameters
* `context`: The context to set AOV
* `aov`:	AOV
* `frame_buffer`: Frame buffer object to set
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextSetAOV(context, aov, frame_buffer)
    check_error(ccall((:rprContextSetAOV, libRadeonProRender64), rpr_status, (rpr_context, rpr_aov, rpr_framebuffer), context, aov, frame_buffer))
end

"""
    rprContextAttachRenderLayer(context, renderLayerString)



### Parameters
* `context`: The context to set
* `renderLayerString`: Render layer name to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextAttachRenderLayer(context, renderLayerString)
    check_error(ccall((:rprContextAttachRenderLayer, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}), context, renderLayerString))
end

"""
    rprContextDetachRenderLayer(context, renderLayerString)



### Parameters
* `context`: The context to set
* `renderLayerString`: Render layer name to detach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextDetachRenderLayer(context, renderLayerString)
    check_error(ccall((:rprContextDetachRenderLayer, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}), context, renderLayerString))
end

"""
    rprFrameBufferSetLPE(frame_buffer, lpe)

Set a LPE ( Light Path Expression ) to a framebuffer. Note that this framebuffer should also be assigned to a LPE AOV: [`RPR_AOV_LPE_0`](@ref) , [`RPR_AOV_LPE_1`](@ref) ....

### Parameters
* `frame_buffer`: Frame buffer object to set
* `lpe`: Light Path Expression
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprFrameBufferSetLPE(frame_buffer, lpe)
    check_error(ccall((:rprFrameBufferSetLPE, libRadeonProRender64), rpr_status, (rpr_framebuffer, Ptr{rpr_char}), frame_buffer, lpe))
end

"""
    rprContextSetAOVindexLookup(context, key, colorR, colorG, colorB, colorA)

Set AOV Index Lookup Color change the color of AOV rendering IDs, like : [`RPR_AOV_MATERIAL_ID`](@ref) , [`RPR_AOV_OBJECT_ID`](@ref), [`RPR_AOV_OBJECT_GROUP_ID`](@ref). for example, you can render all the shapes with ObjectGroupID=4 in the Red color inside the [`RPR_AOV_OBJECT_GROUP_ID`](@ref) AOV

### Parameters
* `context`: The context to set AOV index lookup
* `key`:	id
* `colorR`:	red channel
* `colorG`:	green channel
* `colorB`:	blue channel
* `colorA`:	alpha channel
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextSetAOVindexLookup(context, key, colorR, colorG, colorB, colorA)
    check_error(ccall((:rprContextSetAOVindexLookup, libRadeonProRender64), rpr_status, (rpr_context, rpr_int, rpr_float, rpr_float, rpr_float, rpr_float), context, key, colorR, colorG, colorB, colorA))
end

"""
    rprContextSetCuttingPlane(context, index, a, b, c, d)

Set a Cutting Plane (also called Clipping plane).

Notes: - In order to disable the 'index' cutting plane, set (A,B,C,D) = (0,0,0,0) By default, on context creation all cutting planes are disabled.

- Index can be any number. It doesn't need to define the list of plane as a contiguous list of indices.

- If the number of enabled planes is greater than the limit supported by the renderer, then [`RPR_ERROR_UNSUPPORTED`](@ref) is return by the function.

- The normal of the equation plane points toward the area that is kept.

- If several clipping planes are used the rendered area will be the one commonly facing all the planes.

- Plane equation is Ax + By + Cz + D = 0

### Parameters
* `context`:	The context to set the Cutting Plane
* `index`:	cutting plane index ( starts from 0 )
* `a`:	equation plane A
* `b`:	equation plane B
* `c`:	equation plane C
* `d`:	equation plane D
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextSetCuttingPlane(context, index, a, b, c, d)
    check_error(ccall((:rprContextSetCuttingPlane, libRadeonProRender64), rpr_status, (rpr_context, rpr_int, rpr_float, rpr_float, rpr_float, rpr_float), context, index, a, b, c, d))
end

"""
    rprContextSetAOVindicesLookup(context, keyOffset, keyCount, colorRGBA)

call a batch of [`rprContextSetAOVindexLookup`](@ref)

example: [`rprContextSetAOVindicesLookup`](@ref)(ctx, 2, 3, table); is equivalent to call : [`rprContextSetAOVindexLookup`](@ref)(ctx, 2, table[0], table[1], table[2], table[3]); [`rprContextSetAOVindexLookup`](@ref)(ctx, 3, table[4], table[5], table[6], table[7]); [`rprContextSetAOVindexLookup`](@ref)(ctx, 4, table[8], table[9], table[10], table[11]);

Depending on the plugin, [`rprContextSetAOVindicesLookup`](@ref) could be faster than calling several [`rprContextSetAOVindexLookup`](@ref).
"""
function rprContextSetAOVindicesLookup(context, keyOffset, keyCount, colorRGBA)
    check_error(ccall((:rprContextSetAOVindicesLookup, libRadeonProRender64), rpr_status, (rpr_context, rpr_int, rpr_int, Ptr{rpr_float}), context, keyOffset, keyCount, colorRGBA))
end

"""
    rprContextSetUserTexture(context, index, gpuCode, cpuCode)

API user can create its own procedural texture. The API needs both a GPU code ( OpenCL string code ) and a CPU code ( callback ) (API function supported by Northstar only)

example:  #define DEFINE\\_FUNC(FUNCNAME, FUNC) FUNC; const std::string g\\_str\\_##FUNCNAME = #FUNC; DEFINE\\_FUNC( RprCustomMatA , void RprCustomMatA(float* a, float* b, float* c, float* d, float* e, float* f, float* valueOut){ valueOut[0]=0.0; valueOut[1]=sin(d[0]*3.14159); valueOut[2]=0.0; } ); [`rprContextSetUserTexture`](@ref)(context, 3, g\\_str\\_RprCustomMatA.c\\_str(), RprCustomMatA); // use slot 3 // create material based on slot 3 : [`rpr_material_node`](@ref) matUserTex3; [`rprMaterialSystemCreateNode`](@ref)(matsys, [`RPR_MATERIAL_NODE_USER_TEXTURE`](@ref), & matUserTex3); [`rprMaterialNodeSetInputUByKey`](@ref)(matUserTex3, [`RPR_MATERIAL_INPUT_OP`](@ref), 3 ); // bind matUserTex3 to slot 3 [`rprMaterialNodeSetInputNByKey`](@ref)(matUserTex3, [`RPR_MATERIAL_INPUT_4`](@ref), paramInput ); // bind 'paramInput' to the 'e' argument of 'RprCustomMatA'

Notes: - If only the GPU is used, a nullptr can be given to 'cpuCode'. - [`RPR_MATERIAL_NODE_USER_TEXTURE_0`](@ref)...[`RPR_MATERIAL_NODE_USER_TEXTURE_3`](@ref) , [`RPR_CONTEXT_USER_TEXTURE_0`](@ref)...[`RPR_CONTEXT_USER_TEXTURE_3`](@ref) are deprecated and should only be used with the old Tahoe plugin. - When exporting the RPR scene to RPRS or GLTF, the CPU callback pointer will be lost in the imported scene.
"""
function rprContextSetUserTexture(context, index, gpuCode, cpuCode)
    check_error(ccall((:rprContextSetUserTexture, libRadeonProRender64), rpr_status, (rpr_context, rpr_int, Ptr{rpr_char}, Ptr{Cvoid}), context, index, gpuCode, cpuCode))
end

"""
    rprContextGetUserTexture(context, index, bufferSizeByte, buffer, size_ret)

get the gpuCode string set by [`rprContextSetUserTexture`](@ref). (API function supported by Northstar only)
"""
function rprContextGetUserTexture(context, index, bufferSizeByte, buffer, size_ret)
    check_error(ccall((:rprContextGetUserTexture, libRadeonProRender64), rpr_status, (rpr_context, rpr_int, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), context, index, bufferSizeByte, buffer, size_ret))
end

"""
    rprContextSetScene(context, scene)

Set the scene

The scene is a collection of objects and lights along with all the data required to shade those. The scene is used by the context to render the image.

### Parameters
* `context`: The context to set the scene
* `scene`: The scene to set
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextSetScene(context, scene)
    check_error(ccall((:rprContextSetScene, libRadeonProRender64), rpr_status, (rpr_context, rpr_scene), context, scene))
end

"""
    rprContextGetScene(arg0)

Get the current scene

The scene is a collection of objects and lights along with all the data required to shade those. The scene is used by the context ro render the image.

### Parameters
* `context`: The context to get the scene from
* `out_scene`: Pointer to scene object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextGetScene(arg0)
    out_scene = Ref{rpr_scene}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextGetScene, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_scene}), arg0, out_scene))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_scene[]
end

"""
    rprContextSetParameterByKey1u(context, in_input, x)

Set context parameter

Parameters are used to control rendering modes, global sampling and AA settings, etc

### Parameters
* `context`: The context to set the value to
* `in_input`:	Param name, can be any RPR\\_CONTEXT\\_* value
* `x,y,z,w`:	Parameter value
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextSetParameterByKey1u(context, in_input, x)
    check_error(ccall((:rprContextSetParameterByKey1u, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, rpr_uint), context, in_input, x))
end

function rprContextSetParameterByKeyPtr(context, in_input, x)
    check_error(ccall((:rprContextSetParameterByKeyPtr, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, Ptr{Cvoid}), context, in_input, x))
end

function rprContextSetParameterByKey1f(context, in_input, x)
    check_error(ccall((:rprContextSetParameterByKey1f, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, rpr_float), context, in_input, x))
end

function rprContextSetParameterByKey3f(context, in_input, x, y, z)
    check_error(ccall((:rprContextSetParameterByKey3f, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, rpr_float, rpr_float, rpr_float), context, in_input, x, y, z))
end

function rprContextSetParameterByKey4f(context, in_input, x, y, z, w)
    check_error(ccall((:rprContextSetParameterByKey4f, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, rpr_float, rpr_float, rpr_float, rpr_float), context, in_input, x, y, z, w))
end

function rprContextSetParameterByKeyString(context, in_input, value)
    check_error(ccall((:rprContextSetParameterByKeyString, libRadeonProRender64), rpr_status, (rpr_context, rpr_context_info, Ptr{rpr_char}), context, in_input, value))
end

"""
    rprContextSetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w)

This is an internal/experimental backdoor for RPR developers team.

A classic usage of RPR doesn't require usage of this call. Use this only if you understand what you are doing. It's sending the name/value directly to the plugin without any process of RPR API. the 'paramName' is not related with the parameters of [`rprContextSetParameterByKey4f`](@ref). 'pluginIndex' can be used if the context has more than one plugin - Not Implemented for now, set it to 0.
"""
function rprContextSetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w)
    check_error(ccall((:rprContextSetInternalParameter4f, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float, rpr_float), context, pluginIndex, paramName, x, y, z, w))
end

function rprContextSetInternalParameter1u(context, pluginIndex, paramName, x)
    check_error(ccall((:rprContextSetInternalParameter1u, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, rpr_uint), context, pluginIndex, paramName, x))
end

function rprContextSetInternalParameterBuffer(context, pluginIndex, paramName, buffer, bufferSizeByte)
    check_error(ccall((:rprContextSetInternalParameterBuffer, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{Cvoid}, Csize_t), context, pluginIndex, paramName, buffer, bufferSizeByte))
end

function rprContextGetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w)
    check_error(ccall((:rprContextGetInternalParameter4f, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{rpr_float}, Ptr{rpr_float}, Ptr{rpr_float}, Ptr{rpr_float}), context, pluginIndex, paramName, x, y, z, w))
end

function rprContextGetInternalParameter1u(context, pluginIndex, paramName, x)
    check_error(ccall((:rprContextGetInternalParameter1u, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{rpr_uint}), context, pluginIndex, paramName, x))
end

function rprContextGetInternalParameterBuffer(context, pluginIndex, paramName, bufferSizeByte, buffer, size_ret)
    check_error(ccall((:rprContextGetInternalParameterBuffer, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_char}, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), context, pluginIndex, paramName, bufferSizeByte, buffer, size_ret))
end

"""
    rprContextRender(context)

Perform evaluation and accumulation of a single sample (or number of AA samples if AA is enabled)

The call is blocking and the image is ready when returned. The context accumulates the samples in order to progressively refine the image and enable interactive response. So each new call to Render refines the resultin image with 1 (or num aa samples) color samples. Call [`rprFrameBufferClear`](@ref) if you want to start rendering new image instead of refining the previous one.

Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_INTERNAL_ERROR`](@ref) [`RPR_ERROR_MATERIAL_STACK_OVERFLOW`](@ref)

if you have the [`RPR_ERROR_MATERIAL_STACK_OVERFLOW`](@ref) error, you have created a shader graph with too many nodes. you can check the nodes limit with [`rprContextGetInfo`](@ref)(,[`RPR_CONTEXT_MATERIAL_STACK_SIZE`](@ref),)

### Parameters
* `context`: The context object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextRender(context)
    check_error(ccall((:rprContextRender, libRadeonProRender64), rpr_status, (rpr_context,), context))
end

"""
    rprContextAbortRender(context)

can be called in a different thread to interrupt the rendering then, [`rprContextRender`](@ref) will return [`RPR_ERROR_ABORTED`](@ref) instead of [`RPR_SUCCESS`](@ref)
"""
function rprContextAbortRender(context)
    check_error(ccall((:rprContextAbortRender, libRadeonProRender64), rpr_status, (rpr_context,), context))
end

"""
    rprContextRenderTile(context, xmin, xmax, ymin, ymax)

Perform evaluation and accumulation of a single sample (or number of AA samples if AA is enabled) on the part of the image

The call is blocking and the image is ready when returned. The context accumulates the samples in order to progressively refine the image and enable interactive response. So each new call to Render refines the resultin image with 1 (or num aa samples) color samples. Call [`rprFrameBufferClear`](@ref) if you want to start rendering new image instead of refining the previous one. Possible error codes are:

[`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_INTERNAL_ERROR`](@ref)

### Parameters
* `context`: The context to use for the rendering
* `xmin`: X coordinate of the top left corner of a tile
* `xmax`: X coordinate of the bottom right corner of a tile
* `ymin`: Y coordinate of the top left corner of a tile
* `ymax`: Y coordinate of the bottom right corner of a tile
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextRenderTile(context, xmin, xmax, ymin, ymax)
    check_error(ccall((:rprContextRenderTile, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, rpr_uint, rpr_uint, rpr_uint), context, xmin, xmax, ymin, ymax))
end

"""
    rprContextClearMemory(context)

Clear all video memory used by the context

This function should be called after all context objects have been destroyed. It guarantees that all context memory is freed and returns the context into its initial state. Will be removed later. Possible error codes are:

[`RPR_ERROR_INTERNAL_ERROR`](@ref)

### Parameters
* `context`: The context to wipe out
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextClearMemory(context)
    check_error(ccall((:rprContextClearMemory, libRadeonProRender64), rpr_status, (rpr_context,), context))
end

"""
    rprContextCreateImage(context, format, image_desc, data)

Create an image from memory data

Images are used as HDRI maps or inputs for various shading system nodes. Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `context`: The context to create image
* `format`: Image format
* `image_desc`: Image layout description
* `data`: Image data in system memory, can be NULL in which case the memory is allocated
* `out_image`: Pointer to image object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateImage(context, format, image_desc, data)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateImage, libRadeonProRender64), rpr_status, (rpr_context, rpr_image_format, Ptr{rpr_image_desc}, Ptr{Cvoid}, Ptr{rpr_image}), context, format, image_desc, data, out_image))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_image[]
end

"""
    rprContextCreateBuffer(context, buffer_desc, data)

Create a buffer from memory data

Buffers are used as arbitrary input for other nodes

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `context`: The context to create image
* `buffer_desc`: Buffer layout description
* `data`: Image data in system memory, can be NULL in which case the memory is allocated
* `out_buffer`: Pointer to buffer object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateBuffer(context, buffer_desc, data)
    out_buffer = Ref{rpr_buffer}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateBuffer, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_buffer_desc}, Ptr{Cvoid}, Ptr{rpr_buffer}), context, buffer_desc, data, out_buffer))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_buffer[]
end

"""
    rprContextCreateImageFromFile(context, path)

Create an image from file

Images are used as HDRI maps or inputs for various shading system nodes.

The following image formats are supported: PNG, JPG, TGA, BMP, TIFF, TX(0-mip), HDR, EXR

Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref) [`RPR_ERROR_IO_ERROR`](@ref)

### Parameters
* `context`: The context to create image
* `path`: NULL terminated path to an image file (can be relative) (for UNICODE, supports UTF-8 encoding)
* `out_image`: Pointer to image object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateImageFromFile(context, path)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateImageFromFile, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, Ptr{rpr_image}), context, path, out_image))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_image[]
end

"""
    rprContextCreateImageFromFileMemory(context, extension, data, dataSizeByte)

similar to [`rprContextCreateImageFromFile`](@ref), except that the file input as a memory buffer extension must look like : ".png" , ".bmp" , ".hdr" , ".exr" , ".jpg" ....
"""
function rprContextCreateImageFromFileMemory(context, extension, data, dataSizeByte)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateImageFromFileMemory, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, Ptr{Cvoid}, Csize_t, Ptr{rpr_image}), context, extension, data, dataSizeByte, out_image))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_image[]
end

"""
    rprContextCreateScene(context)

Create a scene

Scene serves as a container for lights and objects.

Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `out_scene`: Pointer to scene object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateScene(context)
    out_scene = Ref{rpr_scene}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateScene, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_scene}), context, out_scene))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_scene[]
end

"""
    rprContextCreateInstance(context, shape)

Create an instance of an object

Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `context`: The context to create an instance for
* `shape`: Parent shape for an instance
* `out_instance`: Pointer to instance object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateInstance(context, shape)
    out_instance = Ref{rpr_shape}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateInstance, libRadeonProRender64), rpr_status, (rpr_context, rpr_shape, Ptr{rpr_shape}), context, shape, out_instance))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_instance[]
end

"""
    rprContextCreateMesh(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces)

Create a mesh

Radeon ProRender supports mixed meshes consisting of triangles and quads.

Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `vertices`: Pointer to position data (each position is described with 3 [`rpr_float`](@ref) numbers)
* `num_vertices`: Number of entries in position array
* `vertex_stride`: Number of bytes between the beginnings of two successive position entries
* `normals`: Pointer to normal data (each normal is described with 3 [`rpr_float`](@ref) numbers), can be NULL
* `num_normals`: Number of entries in normal array
* `normal_stride`: Number of bytes between the beginnings of two successive normal entries
* `texcoord`: Pointer to texcoord data (each texcoord is described with 2 [`rpr_float`](@ref) numbers), can be NULL
* `num_texcoords`: Number of entries in texcoord array
* `texcoord_stride`: Number of bytes between the beginnings of two successive texcoord entries
* `vertex_indices`: Pointer to an array of vertex indices
* `vidx_stride`: Number of bytes between the beginnings of two successive vertex index entries
* `normal_indices`: Pointer to an array of normal indices
* `nidx_stride`: Number of bytes between the beginnings of two successive normal index entries
* `texcoord_indices`: Pointer to an array of texcoord indices
* `tidx_stride`: Number of bytes between the beginnings of two successive texcoord index entries
* `num_face_vertices`: Pointer to an array of num\\_faces numbers describing number of vertices for each face (can be 3(triangle) or 4(quad))
* `num_faces`: Number of faces in the mesh
* `out_mesh`: Pointer to mesh object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateMesh(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateMesh, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, Csize_t, Ptr{rpr_shape}), context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_mesh[]
end

function rprContextCreateMeshEx(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateMeshEx, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_int}, Csize_t, rpr_int, rpr_int, Ptr{Ptr{rpr_float}}, Ptr{Csize_t}, Ptr{rpr_int}, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{Ptr{rpr_int}}, Ptr{rpr_int}, Ptr{rpr_int}, Csize_t, Ptr{rpr_shape}), context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_mesh[]
end

function rprContextCreateMeshEx2(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, mesh_properties)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateMeshEx2, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_float}, Csize_t, rpr_int, Ptr{rpr_int}, Csize_t, rpr_int, rpr_int, Ptr{Ptr{rpr_float}}, Ptr{Csize_t}, Ptr{rpr_int}, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{Ptr{rpr_int}}, Ptr{rpr_int}, Ptr{rpr_int}, Csize_t, Ptr{rpr_mesh_info}, Ptr{rpr_shape}), context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, mesh_properties, out_mesh))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_mesh[]
end

"""
    rprContextCreateCamera(context)

Create a camera

There are several camera types supported by a single [`rpr_camera`](@ref) type. Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)

### Parameters
* `context`: The context to create a camera for
* `out_camera`: Pointer to camera object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateCamera(context)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateCamera, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_camera}), context, out_camera))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_camera[]
end

"""
    rprContextCreateFrameBuffer(context, format, fb_desc)

Create framebuffer object

Framebuffer is used to store final rendering result.

Possible error codes are:

[`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)

### Parameters
* `context`: The context to create framebuffer
* `format`: Framebuffer format
* `fb_desc`: Framebuffer layout description
* `status`: Pointer to framebuffer object
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprContextCreateFrameBuffer(context, format, fb_desc)
    out_fb = Ref{rpr_framebuffer}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateFrameBuffer, libRadeonProRender64), rpr_status, (rpr_context, rpr_framebuffer_format, Ptr{rpr_framebuffer_desc}, Ptr{rpr_framebuffer}), context, format, fb_desc, out_fb))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_fb[]
end

"""
    rprContextGetFunctionPtr(context, function_name)

Loads extension function from context
"""
function rprContextGetFunctionPtr(context, function_name)
    out_function_ptr = Ref{Ptr{Cvoid}}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextGetFunctionPtr, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, Ptr{Ptr{Cvoid}}), context, function_name, out_function_ptr))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_function_ptr[]
end

"""
    rprCameraGetInfo(camera, camera_info, size, data, size_ret)

Query information about a camera

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data. Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `camera`: The camera to query
* `camera_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraGetInfo(camera, camera_info, size, data, size_ret)
    check_error(ccall((:rprCameraGetInfo, libRadeonProRender64), rpr_status, (rpr_camera, rpr_camera_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), camera, camera_info, size, data, size_ret))
end

"""
    rprCameraSetFocalLength(camera, flength)

Set camera focal length.

### Parameters
* `camera`: The camera to set focal length
* `flength`: Focal length in millimeters, default is 35mm
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetFocalLength(camera, flength)
    check_error(ccall((:rprCameraSetFocalLength, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, flength))
end

function rprCameraSetMotionTransformCount(camera, transformCount)
    check_error(ccall((:rprCameraSetMotionTransformCount, libRadeonProRender64), rpr_status, (rpr_camera, rpr_uint), camera, transformCount))
end

function rprCameraSetMotionTransform(camera, transpose, transform, timeIndex)
    check_error(ccall((:rprCameraSetMotionTransform, libRadeonProRender64), rpr_status, (rpr_camera, rpr_bool, Ptr{rpr_float}, rpr_uint), camera, transpose, transform, timeIndex))
end

"""
    rprCameraSetFocusDistance(camera, fdist)

Set camera focus distance

### Parameters
* `camera`: The camera to set focus distance
* `fdist`: Focus distance in meters, default is 1m
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetFocusDistance(camera, fdist)
    check_error(ccall((:rprCameraSetFocusDistance, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, fdist))
end

"""
    rprCameraSetTransform(camera, transpose, transform)

Set world transform for the camera

### Parameters
* `camera`: The camera to set transform for
* `transpose`: Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix
* `transform`: Array of 16 [`rpr_float`](@ref) values (row-major form)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetTransform(camera, transpose, transform)
    check_error(ccall((:rprCameraSetTransform, libRadeonProRender64), rpr_status, (rpr_camera, rpr_bool, Ptr{rpr_float}), camera, transpose, transform))
end

"""
    rprCameraSetSensorSize(camera, width, height)

Set sensor size for the camera

Default sensor size is the one corresponding to full frame 36x24mm sensor

### Parameters
* `camera`: The camera to set transform for
* `width`: Sensor width in millimeters
* `height`: Sensor height in millimeters
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetSensorSize(camera, width, height)
    check_error(ccall((:rprCameraSetSensorSize, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float, rpr_float), camera, width, height))
end

"""
    rprCameraLookAt(camera, posx, posy, posz, atx, aty, atz, upx, upy, upz)

Set camera transform in lookat form

### Parameters
* `camera`: The camera to set transform for
* `posx`: X component of the position
* `posy`: Y component of the position
* `posz`: Z component of the position
* `atx`: X component of the center point
* `aty`: Y component of the center point
* `atz`: Z component of the center point
* `upx`: X component of the up vector
* `upy`: Y component of the up vector
* `upz`: Z component of the up vector
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraLookAt(camera, posx, posy, posz, atx, aty, atz, upx, upy, upz)
    check_error(ccall((:rprCameraLookAt, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float), camera, posx, posy, posz, atx, aty, atz, upx, upy, upz))
end

"""
    rprCameraSetFStop(camera, fstop)

Set f-stop for the camera

### Parameters
* `camera`: The camera to set f-stop for
* `fstop`: f-stop value in mm^-1, default is FLT\\_MAX
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetFStop(camera, fstop)
    check_error(ccall((:rprCameraSetFStop, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, fstop))
end

"""
    rprCameraSetApertureBlades(camera, num_blades)

Set the number of aperture blades

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `camera`: The camera to set aperture blades for
* `num_blades`: Number of aperture blades 4 to 32
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetApertureBlades(camera, num_blades)
    check_error(ccall((:rprCameraSetApertureBlades, libRadeonProRender64), rpr_status, (rpr_camera, rpr_uint), camera, num_blades))
end

"""
    rprCameraSetExposure(camera, exposure)

Set the exposure of a camera

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `camera`: The camera to set aperture blades for
* `exposure`: Represents a time length in the same time scale than [`rprShapeSetMotionTransform`](@ref),[`rprCameraSetMotionTransform`](@ref)...
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetExposure(camera, exposure)
    check_error(ccall((:rprCameraSetExposure, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, exposure))
end

"""
    rprCameraSetMode(camera, mode)

Set camera mode

Camera modes include: [`RPR_CAMERA_MODE_PERSPECTIVE`](@ref) [`RPR_CAMERA_MODE_ORTHOGRAPHIC`](@ref) [`RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360`](@ref) [`RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO`](@ref) [`RPR_CAMERA_MODE_CUBEMAP`](@ref) [`RPR_CAMERA_MODE_CUBEMAP_STEREO`](@ref) [`RPR_CAMERA_MODE_FISHEYE`](@ref)

### Parameters
* `camera`: The camera to set mode for
* `mode`: Camera mode, default is [`RPR_CAMERA_MODE_PERSPECTIVE`](@ref)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetMode(camera, mode)
    check_error(ccall((:rprCameraSetMode, libRadeonProRender64), rpr_status, (rpr_camera, rpr_camera_mode), camera, mode))
end

"""
    rprCameraSetOrthoWidth(camera, width)

Set orthographic view volume width

### Parameters
* `camera`: The camera to set volume width for
* `width`: View volume width in meters, default is 1 meter
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetOrthoWidth(camera, width)
    check_error(ccall((:rprCameraSetOrthoWidth, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, width))
end

function rprCameraSetFocalTilt(camera, tilt)
    check_error(ccall((:rprCameraSetFocalTilt, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, tilt))
end

function rprCameraSetIPD(camera, ipd)
    check_error(ccall((:rprCameraSetIPD, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, ipd))
end

function rprCameraSetLensShift(camera, shiftx, shifty)
    check_error(ccall((:rprCameraSetLensShift, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float, rpr_float), camera, shiftx, shifty))
end

function rprCameraSetTiltCorrection(camera, tiltX, tiltY)
    check_error(ccall((:rprCameraSetTiltCorrection, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float, rpr_float), camera, tiltX, tiltY))
end

"""
    rprCameraSetOrthoHeight(camera, height)

Set orthographic view volume height

### Parameters
* `camera`: The camera to set volume height for
* `width`: View volume height in meters, default is 1 meter
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetOrthoHeight(camera, height)
    check_error(ccall((:rprCameraSetOrthoHeight, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, height))
end

"""
    rprCameraSetNearPlane(camera, near)

Set near plane of a camear

### Parameters
* `camera`: The camera to set near plane for
* `near`: Near plane distance in meters, default is 0.01f
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetNearPlane(camera, near)
    check_error(ccall((:rprCameraSetNearPlane, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, near))
end

"""
    rprCameraSetPostScale(camera, scale)

Set the post scale of camera ( 2D camera zoom )

### Parameters
* `camera`: The camera to set
* `scale`: post scale value.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetPostScale(camera, scale)
    check_error(ccall((:rprCameraSetPostScale, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, scale))
end

"""
    rprCameraSetFarPlane(camera, far)

Set far plane of a camear

### Parameters
* `camera`: The camera to set far plane for
* `far`: Far plane distance in meters, default is 100000000.f
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCameraSetFarPlane(camera, far)
    check_error(ccall((:rprCameraSetFarPlane, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float), camera, far))
end

"""
    rprImageGetInfo(image, image_info, size, data, size_ret)

Query information about an image

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `image`: An image object to query
* `image_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprImageGetInfo(image, image_info, size, data, size_ret)
    check_error(ccall((:rprImageGetInfo, libRadeonProRender64), rpr_status, (rpr_image, rpr_image_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), image, image_info, size, data, size_ret))
end

"""
    rprImageSetWrap(image, type)



this is DEPRECATED in the Northstar plugin. In this plugin, the wrapping is done inside the [`RPR_MATERIAL_NODE_IMAGE_TEXTURE`](@ref) owning the image,  example: [`rprMaterialNodeSetInputUByKey`](@ref)(materialNodeTexture, [`RPR_MATERIAL_INPUT_WRAP_U`](@ref), [`RPR_IMAGE_WRAP_TYPE_REPEAT`](@ref));

### Parameters
* `image`: The image to set wrap for
* `type`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprImageSetWrap(image, type)
    check_error(ccall((:rprImageSetWrap, libRadeonProRender64), rpr_status, (rpr_image, rpr_image_wrap_type), image, type))
end

"""
    rprImageSetInternalCompression(image, compressionEnabled)



( Northstar-only feature ) By default, images are compressed by the Northstar renderer. Setting 'compressionEnabled'=0 will disable the compression for the images. For better performance, it's advised to only disable it for textures that need it.
"""
function rprImageSetInternalCompression(image, compressionEnabled)
    check_error(ccall((:rprImageSetInternalCompression, libRadeonProRender64), rpr_status, (rpr_image, rpr_uint), image, compressionEnabled))
end

"""
    rprImageSetOcioColorspace(image, ocioColorspace)

Set the OCIO Color Space
"""
function rprImageSetOcioColorspace(image, ocioColorspace)
    check_error(ccall((:rprImageSetOcioColorspace, libRadeonProRender64), rpr_status, (rpr_image, Ptr{rpr_char}), image, ocioColorspace))
end

"""
    rprImageSetUDIM(imageUdimRoot, tileIndex, imageTile)

Set a tile to an UDIM image.

### Parameters
* `imageUdimRoot`: must be an UDIM image ( created with no data: [`rprContextCreateImage`](@ref)(context, {0,[`RPR_COMPONENT_TYPE_UINT8`](@ref)}, nullptr, nullptr, ); )
* `tileIndex`: a valid UDIM index: 1001 , 1002, 1003 ... 1011, 1012, 1013 ... etc ...
* `imageTile`: a valid classic [`rpr_image`](@ref)
"""
function rprImageSetUDIM(imageUdimRoot, tileIndex, imageTile)
    check_error(ccall((:rprImageSetUDIM, libRadeonProRender64), rpr_status, (rpr_image, rpr_uint, rpr_image), imageUdimRoot, tileIndex, imageTile))
end

"""
    rprImageSetFilter(image, type)



### Parameters
* `image`: The image to set filter for
* `type`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprImageSetFilter(image, type)
    check_error(ccall((:rprImageSetFilter, libRadeonProRender64), rpr_status, (rpr_image, rpr_image_filter_type), image, type))
end

"""
    rprImageSetGamma(image, type)



### Parameters
* `image`: The image to set gamma for
* `type`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprImageSetGamma(image, type)
    check_error(ccall((:rprImageSetGamma, libRadeonProRender64), rpr_status, (rpr_image, rpr_float), image, type))
end

"""
    rprImageSetMipmapEnabled(image, enabled)



### Parameters
* `image`: The image to set mipmap for
* `enabled`: true (enable) or false (disable)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprImageSetMipmapEnabled(image, enabled)
    check_error(ccall((:rprImageSetMipmapEnabled, libRadeonProRender64), rpr_status, (rpr_image, rpr_bool), image, enabled))
end

"""
    rprShapeSetTransform(shape, transpose, transform)

Set shape world transform

### Parameters
* `shape`: The shape to set transform for
* `transpose`: Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix
* `transform`: Array of 16 [`rpr_float`](@ref) values (row-major form)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetTransform(shape, transpose, transform)
    check_error(ccall((:rprShapeSetTransform, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool, Ptr{rpr_float}), shape, transpose, transform))
end

"""
    rprShapeSetVertexValue(in_shape, setIndex, indices, values, indicesCount)

assign custom float value to some vertices of the mesh

example :  // indicesSet and values must have the same size [`rpr_int`](@ref) indicesSet[] = {4,0,1,2,3}; [`rpr_float`](@ref) values[] = { 0.8 , 0.1 , 0.0 , 1.0 , 1.0 }; [`rprShapeSetVertexValue`](@ref)(meshC, 0 , indicesSet , values , sizeof(indicesSet)/sizeof(indicesSet[0]) );

setIndex can be between 0 and 3 : we can assign up to 4 floats for each vertex.

### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetVertexValue(in_shape, setIndex, indices, values, indicesCount)
    check_error(ccall((:rprShapeSetVertexValue, libRadeonProRender64), rpr_status, (rpr_shape, rpr_int, Ptr{rpr_int}, Ptr{rpr_float}, rpr_int), in_shape, setIndex, indices, values, indicesCount))
end

function rprShapeSetPrimvar(in_shape, key, data, floatCount, componentCount, interop)
    check_error(ccall((:rprShapeSetPrimvar, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint, Ptr{rpr_float}, rpr_uint, rpr_uint, rpr_primvar_interpolation_type), in_shape, key, data, floatCount, componentCount, interop))
end

"""
    rprShapeSetSubdivisionFactor(shape, factor)

Set shape subdivision

### Parameters
* `shape`: The shape to set subdivision for
* `factor`:	Number of subdivision steps to do
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetSubdivisionFactor(shape, factor)
    check_error(ccall((:rprShapeSetSubdivisionFactor, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, factor))
end

"""
    rprShapeSetSubdivisionAutoRatioCap(shape, autoRatioCap)

Enable or Disable the auto ratio cap for subdivision

autoRatioCap is a value from 0.0 to 1.0. autoRatioCap=1.0 means very large polygons, less tessellation. as it goes to 0.0, it does more tessellation. This value is ratio of the largest edge in the screen. Example: If you want to make an edge 10 pixels on 1080p, you need to set 10/1080.

### Parameters
* `shape`: The shape to set
* `autoRatioCap`: 0.0 to 1.0
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetSubdivisionAutoRatioCap(shape, autoRatioCap)
    check_error(ccall((:rprShapeSetSubdivisionAutoRatioCap, libRadeonProRender64), rpr_status, (rpr_shape, rpr_float), shape, autoRatioCap))
end

"""
    rprShapeSetSubdivisionCreaseWeight(shape, factor)



### Parameters
* `shape`: The shape to set subdivision for
* `factor`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetSubdivisionCreaseWeight(shape, factor)
    check_error(ccall((:rprShapeSetSubdivisionCreaseWeight, libRadeonProRender64), rpr_status, (rpr_shape, rpr_float), shape, factor))
end

"""
    rprShapeAttachRenderLayer(shape, renderLayerString)



### Parameters
* `shape`: The shape to set
* `renderLayerString`: Render layer name to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeAttachRenderLayer(shape, renderLayerString)
    check_error(ccall((:rprShapeAttachRenderLayer, libRadeonProRender64), rpr_status, (rpr_shape, Ptr{rpr_char}), shape, renderLayerString))
end

"""
    rprShapeDetachRenderLayer(shape, renderLayerString)



### Parameters
* `shape`: The shape to set
* `renderLayerString`: Render layer name to detach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeDetachRenderLayer(shape, renderLayerString)
    check_error(ccall((:rprShapeDetachRenderLayer, libRadeonProRender64), rpr_status, (rpr_shape, Ptr{rpr_char}), shape, renderLayerString))
end

"""
    rprLightAttachRenderLayer(light, renderLayerString)



### Parameters
* `light`: The light to set
* `renderLayerString`: Render layer name to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightAttachRenderLayer(light, renderLayerString)
    check_error(ccall((:rprLightAttachRenderLayer, libRadeonProRender64), rpr_status, (rpr_light, Ptr{rpr_char}), light, renderLayerString))
end

"""
    rprLightDetachRenderLayer(light, renderLayerString)



### Parameters
* `light`: The light to set
* `renderLayerString`: Render layer name to detach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightDetachRenderLayer(light, renderLayerString)
    check_error(ccall((:rprLightDetachRenderLayer, libRadeonProRender64), rpr_status, (rpr_light, Ptr{rpr_char}), light, renderLayerString))
end

"""
    rprShapeSetSubdivisionBoundaryInterop(shape, type)



### Parameters
* `shape`: The shape to set subdivision for
* `type`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetSubdivisionBoundaryInterop(shape, type)
    check_error(ccall((:rprShapeSetSubdivisionBoundaryInterop, libRadeonProRender64), rpr_status, (rpr_shape, rpr_subdiv_boundary_interfop_type), shape, type))
end

"""
    rprShapeAutoAdaptSubdivisionFactor(shape, framebuffer, camera, factor)

Call this function to automatically set the Subdivision Factor depending on the camera position, frame buffer size. You can retrieve the internally computed factor with [`rprShapeGetInfo`](@ref)(...,[`RPR_SHAPE_SUBDIVISION_FACTOR`](@ref),...) You have to call this function each time you want to re-adapt the Subdivision Factor : internally the factor will NOT be automatically re-computed when camera/shape/framebuffer changes.

### Parameters
* `shape`: The shape to set subdivision for
* `framebuffer`: frame buffer used for factor adaptation
* `camera`: camera used for factor adaptation
* `factor`: factor to regulate the intensity of adaptation
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeAutoAdaptSubdivisionFactor(shape, framebuffer, camera, factor)
    check_error(ccall((:rprShapeAutoAdaptSubdivisionFactor, libRadeonProRender64), rpr_status, (rpr_shape, rpr_framebuffer, rpr_camera, rpr_int), shape, framebuffer, camera, factor))
end

"""
    rprShapeSetDisplacementScale(shape, minscale, maxscale)

Set displacement scale

### Parameters
* `shape`: The shape to set subdivision for
* `scale`:	The amount of displacement applied
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetDisplacementScale(shape, minscale, maxscale)
    check_error(ccall((:rprShapeSetDisplacementScale, libRadeonProRender64), rpr_status, (rpr_shape, rpr_float, rpr_float), shape, minscale, maxscale))
end

"""
    rprShapeSetObjectGroupID(shape, objectGroupID)

Set object group ID (mainly for debugging).

### Parameters
* `shape`: The shape to set
* `objectGroupID`: The ID
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetObjectGroupID(shape, objectGroupID)
    check_error(ccall((:rprShapeSetObjectGroupID, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, objectGroupID))
end

"""
    rprShapeSetObjectID(shape, objectID)

Set object ID (mainly for debugging).

### Parameters
* `shape`: The shape to set
* `objectID`: The ID
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetObjectID(shape, objectID)
    check_error(ccall((:rprShapeSetObjectID, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, objectID))
end

"""
    rprShapeSetLightGroupID(shape, lightGroupID)

Set light group ID when shape has an emissive material (mainly for debugging).

### Parameters
* `shape`: The shape to set
* `lightGroupID`: The ID
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetLightGroupID(shape, lightGroupID)
    check_error(ccall((:rprShapeSetLightGroupID, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, lightGroupID))
end

"""
    rprShapeSetLayerMask(shape, layerMask)

Set object rendering layer mask then, use rprContextSetParameter1u(context,"renderLayerMask",mask) in order to render only a group of shape

WARNING: this function is deprecated and will be removed in the future,  use [`rprShapeAttachRenderLayer`](@ref)/[`rprShapeDetachRenderLayer`](@ref) and [`rprContextAttachRenderLayer`](@ref)/[`rprContextDetachRenderLayer`](@ref) instead

### Parameters
* `shape`: The shape to set
* `layerMask`: The render mask
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetLayerMask(shape, layerMask)
    check_error(ccall((:rprShapeSetLayerMask, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, layerMask))
end

"""
    rprShapeSetDisplacementMaterial(shape, materialNode)

Set displacement texture

### Parameters
* `shape`: The shape to set subdivision for
* `materialNode`: Displacement texture , as material.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetDisplacementMaterial(shape, materialNode)
    check_error(ccall((:rprShapeSetDisplacementMaterial, libRadeonProRender64), rpr_status, (rpr_shape, rpr_material_node), shape, materialNode))
end

"""
    rprShapeSetMaterial(shape, node)

Set shape material
"""
function rprShapeSetMaterial(shape, node)
    check_error(ccall((:rprShapeSetMaterial, libRadeonProRender64), rpr_status, (rpr_shape, rpr_material_node), shape, node))
end

"""
    rprShapeSetMaterialFaces(shape, node, face_indices, num_faces)

Set shape materials for specific faces

### Parameters
* `shape`:	The shape to set the material for
* `node`: The material to set
* `face_indices`:
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetMaterialFaces(shape, node, face_indices, num_faces)
    check_error(ccall((:rprShapeSetMaterialFaces, libRadeonProRender64), rpr_status, (rpr_shape, rpr_material_node, Ptr{rpr_int}, Csize_t), shape, node, face_indices, num_faces))
end

"""
    rprShapeSetVolumeMaterial(shape, node)

Set shape volume material
"""
function rprShapeSetVolumeMaterial(shape, node)
    check_error(ccall((:rprShapeSetVolumeMaterial, libRadeonProRender64), rpr_status, (rpr_shape, rpr_material_node), shape, node))
end

function rprShapeSetMotionTransformCount(shape, transformCount)
    check_error(ccall((:rprShapeSetMotionTransformCount, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint), shape, transformCount))
end

function rprShapeSetMotionTransform(shape, transpose, transform, timeIndex)
    check_error(ccall((:rprShapeSetMotionTransform, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool, Ptr{rpr_float}, rpr_uint), shape, transpose, transform, timeIndex))
end

"""
    rprShapeSetVisibilityFlag(shape, visibilityFlag, visible)

Set visibility flag

### Parameters
* `shape`: The shape to set visibility for
* `visibilityFlag`: . one of the visibility flags : [`RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG`](@ref) [`RPR_SHAPE_VISIBILITY_SHADOW`](@ref) [`RPR_SHAPE_VISIBILITY_REFLECTION`](@ref) [`RPR_SHAPE_VISIBILITY_REFRACTION`](@ref) [`RPR_SHAPE_VISIBILITY_TRANSPARENT`](@ref) [`RPR_SHAPE_VISIBILITY_DIFFUSE`](@ref) [`RPR_SHAPE_VISIBILITY_GLOSSY_REFLECTION`](@ref) [`RPR_SHAPE_VISIBILITY_GLOSSY_REFRACTION`](@ref) [`RPR_SHAPE_VISIBILITY_LIGHT`](@ref) [`RPR_SHAPE_VISIBILITY_RECEIVE_SHADOW`](@ref)
* `visible`: set the flag to TRUE or FALSE
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetVisibilityFlag(shape, visibilityFlag, visible)
    check_error(ccall((:rprShapeSetVisibilityFlag, libRadeonProRender64), rpr_status, (rpr_shape, rpr_shape_info, rpr_bool), shape, visibilityFlag, visible))
end

"""
    rprCurveSetVisibilityFlag(curve, visibilityFlag, visible)

Set visibility flag

### Parameters
* `curve`: The curve to set visibility for
* `visibilityFlag`: . one of the visibility flags : [`RPR_CURVE_VISIBILITY_PRIMARY_ONLY_FLAG`](@ref) [`RPR_CURVE_VISIBILITY_SHADOW`](@ref) [`RPR_CURVE_VISIBILITY_REFLECTION`](@ref) [`RPR_CURVE_VISIBILITY_REFRACTION`](@ref) [`RPR_CURVE_VISIBILITY_TRANSPARENT`](@ref) [`RPR_CURVE_VISIBILITY_DIFFUSE`](@ref) [`RPR_CURVE_VISIBILITY_GLOSSY_REFLECTION`](@ref) [`RPR_CURVE_VISIBILITY_GLOSSY_REFRACTION`](@ref) [`RPR_CURVE_VISIBILITY_LIGHT`](@ref) [`RPR_CURVE_VISIBILITY_RECEIVE_SHADOW`](@ref)
* `visible`: set the flag to TRUE or FALSE
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCurveSetVisibilityFlag(curve, visibilityFlag, visible)
    check_error(ccall((:rprCurveSetVisibilityFlag, libRadeonProRender64), rpr_status, (rpr_curve, rpr_curve_parameter, rpr_bool), curve, visibilityFlag, visible))
end

"""
    rprShapeSetVisibility(shape, visible)

Set visibility flag

This function sets all RPR\\_SHAPE\\_VISIBILITY\\_* flags to the 'visible' argument value Calling [`rprShapeSetVisibilityFlag`](@ref)(xxx,visible); on each flags would lead to the same result.

### Parameters
* `shape`: The shape to set visibility for
* `visible`: Determines if the shape is visible or not
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetVisibility(shape, visible)
    check_error(ccall((:rprShapeSetVisibility, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, visible))
end

"""
    rprLightSetVisibilityFlag(light, visibilityFlag, visible)

Set visibility flag for Light

### Parameters
* `light`: The light to set visibility for
* `visibilityFlag`: one of the visibility flags : - [`RPR_LIGHT_VISIBILITY_LIGHT`](@ref)
* `visible`: set the flag to TRUE or FALSE
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightSetVisibilityFlag(light, visibilityFlag, visible)
    check_error(ccall((:rprLightSetVisibilityFlag, libRadeonProRender64), rpr_status, (rpr_light, rpr_light_info, rpr_bool), light, visibilityFlag, visible))
end

"""
    rprCurveSetVisibility(curve, visible)

Set visibility flag

This function sets all RPR\\_CURVE\\_VISIBILITY\\_* flags to the 'visible' argument value Calling [`rprCurveSetVisibilityFlag`](@ref)(xxx,visible); on each flags would lead to the same result.

### Parameters
* `curve`: The curve to set visibility for
* `visible`: Determines if the curve is visible or not
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCurveSetVisibility(curve, visible)
    check_error(ccall((:rprCurveSetVisibility, libRadeonProRender64), rpr_status, (rpr_curve, rpr_bool), curve, visible))
end

"""
    rprShapeSetVisibilityInSpecular(shape, visible)

Set visibility flag for specular refleacted rays

This function sets both [`RPR_SHAPE_VISIBILITY_REFLECTION`](@ref) and [`RPR_SHAPE_VISIBILITY_REFRACTION`](@ref) flags to the 'visible' argument value Calling [`rprShapeSetVisibilityFlag`](@ref)(xxx,visible); on those 2 flags would lead to the same result.

### Parameters
* `shape`: The shape to set visibility for
* `visible`: Determines if the shape is visible or not
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetVisibilityInSpecular(shape, visible)
    check_error(ccall((:rprShapeSetVisibilityInSpecular, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, visible))
end

"""
    rprShapeSetShadowCatcher(shape, shadowCatcher)

Set shadow catcher flag

### Parameters
* `shape`: The shape to set shadow catcher flag for
* `shadowCatcher`: Determines if the shape behaves as shadow catcher
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetShadowCatcher(shape, shadowCatcher)
    check_error(ccall((:rprShapeSetShadowCatcher, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, shadowCatcher))
end

"""
    rprShapeSetShadowColor(shape, r, g, b)

Set shadow color

### Parameters
* `shape`: The shape to set shadow color for
* `r`: Red component of the color
* `g`: Green component of the color
* `b`: Blue component of the color
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetShadowColor(shape, r, g, b)
    check_error(ccall((:rprShapeSetShadowColor, libRadeonProRender64), rpr_status, (rpr_shape, rpr_float, rpr_float, rpr_float), shape, r, g, b))
end

"""
    rprShapeSetReflectionCatcher(shape, reflectionCatcher)

Set Reflection catcher flag

### Parameters
* `shape`: The shape to set Reflection catcher flag for
* `reflectionCatcher`: Determines if the shape behaves as Reflection catcher
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetReflectionCatcher(shape, reflectionCatcher)
    check_error(ccall((:rprShapeSetReflectionCatcher, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, reflectionCatcher))
end

"""
    rprShapeSetContourIgnore(shape, ignoreInContour)

Set 1 if ignore shape in the Contour rendering flag. ( This flag is used only if Contour is enabled )

### Parameters
* `shape`: The shape to set
* `ignoreInContour`: 0 or 1.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetContourIgnore(shape, ignoreInContour)
    check_error(ccall((:rprShapeSetContourIgnore, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, ignoreInContour))
end

"""
    rprShapeSetEnvironmentLight(shape, envLight)

Set 1 if the shape should be treated as an environment light (finite sphere environment light).

### Parameters
* `shape`: The shape to set
* `envLight`: 0 or 1.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeSetEnvironmentLight(shape, envLight)
    check_error(ccall((:rprShapeSetEnvironmentLight, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), shape, envLight))
end

"""
    rprShapeMarkStatic(in_shape, in_is_static)

Sets static flag on shape.

Setting such flag will result in marking object as static. Such objects can be processed more efficiently but with some restrictions:

* Static object can't change its properties.

* Static object can't change its transformation.

!!! note

    Static flag can be set only before first call to [`rprContextRender`](@ref). By default all objects created as dynamic.

### Parameters
* `in_shape`: shape to set flag on
* `in_is_static`: is object static or not
"""
function rprShapeMarkStatic(in_shape, in_is_static)
    check_error(ccall((:rprShapeMarkStatic, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool), in_shape, in_is_static))
end

"""
    rprLightSetTransform(light, transpose, transform)

Set light world transform

### Parameters
* `light`: The light to set transform for
* `transpose`: Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix
* `transform`: Array of 16 [`rpr_float`](@ref) values (row-major form)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightSetTransform(light, transpose, transform)
    check_error(ccall((:rprLightSetTransform, libRadeonProRender64), rpr_status, (rpr_light, rpr_bool, Ptr{rpr_float}), light, transpose, transform))
end

"""
    rprLightSetGroupId(light, groupId)

Set light group ID. This parameter can be used with [`RPR_AOV_LIGHT_GROUP0`](@ref), [`RPR_AOV_LIGHT_GROUP1`](@ref), ...

### Parameters
* `light`: The light to set transform for
* `groupId`: -1 to remove the group. or a value between 0 and 3.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightSetGroupId(light, groupId)
    check_error(ccall((:rprLightSetGroupId, libRadeonProRender64), rpr_status, (rpr_light, rpr_uint), light, groupId))
end

"""
    rprShapeGetInfo(arg0, arg1, arg2, arg3, arg4)

Query information about a shape

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `shape`: The shape object to query
* `material_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprShapeGetInfo(arg0, arg1, arg2, arg3, arg4)
    check_error(ccall((:rprShapeGetInfo, libRadeonProRender64), rpr_status, (rpr_shape, rpr_shape_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), arg0, arg1, arg2, arg3, arg4))
end

"""
    rprMeshGetInfo(mesh, mesh_info, size, data, size_ret)

Query information about a mesh

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `shape`: The mesh to query
* `mesh_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprMeshGetInfo(mesh, mesh_info, size, data, size_ret)
    check_error(ccall((:rprMeshGetInfo, libRadeonProRender64), rpr_status, (rpr_shape, rpr_mesh_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), mesh, mesh_info, size, data, size_ret))
end

"""
    rprCurveGetInfo(curve, curve_info, size, data, size_ret)

Query information about a Curve

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `shape`: The Curve to query
* `rpr_curve_parameter`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprCurveGetInfo(curve, curve_info, size, data, size_ret)
    check_error(ccall((:rprCurveGetInfo, libRadeonProRender64), rpr_status, (rpr_curve, rpr_curve_parameter, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), curve, curve_info, size, data, size_ret))
end

"""
    rprHeteroVolumeGetInfo(heteroVol, heteroVol_info, size, data, size_ret)

Query information about a hetero volume

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `heteroVol`: The heteroVolume to query
* `heteroVol_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprHeteroVolumeGetInfo(heteroVol, heteroVol_info, size, data, size_ret)
    check_error(ccall((:rprHeteroVolumeGetInfo, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_hetero_volume_parameter, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), heteroVol, heteroVol_info, size, data, size_ret))
end

function rprGridGetInfo(grid, grid_info, size, data, size_ret)
    check_error(ccall((:rprGridGetInfo, libRadeonProRender64), rpr_status, (rpr_grid, rpr_grid_parameter, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), grid, grid_info, size, data, size_ret))
end

"""
    rprBufferGetInfo(buffer, buffer_info, size, data, size_ret)

Query information about a Buffer

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `buffer`: The heteroVolume to query
* `buffer_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprBufferGetInfo(buffer, buffer_info, size, data, size_ret)
    check_error(ccall((:rprBufferGetInfo, libRadeonProRender64), rpr_status, (rpr_buffer, rpr_buffer_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), buffer, buffer_info, size, data, size_ret))
end

"""
    rprInstanceGetBaseShape(shape)

Get the parent shape for an instance

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `shape`: The shape to get a parent shape from
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Shape object
"""
function rprInstanceGetBaseShape(shape)
    out_shape = Ref{rpr_shape}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprInstanceGetBaseShape, libRadeonProRender64), rpr_status, (rpr_shape, Ptr{rpr_shape}), shape, out_shape))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_shape[]
end

"""
    rprContextCreatePointLight(context)

Create point light

Create analytic point light represented by a point in space. Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreatePointLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreatePointLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_light[]
end

"""
    rprPointLightSetRadiantPower3f(light, r, g, b)

Set radiant power of a point light source

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprPointLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprPointLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprContextCreateSpotLight(context, light)

Create spot light

Create analytic spot light

Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreateSpotLight(context, light)
    check_error(ccall((:rprContextCreateSpotLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, light))
end

function rprContextCreateSphereLight(context, light)
    check_error(ccall((:rprContextCreateSphereLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, light))
end

function rprContextCreateDiskLight(context, light)
    check_error(ccall((:rprContextCreateDiskLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, light))
end

"""
    rprSpotLightSetRadiantPower3f(light, r, g, b)

Set radiant power of a spot light source

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSpotLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprSpotLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprSpotLightSetImage(light, img)

turn this spot-light into a textured light.

'img' can be NULL to disable textured.
"""
function rprSpotLightSetImage(light, img)
    check_error(ccall((:rprSpotLightSetImage, libRadeonProRender64), rpr_status, (rpr_light, rpr_image), light, img))
end

"""
    rprSphereLightSetRadiantPower3f(light, r, g, b)

Set Power for Sphere Light

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSphereLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprSphereLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprSphereLightSetRadius(light, radius)

Set Radius for Sphere Light

### Parameters
* `radius`: Radius to set
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSphereLightSetRadius(light, radius)
    check_error(ccall((:rprSphereLightSetRadius, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), light, radius))
end

"""
    rprDiskLightSetRadiantPower3f(light, r, g, b)

Set Power for Disk Light

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDiskLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprDiskLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprDiskLightSetRadius(light, radius)

Set Radius for Disk Light

### Parameters
* `radius`: Radius to set
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDiskLightSetRadius(light, radius)
    check_error(ccall((:rprDiskLightSetRadius, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), light, radius))
end

"""
    rprDiskLightSetAngle(light, angle)

Set Outer Angle for Disk Light

### Parameters
* `angle`: Outer angle in radians
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDiskLightSetAngle(light, angle)
    check_error(ccall((:rprDiskLightSetAngle, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), light, angle))
end

"""
    rprDiskLightSetInnerAngle(light, innerAngle)

Set Inner Angle for Disk Light

### Parameters
* `innerAngle`: Inner angle in radians
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDiskLightSetInnerAngle(light, innerAngle)
    check_error(ccall((:rprDiskLightSetInnerAngle, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), light, innerAngle))
end

"""
    rprSpotLightSetConeShape(light, iangle, oangle)

Set cone shape for a spot light

Spot light produces smooth penumbra in a region between inner and outer circles, the area inside the inner cicrle receives full power while the area outside the outer one is fully in shadow.

### Parameters
* `iangle`: Inner angle of a cone in radians
* `oangle`: Outer angle of a coner in radians, should be greater that or equal to inner angle
### Returns
status [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSpotLightSetConeShape(light, iangle, oangle)
    check_error(ccall((:rprSpotLightSetConeShape, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float), light, iangle, oangle))
end

"""
    rprContextCreateDirectionalLight(context)

Create directional light

Create analytic directional light. Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
light id of a newly created light
"""
function rprContextCreateDirectionalLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateDirectionalLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_light[]
end

"""
    rprDirectionalLightSetRadiantPower3f(light, r, g, b)

Set radiant power of a directional light source

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDirectionalLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprDirectionalLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprDirectionalLightSetShadowSoftnessAngle(light, softnessAngle)

Set softness of shadow produced by the light

### Parameters
* `softnessAngle`: (in Radian) value should be between [ 0 ; pi/4 ]. 0.0 means sharp shadow
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprDirectionalLightSetShadowSoftnessAngle(light, softnessAngle)
    check_error(ccall((:rprDirectionalLightSetShadowSoftnessAngle, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), light, softnessAngle))
end

"""
    rprContextCreateEnvironmentLight(context)

Create an environment light

Environment light is a light based on lightprobe. Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreateEnvironmentLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateEnvironmentLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_light[]
end

"""
    rprEnvironmentLightSetImage(env_light, image)

Set image for an environment light

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref)

### Parameters
* `env_light`: Environment light
* `image`: Image object to set
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprEnvironmentLightSetImage(env_light, image)
    check_error(ccall((:rprEnvironmentLightSetImage, libRadeonProRender64), rpr_status, (rpr_light, rpr_image), env_light, image))
end

"""
    rprEnvironmentLightSetIntensityScale(env_light, intensity_scale)

Set intensity scale or an env light

### Parameters
* `env_light`: Environment light
* `intensity_scale`: Intensity scale
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprEnvironmentLightSetIntensityScale(env_light, intensity_scale)
    check_error(ccall((:rprEnvironmentLightSetIntensityScale, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), env_light, intensity_scale))
end

"""
    rprEnvironmentLightAttachPortal(scene, env_light, portal)

Set portal for environment light to accelerate convergence of indoor scenes

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `env_light`: Environment light
* `portal`: Portal mesh, might have multiple components
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprEnvironmentLightAttachPortal(scene, env_light, portal)
    check_error(ccall((:rprEnvironmentLightAttachPortal, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light, rpr_shape), scene, env_light, portal))
end

"""
    rprEnvironmentLightDetachPortal(scene, env_light, portal)

Remove portal for environment light.

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `env_light`: Environment light
* `portal`: Portal mesh, that have been added to light.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprEnvironmentLightDetachPortal(scene, env_light, portal)
    check_error(ccall((:rprEnvironmentLightDetachPortal, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light, rpr_shape), scene, env_light, portal))
end

"""
    rprEnvironmentLightSetEnvironmentLightOverride(in_ibl, overrideType, in_iblOverride)

Sets/Gets environment override on IBL

This function sets overrides for different parts of IBL. overrideType argument can take following values:

* [`RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION`](@ref)

* [`RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION`](@ref)

* [`RPR_ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY`](@ref)

* [`RPR_ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND`](@ref)

* [`RPR_ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE`](@ref)

### Parameters
* `in_ibl`: image based light created with [`rprContextCreateEnvironmentLight`](@ref)
* `overrideType`: override parameter
* `in_iblOverride`: image based light created with [`rprContextCreateEnvironmentLight`](@ref)
"""
function rprEnvironmentLightSetEnvironmentLightOverride(in_ibl, overrideType, in_iblOverride)
    check_error(ccall((:rprEnvironmentLightSetEnvironmentLightOverride, libRadeonProRender64), rpr_status, (rpr_light, rpr_environment_override, rpr_light), in_ibl, overrideType, in_iblOverride))
end

function rprEnvironmentLightGetEnvironmentLightOverride(in_ibl, overrideType)
    out_iblOverride = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprEnvironmentLightGetEnvironmentLightOverride, libRadeonProRender64), rpr_status, (rpr_light, rpr_environment_override, Ptr{rpr_light}), in_ibl, overrideType, out_iblOverride))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_iblOverride[]
end

"""
    rprContextCreateSkyLight(context)

Create sky light

Analytical sky model Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreateSkyLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateSkyLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_light[]
end

"""
    rprSkyLightSetTurbidity(skylight, turbidity)

Set turbidity of a sky light

### Parameters
* `skylight`: Sky light
* `turbidity`: Turbidity value
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightSetTurbidity(skylight, turbidity)
    check_error(ccall((:rprSkyLightSetTurbidity, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), skylight, turbidity))
end

"""
    rprSkyLightSetAlbedo(skylight, albedo)

Set albedo of a sky light

### Parameters
* `skylight`: Sky light
* `albedo`: Albedo value
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightSetAlbedo(skylight, albedo)
    check_error(ccall((:rprSkyLightSetAlbedo, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), skylight, albedo))
end

"""
    rprSkyLightSetScale(skylight, scale)

Set scale of a sky light

### Parameters
* `skylight`: Sky light
* `scale`: Scale value
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightSetScale(skylight, scale)
    check_error(ccall((:rprSkyLightSetScale, libRadeonProRender64), rpr_status, (rpr_light, rpr_float), skylight, scale))
end

"""
    rprSkyLightSetDirection(skylight, x, y, z)

Set the direction of the sky light

### Parameters
* `skylight`: Sky light
* `x`: direction x
* `y`: direction y
* `z`: direction z
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightSetDirection(skylight, x, y, z)
    check_error(ccall((:rprSkyLightSetDirection, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), skylight, x, y, z))
end

"""
    rprSkyLightAttachPortal(scene, skylight, portal)

Set portal for sky light to accelerate convergence of indoor scenes

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `skylight`: Sky light
* `portal`: Portal mesh, might have multiple components
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightAttachPortal(scene, skylight, portal)
    check_error(ccall((:rprSkyLightAttachPortal, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light, rpr_shape), scene, skylight, portal))
end

"""
    rprSkyLightDetachPortal(scene, skylight, portal)

Remove portal for Sky light.

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `env_light`: Sky light
* `portal`: Portal mesh, that have been added to light.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSkyLightDetachPortal(scene, skylight, portal)
    check_error(ccall((:rprSkyLightDetachPortal, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light, rpr_shape), scene, skylight, portal))
end

"""
    rprContextCreateIESLight(context, light)

Create IES light

Create IES light

Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreateIESLight(context, light)
    check_error(ccall((:rprContextCreateIESLight, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_light}), context, light))
end

"""
    rprIESLightSetRadiantPower3f(light, r, g, b)

Set radiant power of a IES light source

### Parameters
* `r`: R component of a radiant power vector
* `g`: G component of a radiant power vector
* `b`: B component of a radiant power vector
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprIESLightSetRadiantPower3f(light, r, g, b)
    check_error(ccall((:rprIESLightSetRadiantPower3f, libRadeonProRender64), rpr_status, (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

"""
    rprIESLightSetImageFromFile(env_light, imagePath, nx, ny)

Set image for an IES light

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref) : If the format of the IES file is not supported by Radeon ProRender. [`RPR_ERROR_IO_ERROR`](@ref) : If the IES image path file doesn't exist.

### Parameters
* `env_light`: Environment light
* `imagePath`: Image path to set (for UNICODE, supports UTF-8 encoding)
* `nx`:	resolution X of the IES image
* `ny`: resolution Y of the IES image
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprIESLightSetImageFromFile(env_light, imagePath, nx, ny)
    check_error(ccall((:rprIESLightSetImageFromFile, libRadeonProRender64), rpr_status, (rpr_light, Ptr{rpr_char}, rpr_int, rpr_int), env_light, imagePath, nx, ny))
end

"""
    rprIESLightSetImageFromIESdata(env_light, iesData, nx, ny)

Set image for an IES light

Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref) [`RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT`](@ref) : If the format of the IES data is not supported by Radeon ProRender.

### Parameters
* `env_light`: Environment light
* `iesData`: Image data string defining the IES. null terminated string. IES format.
* `nx`:	resolution X of the IES image
* `ny`: resolution Y of the IES image
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprIESLightSetImageFromIESdata(env_light, iesData, nx, ny)
    check_error(ccall((:rprIESLightSetImageFromIESdata, libRadeonProRender64), rpr_status, (rpr_light, Ptr{rpr_char}, rpr_int, rpr_int), env_light, iesData, nx, ny))
end

"""
    rprLightGetInfo(light, info, size, data, size_ret)

Query information about a light

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `light`: The light to query
* `light_info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprLightGetInfo(light, info, size, data, size_ret)
    check_error(ccall((:rprLightGetInfo, libRadeonProRender64), rpr_status, (rpr_light, rpr_light_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), light, info, size, data, size_ret))
end

"""
    rprSceneClear(scene)

Remove all objects from a scene Also detaches the camera

A scene is essentially a collection of shapes, lights and volume regions.

### Parameters
* `scene`: The scene to clear
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneClear(scene)
    check_error(ccall((:rprSceneClear, libRadeonProRender64), rpr_status, (rpr_scene,), scene))
end

"""
    rprSceneAttachShape(scene, shape)

Attach a shape to the scene

A scene is essentially a collection of shapes, lights and volume regions.

### Parameters
* `scene`: The scene to attach
* `shape`: The shape to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneAttachShape(scene, shape)
    check_error(ccall((:rprSceneAttachShape, libRadeonProRender64), rpr_status, (rpr_scene, rpr_shape), scene, shape))
end

"""
    rprSceneDetachShape(scene, shape)

Detach a shape from the scene

A scene is essentially a collection of shapes, lights and volume regions.

### Parameters
* `scene`: The scene to dettach from
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneDetachShape(scene, shape)
    check_error(ccall((:rprSceneDetachShape, libRadeonProRender64), rpr_status, (rpr_scene, rpr_shape), scene, shape))
end

"""
    rprSceneAttachHeteroVolume(scene, heteroVolume)

Attach a heteroVolume to the scene

A scene is essentially a collection of shapes, lights and volume regions.

### Parameters
* `scene`: The scene to attach
* `heteroVolume`: The heteroVolume to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneAttachHeteroVolume(scene, heteroVolume)
    check_error(ccall((:rprSceneAttachHeteroVolume, libRadeonProRender64), rpr_status, (rpr_scene, rpr_hetero_volume), scene, heteroVolume))
end

"""
    rprSceneDetachHeteroVolume(scene, heteroVolume)

Detach a heteroVolume from the scene

A scene is essentially a collection of shapes, lights and volume regions.

### Parameters
* `scene`: The scene to dettach from
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneDetachHeteroVolume(scene, heteroVolume)
    check_error(ccall((:rprSceneDetachHeteroVolume, libRadeonProRender64), rpr_status, (rpr_scene, rpr_hetero_volume), scene, heteroVolume))
end

function rprSceneAttachCurve(scene, curve)
    check_error(ccall((:rprSceneAttachCurve, libRadeonProRender64), rpr_status, (rpr_scene, rpr_curve), scene, curve))
end

function rprSceneDetachCurve(scene, curve)
    check_error(ccall((:rprSceneDetachCurve, libRadeonProRender64), rpr_status, (rpr_scene, rpr_curve), scene, curve))
end

function rprCurveSetMaterial(curve, material)
    check_error(ccall((:rprCurveSetMaterial, libRadeonProRender64), rpr_status, (rpr_curve, rpr_material_node), curve, material))
end

function rprCurveSetTransform(curve, transpose, transform)
    check_error(ccall((:rprCurveSetTransform, libRadeonProRender64), rpr_status, (rpr_curve, rpr_bool, Ptr{rpr_float}), curve, transpose, transform))
end

"""
    rprContextCreateCurve(context, out_curve, num_controlPoints, controlPointsData, controlPointsStride, num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve, creationFlag_tapered)

Create a set of curves

A [`rpr_curve`](@ref) is a set of curves A curve is a set of segments A segment is always composed of 4 3D points

### Parameters
* `controlPointsData`: array of [`rpr_float`](@ref)[num\\_controlPoints*3]
* `controlPointsStride`: in most of cases, for contiguous controlPointsData, should be set to 3*sizeof(float)
* `num_indices`: should be set at : 4*(number of segments)
* `indicesData`: array of [`rpr_uint`](@ref)[num\\_indices] . those are indices to the controlPointsData array.
* `radius`: array of N float.  if curve is not tapered, N = curveCount. if curve is tapered, N = 2*(number of segments)
* `textureUV`: array of float2[curveCount].
* `segmentPerCurve`: array of [`rpr_int`](@ref)[curveCount].  (number of segments) = sum of each element of this array.
* `creationFlag_tapered`: Set it to 0 by default. Set to 1 if using tapered radius. May be used for other bit field options in the future (so, don't set it to a value > 1 for now.)
"""
function rprContextCreateCurve(context, out_curve, num_controlPoints, controlPointsData, controlPointsStride, num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve, creationFlag_tapered)
    check_error(ccall((:rprContextCreateCurve, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_curve}, Csize_t, Ptr{rpr_float}, rpr_int, Csize_t, rpr_uint, Ptr{rpr_uint}, Ptr{rpr_float}, Ptr{rpr_float}, Ptr{rpr_int}, rpr_uint), context, out_curve, num_controlPoints, controlPointsData, controlPointsStride, num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve, creationFlag_tapered))
end

"""
    rprSceneAttachLight(scene, light)

Attach a light to the scene

A scene is essentially a collection of shapes, lights and volume regions

### Parameters
* `scene`: The scene to attach
* `light`: The light to attach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneAttachLight(scene, light)
    check_error(ccall((:rprSceneAttachLight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light), scene, light))
end

"""
    rprSceneDetachLight(scene, light)

Detach a light from the scene

A scene is essentially a collection of shapes, lights and volume regions

### Parameters
* `scene`: The scene to dettach from
* `light`: The light to detach
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneDetachLight(scene, light)
    check_error(ccall((:rprSceneDetachLight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light), scene, light))
end

"""
    rprSceneSetEnvironmentLight(in_scene, in_light)

Sets/gets environment override as active in scene

### Parameters
* `in_scene`: scene
* `in_light`: ibl
"""
function rprSceneSetEnvironmentLight(in_scene, in_light)
    check_error(ccall((:rprSceneSetEnvironmentLight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light), in_scene, in_light))
end

function rprSceneGetEnvironmentLight(in_scene)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprSceneGetEnvironmentLight, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_light}), in_scene, out_light))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_light[]
end

"""
    rprSceneGetInfo(scene, info, size, data, size_ret)

Query information about a scene

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `scene`: The scene to query
* `info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneGetInfo(scene, info, size, data, size_ret)
    check_error(ccall((:rprSceneGetInfo, libRadeonProRender64), rpr_status, (rpr_scene, rpr_scene_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), scene, info, size, data, size_ret))
end

"""
    rprSceneSetBackgroundImage(scene, image)

Set background image for the scene which does not affect the scene lighting, it is shown as view-independent rectangular background Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `scene`: The scene to set background for
* `image`: Background image
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneSetBackgroundImage(scene, image)
    check_error(ccall((:rprSceneSetBackgroundImage, libRadeonProRender64), rpr_status, (rpr_scene, rpr_image), scene, image))
end

"""
    rprSceneGetBackgroundImage(scene)

Get background image

### Parameters
* `scene`: The scene to get background image from
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Image object
"""
function rprSceneGetBackgroundImage(scene)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprSceneGetBackgroundImage, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_image}), scene, out_image))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_image[]
end

"""
    rprSceneSetCameraRight(scene, camera)

Set right camera for the scene

This is the main camera which for rays generation for the scene.

### Parameters
* `scene`: The scene to set camera for
* `camera`: Camera
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneSetCameraRight(scene, camera)
    check_error(ccall((:rprSceneSetCameraRight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_camera), scene, camera))
end

"""
    rprSceneGetCameraRight(scene)

Get right camera for the scene

### Parameters
* `scene`: The scene to get camera for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
camera id for the camera if any, NULL otherwise
"""
function rprSceneGetCameraRight(scene)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprSceneGetCameraRight, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_camera}), scene, out_camera))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_camera[]
end

"""
    rprSceneSetCamera(scene, camera)

Set camera for the scene

This is the main camera which for rays generation for the scene.

### Parameters
* `scene`: The scene to set camera for
* `camera`: Camera
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprSceneSetCamera(scene, camera)
    check_error(ccall((:rprSceneSetCamera, libRadeonProRender64), rpr_status, (rpr_scene, rpr_camera), scene, camera))
end

"""
    rprSceneGetCamera(scene)

Get camera for the scene

### Parameters
* `scene`: The scene to get camera for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
camera id for the camera if any, NULL otherwise
"""
function rprSceneGetCamera(scene)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprSceneGetCamera, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_camera}), scene, out_camera))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_camera[]
end

"""
    rprFrameBufferGetInfo(framebuffer, info, size, data, size_ret)

Query information about a framebuffer

The workflow is usually two-step: query with the data == NULL to get the required buffer size, then query with size\\_ret == NULL to fill the buffer with the data Possible error codes: [`RPR_ERROR_INVALID_PARAMETER`](@ref)

### Parameters
* `framebuffer`: Framebuffer object to query
* `info`: The type of info to query
* `size`: The size of the buffer pointed by data
* `data`: The buffer to store queried info
* `size_ret`: Returns the size in bytes of the data being queried
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprFrameBufferGetInfo(framebuffer, info, size, data, size_ret)
    check_error(ccall((:rprFrameBufferGetInfo, libRadeonProRender64), rpr_status, (rpr_framebuffer, rpr_framebuffer_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), framebuffer, info, size, data, size_ret))
end

"""
    rprFrameBufferClear(frame_buffer)

Clear contents of a framebuffer to zero

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)

The call is blocking and the image is ready when returned

### Parameters
* `frame_buffer`: Framebuffer to clear
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprFrameBufferClear(frame_buffer)
    check_error(ccall((:rprFrameBufferClear, libRadeonProRender64), rpr_status, (rpr_framebuffer,), frame_buffer))
end

"""
    rprFrameBufferFillWithColor(frame_buffer, r, g, b, a)

Fill contents of a framebuffer with a single color

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)

The call is blocking and the image is ready when returned. If you want to fill with zeros, it's advised to use [`rprFrameBufferClear`](@ref).

### Parameters
* `frame_buffer`: Framebuffer to clear
* `r,g,b,a`: : the color to fill
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprFrameBufferFillWithColor(frame_buffer, r, g, b, a)
    check_error(ccall((:rprFrameBufferFillWithColor, libRadeonProRender64), rpr_status, (rpr_framebuffer, rpr_float, rpr_float, rpr_float, rpr_float), frame_buffer, r, g, b, a))
end

"""
    rprFrameBufferSaveToFile(frame_buffer, file_path)

Save frame buffer to file. In case the file format is .bin, the header of the saved file contains [`rpr_framebuffer_desc`](@ref) and [`rpr_framebuffer_format`](@ref) at very begining. The remaining data is raw data of saved framebuffer.

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)

### Parameters
* `frame_buffer`: Frame buffer to save
* `file_path`: Path to file (for UNICODE, supports UTF-8 encoding)
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprFrameBufferSaveToFile(frame_buffer, file_path)
    check_error(ccall((:rprFrameBufferSaveToFile, libRadeonProRender64), rpr_status, (rpr_framebuffer, Ptr{rpr_char}), frame_buffer, file_path))
end

"""
    rprFrameBufferSaveToFileEx(framebufferList, framebufferCount, filePath, extraOptions)

Save frame buffer to file

Same that [`rprFrameBufferSaveToFile`](@ref), but more options. A list of frambuffers can be given, they will be saved to a multilayer EXR.

'extraOptions' is not used for now, but may be use in the future to define some export options, like channel configurations, compression... It must be set to NULL for now.

For layer names, the framebuffer names ( from [`rprObjectSetName`](@ref) ) will be used if it exists.

As this function is new ( 2.01.6 SDK ) and still experimental, its arguments may change in the future.
"""
function rprFrameBufferSaveToFileEx(framebufferList, framebufferCount, filePath, extraOptions)
    check_error(ccall((:rprFrameBufferSaveToFileEx, libRadeonProRender64), rpr_status, (Ptr{rpr_framebuffer}, rpr_uint, Ptr{rpr_char}, Ptr{Cvoid}), framebufferList, framebufferCount, filePath, extraOptions))
end

"""
    rprContextResolveFrameBuffer(context, src_frame_buffer, dst_frame_buffer, noDisplayGamma)

Resolve framebuffer

Convert the input Renderer's native raw format 'src\\_frame\\_buffer' into an output 'dst\\_frame\\_buffer' that can be used for final rendering.

src\\_frame\\_buffer and dst\\_frame\\_buffer should usually have the same dimension/format. src\\_frame\\_buffer is the result of a [`rprContextRender`](@ref) and should be attached to an AOV with [`rprContextSetAOV`](@ref) before the [`rprContextRender`](@ref) call. dst\\_frame\\_buffer should not be attached to any AOV.

The post process that is applied to src\\_frame\\_buffer depends on the AOV it's attached to. So it's important to not modify its AOV ( with [`rprContextSetAOV`](@ref) ) between the [`rprContextRender`](@ref) and [`rprContextResolveFrameBuffer`](@ref) calls.

If noDisplayGamma=FALSE, then [`RPR_CONTEXT_DISPLAY_GAMMA`](@ref) is applied to the dst\\_frame\\_buffer otherwise, display gamma is not used. It's recommended to set it to FALSE for AOVs representing colors ( like [`RPR_AOV_COLOR`](@ref) ) and use TRUE for other AOVs.
"""
function rprContextResolveFrameBuffer(context, src_frame_buffer, dst_frame_buffer, noDisplayGamma)
    check_error(ccall((:rprContextResolveFrameBuffer, libRadeonProRender64), rpr_status, (rpr_context, rpr_framebuffer, rpr_framebuffer, rpr_bool), context, src_frame_buffer, dst_frame_buffer, noDisplayGamma))
end

"""
    rprMaterialSystemGetInfo(in_material_system, type, in_size, in_data)

Create material system

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialSystemGetInfo(in_material_system, type, in_size, in_data)
    out_size = Ref{Csize_t}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprMaterialSystemGetInfo, libRadeonProRender64), rpr_status, (rpr_material_system, rpr_material_system_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), in_material_system, type, in_size, in_data, out_size))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_size[]
end

"""
    rprContextCreateMaterialSystem(in_context, type)

Get material system information

Possible error codes: [`RPR_ERROR_INTERNAL_ERROR`](@ref)
"""
function rprContextCreateMaterialSystem(in_context, type)
    out_matsys = Ref{rpr_material_system}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateMaterialSystem, libRadeonProRender64), rpr_status, (rpr_context, rpr_material_system_type, Ptr{rpr_material_system}), in_context, type, out_matsys))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_matsys[]
end

"""
    rprMaterialSystemGetSize(in_context)

Create material node

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialSystemGetSize(in_context)
    out_size = Ref{rpr_uint}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprMaterialSystemGetSize, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_uint}), in_context, out_size))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_size[]
end

"""
    rprMaterialSystemCreateNode(in_matsys, in_type)

Returns the number of material nodes for a given material system

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialSystemCreateNode(in_matsys, in_type)
    out_node = Ref{rpr_material_node}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprMaterialSystemCreateNode, libRadeonProRender64), rpr_status, (rpr_material_system, rpr_material_node_type, Ptr{rpr_material_node}), in_matsys, in_type, out_node))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_node[]
end

"""
    rprMaterialNodeSetID(in_node, id)

set the [`RPR_MATERIAL_NODE_ID`](@ref) of a material. this ID doesn't need to be unique. this ID can be rendered with the [`RPR_AOV_MATERIAL_ID`](@ref) AOV - color of this AOV can be customized with [`rprContextSetAOVindexLookup`](@ref).
"""
function rprMaterialNodeSetID(in_node, id)
    check_error(ccall((:rprMaterialNodeSetID, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_uint), in_node, id))
end

"""
    rprMaterialNodeSetInputNByKey(in_node, in_input, in_input_node)

Connect nodes

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialNodeSetInputNByKey(in_node, in_input, in_input_node)
    check_error(ccall((:rprMaterialNodeSetInputNByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_material_node), in_node, in_input, in_input_node))
end

"""
    rprMaterialNodeSetInputFByKey(in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w)

Set float input value

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialNodeSetInputFByKey(in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w)
    check_error(ccall((:rprMaterialNodeSetInputFByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_float, rpr_float, rpr_float, rpr_float), in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w))
end

"""
    rprMaterialNodeSetInputDataByKey(in_node, in_input, data, dataSizeByte)

Set generic data input value: Some complex materials inputs may need more than 4-floats or int. This API can be used to set any generic input data. Use it only when documentation requests to do it for specific material inputs.
"""
function rprMaterialNodeSetInputDataByKey(in_node, in_input, data, dataSizeByte)
    check_error(ccall((:rprMaterialNodeSetInputDataByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, Ptr{Cvoid}, Csize_t), in_node, in_input, data, dataSizeByte))
end

"""
    rprMaterialNodeSetInputUByKey(in_node, in_input, in_value)

Set uint input value

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialNodeSetInputUByKey(in_node, in_input, in_value)
    check_error(ccall((:rprMaterialNodeSetInputUByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_uint), in_node, in_input, in_value))
end

"""
    rprMaterialNodeSetInputImageDataByKey(in_node, in_input, image)

Set image input value

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprMaterialNodeSetInputImageDataByKey(in_node, in_input, image)
    check_error(ccall((:rprMaterialNodeSetInputImageDataByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_image), in_node, in_input, image))
end

"""
    rprMaterialNodeSetInputLightDataByKey(in_node, in_input, light)

Set light input value
"""
function rprMaterialNodeSetInputLightDataByKey(in_node, in_input, light)
    check_error(ccall((:rprMaterialNodeSetInputLightDataByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_light), in_node, in_input, light))
end

"""
    rprMaterialNodeSetInputBufferDataByKey(in_node, in_input, buffer)

Set Buffer input value
"""
function rprMaterialNodeSetInputBufferDataByKey(in_node, in_input, buffer)
    check_error(ccall((:rprMaterialNodeSetInputBufferDataByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_buffer), in_node, in_input, buffer))
end

"""
    rprMaterialNodeSetInputGridDataByKey(in_node, in_input, grid)

Set Grid input value
"""
function rprMaterialNodeSetInputGridDataByKey(in_node, in_input, grid)
    check_error(ccall((:rprMaterialNodeSetInputGridDataByKey, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_input, rpr_grid), in_node, in_input, grid))
end

function rprMaterialNodeGetInfo(in_node, in_info, in_size, in_data)
    out_size = Ref{Csize_t}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprMaterialNodeGetInfo, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_material_node_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), in_node, in_info, in_size, in_data, out_size))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_size[]
end

function rprMaterialNodeGetInputInfo(in_node, in_input_idx, in_info, in_size, in_data)
    out_size = Ref{Csize_t}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprMaterialNodeGetInputInfo, libRadeonProRender64), rpr_status, (rpr_material_node, rpr_int, rpr_material_node_input_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), in_node, in_input_idx, in_info, in_size, in_data, out_size))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_size[]
end

function rprContextCreateComposite(context, in_type)
    out_composite = Ref{rpr_composite}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateComposite, libRadeonProRender64), rpr_status, (rpr_context, rpr_composite_type, Ptr{rpr_composite}), context, in_type, out_composite))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_composite[]
end

function rprContextCreateLUTFromFile(context, fileLutPath)
    out_lut = Ref{rpr_lut}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateLUTFromFile, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, Ptr{rpr_lut}), context, fileLutPath, out_lut))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_lut[]
end

function rprContextCreateLUTFromData(context, lutData)
    out_lut = Ref{rpr_lut}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateLUTFromData, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, Ptr{rpr_lut}), context, lutData, out_lut))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_lut[]
end

function rprCompositeSetInputFb(composite, inputName, input)
    check_error(ccall((:rprCompositeSetInputFb, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, rpr_framebuffer), composite, inputName, input))
end

function rprCompositeSetInputC(composite, inputName, input)
    check_error(ccall((:rprCompositeSetInputC, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, rpr_composite), composite, inputName, input))
end

function rprCompositeSetInputLUT(composite, inputName, input)
    check_error(ccall((:rprCompositeSetInputLUT, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, rpr_lut), composite, inputName, input))
end

function rprCompositeSetInput4f(composite, inputName, x, y, z, w)
    check_error(ccall((:rprCompositeSetInput4f, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, Cfloat, Cfloat, Cfloat, Cfloat), composite, inputName, x, y, z, w))
end

function rprCompositeSetInput1u(composite, inputName, value)
    check_error(ccall((:rprCompositeSetInput1u, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, rpr_uint), composite, inputName, value))
end

function rprCompositeSetInputOp(composite, inputName, op)
    check_error(ccall((:rprCompositeSetInputOp, libRadeonProRender64), rpr_status, (rpr_composite, Ptr{rpr_char}, rpr_material_node_arithmetic_operation), composite, inputName, op))
end

function rprCompositeCompute(composite, fb)
    check_error(ccall((:rprCompositeCompute, libRadeonProRender64), rpr_status, (rpr_composite, rpr_framebuffer), composite, fb))
end

function rprCompositeGetInfo(composite, composite_info, size, data, size_ret)
    check_error(ccall((:rprCompositeGetInfo, libRadeonProRender64), rpr_status, (rpr_composite, rpr_composite_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), composite, composite_info, size, data, size_ret))
end

"""
    rprObjectDelete(obj)

Delete object

[`rprObjectDelete`](@ref)(obj) deletes 'obj' from memory. User has to make sure that 'obj' will not be used anymore after this call.

Possible error codes: [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref)
"""
function rprObjectDelete(obj)
    check_error(ccall((:rprObjectDelete, libRadeonProRender64), rpr_status, (Ptr{Cvoid},), obj))
end

"""
    rprObjectSetName(node, name)

Set material node name

### Parameters
* `node`: Node to set the name for
* `name`: NULL terminated string name
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprObjectSetName(node, name)
    check_error(ccall((:rprObjectSetName, libRadeonProRender64), rpr_status, (Ptr{Cvoid}, Ptr{rpr_char}), node, name))
end

"""
    rprObjectSetCustomPointer(node, customPtr)

Set a custom pointer to an RPR object ( [`rpr_shape`](@ref), [`rpr_image`](@ref) ... ) The custom pointer is not used internally by RPR. The API user only is responsible of it. An example of usage of this pointer is the C++ wrapper ( RadeonProRender.hpp )

### Parameters
* `node`: Node to set the 'custom pointer' for
* `customPtr`: Any 8 bytes value decided by the API user.
### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprObjectSetCustomPointer(node, customPtr)
    check_error(ccall((:rprObjectSetCustomPointer, libRadeonProRender64), rpr_status, (Ptr{Cvoid}, Ptr{Cvoid}), node, customPtr))
end

"""
    rprObjectGetCustomPointer(node, customPtr_out)

outputs the 'custom pointer' set by [`rprObjectSetCustomPointer`](@ref). Equivalent of the calls : [`rprImageGetInfo`](@ref)(image,[`RPR_IMAGE_CUSTOM_PTR`](@ref),...) for [`rpr_image`](@ref) , [`rprCameraGetInfo`](@ref)(camera,[`RPR_CAMERA_CUSTOM_PTR`](@ref),...) for [`rpr_camera`](@ref) , ...etc...

### Returns
[`RPR_SUCCESS`](@ref) in case of success, error code otherwise
"""
function rprObjectGetCustomPointer(node, customPtr_out)
    check_error(ccall((:rprObjectGetCustomPointer, libRadeonProRender64), rpr_status, (Ptr{Cvoid}, Ptr{Ptr{Cvoid}}), node, customPtr_out))
end

"""
    rprContextCreatePostEffect(context, type)

Create post effect

Create analytic point light represented by a point in space. Possible error codes: [`RPR_ERROR_OUT_OF_VIDEO_MEMORY`](@ref) [`RPR_ERROR_OUT_OF_SYSTEM_MEMORY`](@ref)

### Parameters
* `context`: The context to create a light for
* `status`: [`RPR_SUCCESS`](@ref) in case of success, error code otherwise
### Returns
Light object
"""
function rprContextCreatePostEffect(context, type)
    out_effect = Ref{rpr_post_effect}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreatePostEffect, libRadeonProRender64), rpr_status, (rpr_context, rpr_post_effect_type, Ptr{rpr_post_effect}), context, type, out_effect))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_effect[]
end

function rprContextAttachPostEffect(context, effect)
    check_error(ccall((:rprContextAttachPostEffect, libRadeonProRender64), rpr_status, (rpr_context, rpr_post_effect), context, effect))
end

function rprContextDetachPostEffect(context, effect)
    check_error(ccall((:rprContextDetachPostEffect, libRadeonProRender64), rpr_status, (rpr_context, rpr_post_effect), context, effect))
end

function rprPostEffectSetParameter1u(effect, name, x)
    check_error(ccall((:rprPostEffectSetParameter1u, libRadeonProRender64), rpr_status, (rpr_post_effect, Ptr{rpr_char}, rpr_uint), effect, name, x))
end

function rprPostEffectSetParameter1f(effect, name, x)
    check_error(ccall((:rprPostEffectSetParameter1f, libRadeonProRender64), rpr_status, (rpr_post_effect, Ptr{rpr_char}, rpr_float), effect, name, x))
end

function rprPostEffectSetParameter3f(effect, name, x, y, z)
    check_error(ccall((:rprPostEffectSetParameter3f, libRadeonProRender64), rpr_status, (rpr_post_effect, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float), effect, name, x, y, z))
end

function rprPostEffectSetParameter4f(effect, name, x, y, z, w)
    check_error(ccall((:rprPostEffectSetParameter4f, libRadeonProRender64), rpr_status, (rpr_post_effect, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float, rpr_float), effect, name, x, y, z, w))
end

function rprContextGetAttachedPostEffectCount(context, nb)
    check_error(ccall((:rprContextGetAttachedPostEffectCount, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_uint}), context, nb))
end

function rprContextGetAttachedPostEffect(context, i)
    out_effect = Ref{rpr_post_effect}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextGetAttachedPostEffect, libRadeonProRender64), rpr_status, (rpr_context, rpr_uint, Ptr{rpr_post_effect}), context, i, out_effect))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_effect[]
end

function rprPostEffectGetInfo(effect, info, size, data, size_ret)
    check_error(ccall((:rprPostEffectGetInfo, libRadeonProRender64), rpr_status, (rpr_post_effect, rpr_post_effect_info, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), effect, info, size, data, size_ret))
end

function rprContextCreateGrid(context, out_grid, gridSizeX, gridSizeY, gridSizeZ, indicesList, numberOfIndices, indicesListTopology, gridData, gridDataSizeByte, gridDataTopology___unused)
    check_error(ccall((:rprContextCreateGrid, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_grid}, Csize_t, Csize_t, Csize_t, Ptr{Cvoid}, Csize_t, rpr_grid_indices_topology, Ptr{Cvoid}, Csize_t, rpr_uint), context, out_grid, gridSizeX, gridSizeY, gridSizeZ, indicesList, numberOfIndices, indicesListTopology, gridData, gridDataSizeByte, gridDataTopology___unused))
end

function rprContextCreateHeteroVolume(context)
    out_heteroVolume = Ref{rpr_hetero_volume}()
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    check_error(ccall((:rprContextCreateHeteroVolume, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_hetero_volume}), context, out_heteroVolume))
    #= c:\Users\sdani\SimiWorld\ProgrammerLife\MakieDev\dev\RadeonProRender\build\generate-master.jl:44 =#
    return out_heteroVolume[]
end

function rprShapeSetHeteroVolume(shape, heteroVolume)
    check_error(ccall((:rprShapeSetHeteroVolume, libRadeonProRender64), rpr_status, (rpr_shape, rpr_hetero_volume), shape, heteroVolume))
end

function rprHeteroVolumeSetTransform(heteroVolume, transpose, transform)
    check_error(ccall((:rprHeteroVolumeSetTransform, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_bool, Ptr{rpr_float}), heteroVolume, transpose, transform))
end

function rprHeteroVolumeSetEmissionGrid(heteroVolume, grid)
    check_error(ccall((:rprHeteroVolumeSetEmissionGrid, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetDensityGrid(heteroVolume, grid)
    check_error(ccall((:rprHeteroVolumeSetDensityGrid, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetAlbedoGrid(heteroVolume, grid)
    check_error(ccall((:rprHeteroVolumeSetAlbedoGrid, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetEmissionLookup(heteroVolume, ptr, n)
    check_error(ccall((:rprHeteroVolumeSetEmissionLookup, libRadeonProRender64), rpr_status, (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetDensityLookup(heteroVolume, ptr, n)
    check_error(ccall((:rprHeteroVolumeSetDensityLookup, libRadeonProRender64), rpr_status, (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetAlbedoLookup(heteroVolume, ptr, n)
    check_error(ccall((:rprHeteroVolumeSetAlbedoLookup, libRadeonProRender64), rpr_status, (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetAlbedoScale(heteroVolume, scale)
    check_error(ccall((:rprHeteroVolumeSetAlbedoScale, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

function rprHeteroVolumeSetEmissionScale(heteroVolume, scale)
    check_error(ccall((:rprHeteroVolumeSetEmissionScale, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

function rprHeteroVolumeSetDensityScale(heteroVolume, scale)
    check_error(ccall((:rprHeteroVolumeSetDensityScale, libRadeonProRender64), rpr_status, (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

struct _rpr_image_desc
    image_width::rpr_uint
    image_height::rpr_uint
    image_depth::rpr_uint
    image_row_pitch::rpr_uint
    image_slice_pitch::rpr_uint
end

struct _rpr_buffer_desc
    nb_element::rpr_uint
    element_type::rpr_buffer_element_type
    element_channel_size::rpr_uint
end

struct _rpr_framebuffer_desc
    fb_width::rpr_uint
    fb_height::rpr_uint
end

struct _rpr_render_statistics
    gpumem_usage::rpr_longlong
    gpumem_total::rpr_longlong
    gpumem_max_allocation::rpr_longlong
    sysmem_usage::rpr_longlong
end

struct _rpr_image_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct _rpr_framebuffer_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct _rpr_ies_image_desc
    w::rpr_int
    h::rpr_int
    data::Ptr{rpr_char}
    filename::Ptr{rpr_char}
end

"""
    rprLoadMaterialX(in_context, in_matsys, xmlData, incudeData, includeCount, resourcePaths, resourcePathsCount, imageAlreadyCreated_count, imageAlreadyCreated_paths, imageAlreadyCreated_list, listNodesOut, listNodesOut_count, listImagesOut, listImagesOut_count, rootNodeOut, rootDisplacementNodeOut)

Parse a MaterialX XML data, and create the Material graph composed of rpr\\_material\\_nodes, and rpr\\_images

-----> This function is part of the 'Version 1' API - deprecated and replaced by the 'Version 2' API

This function is NOT traced. However internally it's calling some RPR API to build the graph, those calls are traced.

### Parameters
* `xmlData`: null-terminated string of the MaterialX XML data
* `resourcePaths`: and resourcePathsCount list of paths used for image loading
* `imageAlreadyCreated_count`:
* `imageAlreadyCreated_paths`:
* `imageAlreadyCreated_list`: We can specify a list of [`rpr_image`](@ref) that are already loaded.  If [`rprLoadMaterialX`](@ref) finds any images in the XML belonging to this list it will use it directly instead of creating it with [`rprContextCreateImageFromFile`](@ref) Those images will not be added in the listImagesOut list. example to add an image in the imageAlreadyCreated list: imageAlreadyCreated\\_count = 1 imageAlreadyCreated\\_paths[0] = "../../Textures/UVCheckerMap13-1024.png" // same path specified in the 'value' of the image in the XML imageAlreadyCreated\\_list[0] = ([`rpr_image`](@ref)) existing\\_rpr\\_image imageAlreadyCreated\\_paths and imageAlreadyCreated\\_list must have the same size.
* `listNodesOut`:
* `listImagesOut`: Thoses 2 buffers are allocated by [`rprLoadMaterialX`](@ref), then you should use [`rprLoadMaterialX_free`](@ref) to free them. they contain the list of rpr\\_material and [`rpr_image`](@ref) created by [`rprLoadMaterialX`](@ref).
* `rootNodeOut`: Closure node in the material graph. Index inside listNodesOut. Could be -1 if an error occured. This is the material that should be assigned to shape: [`rprShapeSetMaterial`](@ref)(shape,listNodesOut[rootNodeOut]);
"""
function rprLoadMaterialX(in_context, in_matsys, xmlData, incudeData, includeCount, resourcePaths, resourcePathsCount, imageAlreadyCreated_count, imageAlreadyCreated_paths, imageAlreadyCreated_list, listNodesOut, listNodesOut_count, listImagesOut, listImagesOut_count, rootNodeOut, rootDisplacementNodeOut)
    check_error(ccall((:rprLoadMaterialX, libRadeonProRender64), rpr_status, (rpr_context, rpr_material_system, Ptr{Cchar}, Ptr{Ptr{Cchar}}, Cint, Ptr{Ptr{Cchar}}, Cint, Cint, Ptr{Ptr{Cchar}}, Ptr{rpr_image}, Ptr{Ptr{rpr_material_node}}, Ptr{rpr_uint}, Ptr{Ptr{rpr_image}}, Ptr{rpr_uint}, Ptr{rpr_uint}, Ptr{rpr_uint}), in_context, in_matsys, xmlData, incudeData, includeCount, resourcePaths, resourcePathsCount, imageAlreadyCreated_count, imageAlreadyCreated_paths, imageAlreadyCreated_list, listNodesOut, listNodesOut_count, listImagesOut, listImagesOut_count, rootNodeOut, rootDisplacementNodeOut))
end

"""
    rprLoadMaterialX_free(listNodes, listImages)

Free the buffers allocated by [`rprLoadMaterialX`](@ref)

-----> This function is part of the 'Version 1' API - deprecated and replaced by the 'Version 2' API

It does NOT call any [`rprObjectDelete`](@ref) Internally it's doing a simple: delete[] listNodes; delete[] listImages;

This function is NOT traced.
"""
function rprLoadMaterialX_free(listNodes, listImages)
    check_error(ccall((:rprLoadMaterialX_free, libRadeonProRender64), rpr_status, (Ptr{rpr_material_node}, Ptr{rpr_image}), listNodes, listImages))
end

"""
    rprMaterialXAddResourceFolder(in_context, resourcePath)

Add resource search path.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'

example: [`rprMaterialXAddResourceFolder`](@ref)(context, "dependency/"); [`rprMaterialXAddResourceFolder`](@ref)(context, "../imageLib/"); [`rprMaterialXSetFile`](@ref)(material, "materialx.mtlx"); During the parsing of "materialx.mtlx" inside the [`rprMaterialXSetFile`](@ref) call, the folder path "dependency/" , "../imageLib/" will be used to search any files referenced in the materialX
"""
function rprMaterialXAddResourceFolder(in_context, resourcePath)
    check_error(ccall((:rprMaterialXAddResourceFolder, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}), in_context, resourcePath))
end

"""
    rprMaterialXCleanResourceFolder(in_context)

Clean the list created by [`rprMaterialXAddResourceFolder`](@ref) calls

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'
"""
function rprMaterialXCleanResourceFolder(in_context)
    check_error(ccall((:rprMaterialXCleanResourceFolder, libRadeonProRender64), rpr_status, (rpr_context,), in_context))
end

"""
    rprMaterialXAddDependencyMtlx(in_context, resourcePath)

Add a dependency Mtlx file.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'

example: [`rprMaterialXAddDependencyMtlx`](@ref)(context, "standard\\_surface.mtlx"); [`rprMaterialXSetFile`](@ref)(material, "materialx.mtlx"); During the parsing of "materialx.mtlx" inside the [`rprMaterialXSetFile`](@ref) call, standard\\_surface.mtlx is also parsed and used as a dependancy file.
"""
function rprMaterialXAddDependencyMtlx(in_context, resourcePath)
    check_error(ccall((:rprMaterialXAddDependencyMtlx, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}), in_context, resourcePath))
end

"""
    rprMaterialXCleanDependencyMtlx(in_context)

Clean the list created by [`rprMaterialXAddDependencyMtlx`](@ref) calls

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'
"""
function rprMaterialXCleanDependencyMtlx(in_context)
    check_error(ccall((:rprMaterialXCleanDependencyMtlx, libRadeonProRender64), rpr_status, (rpr_context,), in_context))
end

"""
    rprMaterialXAddPreloadedImage(in_context, imgPath, img)

Add a pre-loaded image to the MaterialX creation.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'

example: [`rprMaterialXAddPreloadedImage`](@ref)(context, "images/back.png" , imgA); [`rprMaterialXAddPreloadedImage`](@ref)(context, "images/skin.png" , imgB); [`rprMaterialXSetFile`](@ref)(material, "materialx.mtlx"); During the parsing of "materialx.mtlx" inside the [`rprMaterialXSetFile`](@ref) call, if an image uses the exact path "images/back.png" or "images/skin.png" , then [`rprMaterialXSetFile`](@ref) will use imgA/imgB instead of creation the image itself.
"""
function rprMaterialXAddPreloadedImage(in_context, imgPath, img)
    check_error(ccall((:rprMaterialXAddPreloadedImage, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, rpr_image), in_context, imgPath, img))
end

"""
    rprMaterialXCleanPreloadedImages(in_context)

Clean the map created by [`rprMaterialXAddPreloadedImage`](@ref) calls.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'
"""
function rprMaterialXCleanPreloadedImages(in_context)
    check_error(ccall((:rprMaterialXCleanPreloadedImages, libRadeonProRender64), rpr_status, (rpr_context,), in_context))
end

"""
    rprMaterialXSetFile(material, xmlPath)

Assign the materialX file to a RPR material.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'

The material must be created as [`RPR_MATERIAL_NODE_MATX`](@ref) type.
"""
function rprMaterialXSetFile(material, xmlPath)
    check_error(ccall((:rprMaterialXSetFile, libRadeonProRender64), rpr_status, (rpr_material_node, Ptr{rpr_char}), material, xmlPath))
end

"""
    rprMaterialXSetFileAsBuffer(material, buffer, bufferSize)

Same that [`rprMaterialXSetFile`](@ref) but input a file buffer instead of the file.

-----> Note: This function is part of the 'Version 2' MaterialX API that replaces 'Version 1'

'buffer' represents the content of a XML string defining the MaterialX material. The size of the buffer is defined by 'bufferSize', not by a null-terminated character.
"""
function rprMaterialXSetFileAsBuffer(material, buffer, bufferSize)
    check_error(ccall((:rprMaterialXSetFileAsBuffer, libRadeonProRender64), rpr_status, (rpr_material_node, Ptr{rpr_char}, Csize_t), material, buffer, bufferSize))
end

"""
    rprMaterialXGetLoaderMessages(in_context, size, data, size_ret)

Return the Warning/Error messages from the last MaterialX Loading. This function helps to debug. If [`rprMaterialXSetFile`](@ref)/[`rprMaterialXSetFileAsBuffer`](@ref) fails, it's a good practice to call [`rprMaterialXGetLoaderMessages`](@ref) just after.

'size' is the size of allocated 'data' buffer. 'data' can be nullptr if we only want to get 'size\\_ret'. 'size\\_ret' is the actual size of the out buffer - can be nullptr.
"""
function rprMaterialXGetLoaderMessages(in_context, size, data, size_ret)
    check_error(ccall((:rprMaterialXGetLoaderMessages, libRadeonProRender64), rpr_status, (rpr_context, Csize_t, Ptr{Cvoid}, Ptr{Csize_t}), in_context, size, data, size_ret))
end

"""
    rprMaterialXBindGeomPropToPrimvar(in_context, geompropvalue, key)

In MaterialX, Geompropvalue are referenced as strings, example:  input name="geomprop" type="string" value="UVset01" We can map this MaterialX Geompropvalue to a RadeonProRender Primvar, example: [`rprMaterialXBindGeomPropToPrimvar`](@ref)(context, "UVset01", 100 ); In this example, the materialX "UVset01" will be used as the RadeonProRender Primvar key=100 ( created with [`rprShapeSetPrimvar`](@ref) ) Internally this is a map from geompropvalue to key, meaning a geompropvalue only has 1 unique key, but 1 key can have several geompropvalue.
"""
function rprMaterialXBindGeomPropToPrimvar(in_context, geompropvalue, key)
    check_error(ccall((:rprMaterialXBindGeomPropToPrimvar, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_char}, rpr_uint), in_context, geompropvalue, key))
end

const RPR_VERSION_MAJOR = 2

const RPR_VERSION_MINOR = 2

const RPR_VERSION_REVISION = 17

const RPR_VERSION_BUILD = 0xc1dd1d1b

const RPR_VERSION_MAJOR_MINOR_REVISION = 0x00200217

const RPR_API_VERSION = RPR_VERSION_MAJOR_MINOR_REVISION

const RPR_API_VERSION_MINOR = RPR_VERSION_BUILD

const RPR_OBJECT_NAME = 0x00777777

const RPR_OBJECT_UNIQUE_ID = 0x00777778

const RPR_OBJECT_CUSTOM_PTR = 0x00777779

const RPR_INSTANCE_PARENT_SHAPE = 0x1601

const RPR_FALSE = Cuint(0)

const RPR_TRUE = Cuint(1)

# exports
const PREFIXES = ["RPR", "rpr"]
for name in names(@__MODULE__; all=true), prefix in PREFIXES
    if startswith(string(name), prefix)
        @eval export $name
    end
end

end # module
