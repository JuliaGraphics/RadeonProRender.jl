module RPR

using RadeonProRender_jll

function check_error(error_code)
    error_code == RPR_SUCCESS && return
    return error("Error code returned: $(error_code)")
end

using CEnum

const rpr_char = Cchar

const rpr_uchar = Cuchar

const rpr_int = Cint

const rpr_uint = Cuint

const rpr_long = Clong

const rpr_ulong = Culong

const rpr_short = Cshort

const rpr_ushort = Cushort

const rpr_float = Cfloat

const rpr_double = Cdouble

const rpr_longlong = Clonglong

const rpr_bool = Cint

const rpr_bitfield = rpr_uint

struct rpr_context_t
    _::Ptr{Cvoid}
end

const rpr_context = Ptr{rpr_context_t}

struct rpr_camera_t
    _::Ptr{Cvoid}
end

const rpr_camera = Ptr{rpr_camera_t}

struct rpr_shape_t
    _::Ptr{Cvoid}
end

const rpr_shape = Ptr{rpr_shape_t}

struct rpr_light_t
    _::Ptr{Cvoid}
end

const rpr_light = Ptr{rpr_light_t}

struct rpr_scene_t
    _::Ptr{Cvoid}
end

const rpr_scene = Ptr{rpr_scene_t}

struct rpr_image_t
    _::Ptr{Cvoid}
end

const rpr_image = Ptr{rpr_image_t}

struct rpr_buffer_t
    _::Ptr{Cvoid}
end

const rpr_buffer = Ptr{rpr_buffer_t}

struct rpr_hetero_volume_t
    _::Ptr{Cvoid}
end

const rpr_hetero_volume = Ptr{rpr_hetero_volume_t}

struct rpr_grid_t
    _::Ptr{Cvoid}
end

const rpr_grid = Ptr{rpr_grid_t}

struct rpr_curve_t
    _::Ptr{Cvoid}
end

const rpr_curve = Ptr{rpr_curve_t}

struct rpr_framebuffer_t
    _::Ptr{Cvoid}
end

const rpr_framebuffer = Ptr{rpr_framebuffer_t}

struct rpr_material_system_t
    _::Ptr{Cvoid}
end

const rpr_material_system = Ptr{rpr_material_system_t}

struct rpr_material_node_t
    _::Ptr{Cvoid}
end

const rpr_material_node = Ptr{rpr_material_node_t}

struct rpr_post_effect_t
    _::Ptr{Cvoid}
end

const rpr_post_effect = Ptr{rpr_post_effect_t}

struct rpr_context_properties_t
    _::Ptr{Cvoid}
end

const rpr_context_properties = Ptr{rpr_context_properties_t}

struct rpr_composite_t
    _::Ptr{Cvoid}
end

const rpr_composite = Ptr{rpr_composite_t}

struct rpr_lut_t
    _::Ptr{Cvoid}
end

const rpr_lut = Ptr{rpr_lut_t}

const rpr_image_option = rpr_uint

const rpr_context_type = rpr_uint

const rpr_creation_flags = rpr_bitfield

const rpr_channel_order = rpr_uint

const rpr_channel_type = rpr_uint

const rpr_material_system_type = rpr_uint

const rpr_environment_override = rpr_uint

@cenum rpr_status::Int32 begin
    RPR_SUCCESS = 0
    RPR_ERROR_COMPUTE_API_NOT_SUPPORTED = -1
    RPR_ERROR_OUT_OF_SYSTEM_MEMORY = -2
    RPR_ERROR_OUT_OF_VIDEO_MEMORY = -3
    RPR_ERROR_INVALID_LIGHTPATH_EXPR = -5
    RPR_ERROR_INVALID_IMAGE = -6
    RPR_ERROR_INVALID_AA_METHOD = -7
    RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT = -8
    RPR_ERROR_INVALID_GL_TEXTURE = -9
    RPR_ERROR_INVALID_CL_IMAGE = -10
    RPR_ERROR_INVALID_OBJECT = -11
    RPR_ERROR_INVALID_PARAMETER = -12
    RPR_ERROR_INVALID_TAG = -13
    RPR_ERROR_INVALID_LIGHT = -14
    RPR_ERROR_INVALID_CONTEXT = -15
    RPR_ERROR_UNIMPLEMENTED = -16
    RPR_ERROR_INVALID_API_VERSION = -17
    RPR_ERROR_INTERNAL_ERROR = -18
    RPR_ERROR_IO_ERROR = -19
    RPR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE = -20
    RPR_ERROR_MATERIAL_STACK_OVERFLOW = -21
    RPR_ERROR_INVALID_PARAMETER_TYPE = -22
    RPR_ERROR_UNSUPPORTED = -23
    RPR_ERROR_OPENCL_OUT_OF_HOST_MEMORY = -24
    RPR_ERROR_OPENGL = -25
    RPR_ERROR_OPENCL = -26
    RPR_ERROR_NULLPTR = -27
    RPR_ERROR_NODETYPE = -28
    RPR_ERROR_ABORTED = -29
end

@cenum rpr_parameter_type::UInt32 begin
    RPR_PARAMETER_TYPE_FLOAT = 1
    RPR_PARAMETER_TYPE_FLOAT2 = 2
    RPR_PARAMETER_TYPE_FLOAT3 = 3
    RPR_PARAMETER_TYPE_FLOAT4 = 4
    RPR_PARAMETER_TYPE_IMAGE = 5
    RPR_PARAMETER_TYPE_STRING = 6
    RPR_PARAMETER_TYPE_SHADER = 7
    RPR_PARAMETER_TYPE_UINT = 8
    RPR_PARAMETER_TYPE_ULONG = 9
    RPR_PARAMETER_TYPE_LONGLONG = 10
end

@cenum rpr_creation_flags_t::Int32 begin
    RPR_CREATION_FLAGS_ENABLE_GPU0 = 1
    RPR_CREATION_FLAGS_ENABLE_GPU1 = 2
    RPR_CREATION_FLAGS_ENABLE_GPU2 = 4
    RPR_CREATION_FLAGS_ENABLE_GPU3 = 8
    RPR_CREATION_FLAGS_ENABLE_CPU = 16
    RPR_CREATION_FLAGS_ENABLE_GL_INTEROP = 32
    RPR_CREATION_FLAGS_ENABLE_GPU4 = 64
    RPR_CREATION_FLAGS_ENABLE_GPU5 = 128
    RPR_CREATION_FLAGS_ENABLE_GPU6 = 256
    RPR_CREATION_FLAGS_ENABLE_GPU7 = 512
    RPR_CREATION_FLAGS_ENABLE_METAL = 1024
    RPR_CREATION_FLAGS_ENABLE_GPU8 = 2048
    RPR_CREATION_FLAGS_ENABLE_GPU9 = 4096
    RPR_CREATION_FLAGS_ENABLE_GPU10 = 8192
    RPR_CREATION_FLAGS_ENABLE_GPU11 = 16384
    RPR_CREATION_FLAGS_ENABLE_GPU12 = 32768
    RPR_CREATION_FLAGS_ENABLE_GPU13 = 65536
    RPR_CREATION_FLAGS_ENABLE_GPU14 = 131072
    RPR_CREATION_FLAGS_ENABLE_GPU15 = 262144
    RPR_CREATION_FLAGS_ENABLE_DEBUG = -2147483648
end

@cenum rpr_aa_filter::UInt32 begin
    RPR_FILTER_NONE = 0
    RPR_FILTER_BOX = 1
    RPR_FILTER_TRIANGLE = 2
    RPR_FILTER_GAUSSIAN = 3
    RPR_FILTER_MITCHELL = 4
    RPR_FILTER_LANCZOS = 5
    RPR_FILTER_BLACKMANHARRIS = 6
end

@cenum rpr_context_sampler_type::UInt32 begin
    RPR_CONTEXT_SAMPLER_TYPE_SOBOL = 1
    RPR_CONTEXT_SAMPLER_TYPE_RANDOM = 2
    RPR_CONTEXT_SAMPLER_TYPE_CMJ = 3
end

@cenum rpr_shape_type::UInt32 begin
    RPR_SHAPE_TYPE_MESH = 1
    RPR_SHAPE_TYPE_INSTANCE = 2
end

@cenum rpr_light_type::UInt32 begin
    RPR_LIGHT_TYPE_POINT = 1
    RPR_LIGHT_TYPE_DIRECTIONAL = 2
    RPR_LIGHT_TYPE_SPOT = 3
    RPR_LIGHT_TYPE_ENVIRONMENT = 4
    RPR_LIGHT_TYPE_SKY = 5
    RPR_LIGHT_TYPE_IES = 6
    RPR_LIGHT_TYPE_SPHERE = 7
    RPR_LIGHT_TYPE_DISK = 8
end

@cenum rpr_context_info::UInt32 begin
    RPR_CONTEXT_CREATION_FLAGS = 258
    RPR_CONTEXT_CACHE_PATH = 259
    RPR_CONTEXT_RENDER_STATUS = 260
    RPR_CONTEXT_RENDER_STATISTICS = 261
    RPR_CONTEXT_DEVICE_COUNT = 262
    RPR_CONTEXT_PARAMETER_COUNT = 263
    RPR_CONTEXT_ACTIVE_PLUGIN = 264
    RPR_CONTEXT_SCENE = 265
    RPR_CONTEXT_ITERATIONS = 267
    RPR_CONTEXT_IMAGE_FILTER_TYPE = 268
    RPR_CONTEXT_IMAGE_FILTER_BOX_RADIUS = 269
    RPR_CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS = 270
    RPR_CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS = 271
    RPR_CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS = 272
    RPR_CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS = 273
    RPR_CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS = 274
    RPR_CONTEXT_TONE_MAPPING_TYPE = 275
    RPR_CONTEXT_TONE_MAPPING_LINEAR_SCALE = 276
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY = 277
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE = 278
    RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP = 279
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE = 280
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE = 281
    RPR_CONTEXT_TONE_MAPPING_REINHARD02_BURN = 282
    RPR_CONTEXT_MAX_RECURSION = 283
    RPR_CONTEXT_RAY_CAST_EPISLON = 284
    RPR_CONTEXT_RADIANCE_CLAMP = 285
    RPR_CONTEXT_X_FLIP = 286
    RPR_CONTEXT_Y_FLIP = 287
    RPR_CONTEXT_TEXTURE_GAMMA = 288
    RPR_CONTEXT_PDF_THRESHOLD = 289
    RPR_CONTEXT_RENDER_MODE = 290
    RPR_CONTEXT_ROUGHNESS_CAP = 291
    RPR_CONTEXT_DISPLAY_GAMMA = 292
    RPR_CONTEXT_MATERIAL_STACK_SIZE = 293
    RPR_CONTEXT_CLIPPING_PLANE = 294
    RPR_CONTEXT_GPU0_NAME = 295
    RPR_CONTEXT_GPU1_NAME = 296
    RPR_CONTEXT_GPU2_NAME = 297
    RPR_CONTEXT_GPU3_NAME = 298
    RPR_CONTEXT_CPU_NAME = 299
    RPR_CONTEXT_GPU4_NAME = 300
    RPR_CONTEXT_GPU5_NAME = 301
    RPR_CONTEXT_GPU6_NAME = 302
    RPR_CONTEXT_GPU7_NAME = 303
    RPR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY = 304
    RPR_CONTEXT_FRAMECOUNT = 305
    RPR_CONTEXT_TEXTURE_COMPRESSION = 306
    RPR_CONTEXT_AO_RAY_LENGTH = 307
    RPR_CONTEXT_OOC_TEXTURE_CACHE = 308
    RPR_CONTEXT_PREVIEW = 309
    RPR_CONTEXT_CPU_THREAD_LIMIT = 310
    RPR_CONTEXT_LAST_ERROR_MESSAGE = 311
    RPR_CONTEXT_MAX_DEPTH_DIFFUSE = 312
    RPR_CONTEXT_MAX_DEPTH_GLOSSY = 313
    RPR_CONTEXT_OOC_CACHE_PATH = 314
    RPR_CONTEXT_MAX_DEPTH_REFRACTION = 315
    RPR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION = 316
    RPR_CONTEXT_RENDER_LAYER_MASK = 317
    RPR_CONTEXT_SINGLE_LEVEL_BVH_ENABLED = 318
    RPR_CONTEXT_TRANSPARENT_BACKGROUND = 319
    RPR_CONTEXT_MAX_DEPTH_SHADOW = 320
    RPR_CONTEXT_API_VERSION = 321
    RPR_CONTEXT_GPU8_NAME = 322
    RPR_CONTEXT_GPU9_NAME = 323
    RPR_CONTEXT_GPU10_NAME = 324
    RPR_CONTEXT_GPU11_NAME = 325
    RPR_CONTEXT_GPU12_NAME = 326
    RPR_CONTEXT_GPU13_NAME = 327
    RPR_CONTEXT_GPU14_NAME = 328
    RPR_CONTEXT_GPU15_NAME = 329
    RPR_CONTEXT_API_VERSION_MINOR = 330
    RPR_CONTEXT_METAL_PERFORMANCE_SHADER = 331
    RPR_CONTEXT_USER_TEXTURE_0 = 332
    RPR_CONTEXT_USER_TEXTURE_1 = 333
    RPR_CONTEXT_USER_TEXTURE_2 = 334
    RPR_CONTEXT_USER_TEXTURE_3 = 335
    RPR_CONTEXT_MIPMAP_LOD_OFFSET = 336
    RPR_CONTEXT_AO_RAY_COUNT = 337
    RPR_CONTEXT_SAMPLER_TYPE = 338
    RPR_CONTEXT_ADAPTIVE_SAMPLING_TILE_SIZE = 339
    RPR_CONTEXT_ADAPTIVE_SAMPLING_MIN_SPP = 340
    RPR_CONTEXT_ADAPTIVE_SAMPLING_THRESHOLD = 341
    RPR_CONTEXT_TILE_SIZE = 342
    RPR_CONTEXT_LIST_CREATED_CAMERAS = 343
    RPR_CONTEXT_LIST_CREATED_MATERIALNODES = 344
    RPR_CONTEXT_LIST_CREATED_LIGHTS = 345
    RPR_CONTEXT_LIST_CREATED_SHAPES = 346
    RPR_CONTEXT_LIST_CREATED_POSTEFFECTS = 347
    RPR_CONTEXT_LIST_CREATED_HETEROVOLUMES = 348
    RPR_CONTEXT_LIST_CREATED_GRIDS = 349
    RPR_CONTEXT_LIST_CREATED_BUFFERS = 350
    RPR_CONTEXT_LIST_CREATED_IMAGES = 351
    RPR_CONTEXT_LIST_CREATED_FRAMEBUFFERS = 352
    RPR_CONTEXT_LIST_CREATED_SCENES = 353
    RPR_CONTEXT_LIST_CREATED_CURVES = 354
    RPR_CONTEXT_LIST_CREATED_MATERIALSYSTEM = 355
    RPR_CONTEXT_LIST_CREATED_COMPOSITE = 356
    RPR_CONTEXT_LIST_CREATED_LUT = 357
    RPR_CONTEXT_AA_ENABLED = 358
    RPR_CONTEXT_ACTIVE_PIXEL_COUNT = 359
    RPR_CONTEXT_TRACING_ENABLED = 360
    RPR_CONTEXT_TRACING_PATH = 361
    RPR_CONTEXT_TILE_RECT = 362
    RPR_CONTEXT_PLUGIN_VERSION = 363
    RPR_CONTEXT_RUSSIAN_ROULETTE_DEPTH = 364
    RPR_CONTEXT_SHADOW_CATCHER_BAKING = 365
    RPR_CONTEXT_RENDER_UPDATE_CALLBACK_FUNC = 366
    RPR_CONTEXT_RENDER_UPDATE_CALLBACK_DATA = 367
    RPR_CONTEXT_COMPILE_CALLBACK_FUNC = 1537
    RPR_CONTEXT_COMPILE_CALLBACK_DATA = 1538
    RPR_CONTEXT_TEXTURE_CACHE_PATH = 368
    RPR_CONTEXT_OCIO_CONFIG_PATH = 369
    RPR_CONTEXT_OCIO_RENDERING_COLOR_SPACE = 370
    RPR_CONTEXT_CONTOUR_USE_OBJECTID = 371
    RPR_CONTEXT_CONTOUR_USE_MATERIALID = 372
    RPR_CONTEXT_CONTOUR_USE_NORMAL = 373
    RPR_CONTEXT_CONTOUR_NORMAL_THRESHOLD = 374
    RPR_CONTEXT_CONTOUR_LINEWIDTH_OBJECTID = 375
    RPR_CONTEXT_CONTOUR_LINEWIDTH_MATERIALID = 376
    RPR_CONTEXT_CONTOUR_LINEWIDTH_NORMAL = 377
    RPR_CONTEXT_CONTOUR_ANTIALIASING = 378
    RPR_CONTEXT_CONTOUR_DEBUG_ENABLED = 383
    RPR_CONTEXT_GPUINTEGRATOR = 379
    RPR_CONTEXT_CPUINTEGRATOR = 380
    RPR_CONTEXT_BEAUTY_MOTION_BLUR = 381
    RPR_CONTEXT_CAUSTICS_REDUCTION = 382
    RPR_CONTEXT_GPU_MEMORY_LIMIT = 384
    RPR_CONTEXT_RENDER_LAYER_LIST = 385
    RPR_CONTEXT_WINDING_ORDER_CORRECTION = 386
    RPR_CONTEXT_DEEP_SUBPIXEL_MERGE_Z_THRESHOLD = 387
    RPR_CONTEXT_DEEP_GPU_ALLOCATION_LEVEL = 388
    RPR_CONTEXT_DEEP_COLOR_ENABLED = 389
    RPR_CONTEXT_NAME = 7829367
    RPR_CONTEXT_UNIQUE_ID = 7829368
    RPR_CONTEXT_CUSTOM_PTR = 7829369
end

@cenum rpr_camera_info::UInt32 begin
    RPR_CAMERA_TRANSFORM = 513
    RPR_CAMERA_FSTOP = 514
    RPR_CAMERA_APERTURE_BLADES = 515
    RPR_CAMERA_RESPONSE = 516
    RPR_CAMERA_EXPOSURE = 517
    RPR_CAMERA_FOCAL_LENGTH = 518
    RPR_CAMERA_SENSOR_SIZE = 519
    RPR_CAMERA_MODE = 520
    RPR_CAMERA_ORTHO_WIDTH = 521
    RPR_CAMERA_ORTHO_HEIGHT = 522
    RPR_CAMERA_FOCUS_DISTANCE = 523
    RPR_CAMERA_POSITION = 524
    RPR_CAMERA_LOOKAT = 525
    RPR_CAMERA_UP = 526
    RPR_CAMERA_FOCAL_TILT = 527
    RPR_CAMERA_LENS_SHIFT = 528
    RPR_CAMERA_IPD = 529
    RPR_CAMERA_TILT_CORRECTION = 530
    RPR_CAMERA_NEAR_PLANE = 531
    RPR_CAMERA_FAR_PLANE = 532
    RPR_CAMERA_LINEAR_MOTION = 533
    RPR_CAMERA_ANGULAR_MOTION = 534
    RPR_CAMERA_MOTION_TRANSFORMS_COUNT = 535
    RPR_CAMERA_MOTION_TRANSFORMS = 536
    RPR_CAMERA_NAME = 7829367
    RPR_CAMERA_UNIQUE_ID = 7829368
    RPR_CAMERA_CUSTOM_PTR = 7829369
end

@cenum rpr_image_info::UInt32 begin
    RPR_IMAGE_FORMAT = 769
    RPR_IMAGE_DESC = 770
    RPR_IMAGE_DATA = 771
    RPR_IMAGE_DATA_SIZEBYTE = 772
    RPR_IMAGE_WRAP = 773
    RPR_IMAGE_FILTER = 774
    RPR_IMAGE_GAMMA = 775
    RPR_IMAGE_MIPMAP_ENABLED = 776
    RPR_IMAGE_MIP_COUNT = 777
    RPR_IMAGE_GAMMA_FROM_FILE = 778
    RPR_IMAGE_UDIM = 779
    RPR_IMAGE_OCIO_COLORSPACE = 780
    RPR_IMAGE_INTERNAL_COMPRESSION = 781
    RPR_IMAGE_NAME = 7829367
    RPR_IMAGE_UNIQUE_ID = 7829368
    RPR_IMAGE_CUSTOM_PTR = 7829369
end

@cenum rpr_buffer_info::UInt32 begin
    RPR_BUFFER_DESC = 848
    RPR_BUFFER_DATA = 849
    RPR_BUFFER_NAME = 7829367
    RPR_BUFFER_UNIQUE_ID = 7829368
    RPR_BUFFER_CUSTOM_PTR = 7829369
end

@cenum rpr_shape_info::UInt32 begin
    RPR_SHAPE_TYPE = 1025
    RPR_SHAPE_VIDMEM_USAGE = 1026
    RPR_SHAPE_TRANSFORM = 1027
    RPR_SHAPE_MATERIAL = 1028
    RPR_SHAPE_LINEAR_MOTION = 1029
    RPR_SHAPE_ANGULAR_MOTION = 1030
    RPR_SHAPE_SHADOW_FLAG = 1032
    RPR_SHAPE_SUBDIVISION_FACTOR = 1033
    RPR_SHAPE_DISPLACEMENT_SCALE = 1034
    RPR_SHAPE_SHADOW_CATCHER_FLAG = 1038
    RPR_SHAPE_VOLUME_MATERIAL = 1039
    RPR_SHAPE_OBJECT_GROUP_ID = 1040
    RPR_SHAPE_SUBDIVISION_CREASEWEIGHT = 1041
    RPR_SHAPE_SUBDIVISION_BOUNDARYINTEROP = 1042
    RPR_SHAPE_DISPLACEMENT_MATERIAL = 1043
    RPR_SHAPE_MATERIALS_PER_FACE = 1045
    RPR_SHAPE_SCALE_MOTION = 1046
    RPR_SHAPE_HETERO_VOLUME = 1047
    RPR_SHAPE_LAYER_MASK = 1048
    RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG = 1036
    RPR_SHAPE_VISIBILITY_SHADOW = 1050
    RPR_SHAPE_VISIBILITY_REFLECTION = 1051
    RPR_SHAPE_VISIBILITY_REFRACTION = 1052
    RPR_SHAPE_VISIBILITY_TRANSPARENT = 1053
    RPR_SHAPE_VISIBILITY_DIFFUSE = 1054
    RPR_SHAPE_VISIBILITY_GLOSSY_REFLECTION = 1055
    RPR_SHAPE_VISIBILITY_GLOSSY_REFRACTION = 1056
    RPR_SHAPE_VISIBILITY_LIGHT = 1057
    RPR_SHAPE_LIGHT_GROUP_ID = 1058
    RPR_SHAPE_STATIC = 1059
    RPR_SHAPE_PER_VERTEX_VALUE0 = 1060
    RPR_SHAPE_PER_VERTEX_VALUE1 = 1061
    RPR_SHAPE_PER_VERTEX_VALUE2 = 1062
    RPR_SHAPE_PER_VERTEX_VALUE3 = 1063
    RPR_SHAPE_REFLECTION_CATCHER_FLAG = 1064
    RPR_SHAPE_OBJECT_ID = 1065
    RPR_SHAPE_SUBDIVISION_AUTO_RATIO_CAP = 1066
    RPR_SHAPE_MOTION_TRANSFORMS_COUNT = 1067
    RPR_SHAPE_MOTION_TRANSFORMS = 1068
    RPR_SHAPE_CONTOUR_IGNORE = 1069
    RPR_SHAPE_RENDER_LAYER_LIST = 1070
    RPR_SHAPE_NAME = 7829367
    RPR_SHAPE_UNIQUE_ID = 7829368
    RPR_SHAPE_CUSTOM_PTR = 7829369
end

@cenum rpr_mesh_info::UInt32 begin
    RPR_MESH_POLYGON_COUNT = 1281
    RPR_MESH_VERTEX_COUNT = 1282
    RPR_MESH_NORMAL_COUNT = 1283
    RPR_MESH_UV_COUNT = 1284
    RPR_MESH_VERTEX_ARRAY = 1285
    RPR_MESH_NORMAL_ARRAY = 1286
    RPR_MESH_UV_ARRAY = 1287
    RPR_MESH_VERTEX_INDEX_ARRAY = 1288
    RPR_MESH_NORMAL_INDEX_ARRAY = 1289
    RPR_MESH_UV_INDEX_ARRAY = 1290
    RPR_MESH_VERTEX_STRIDE = 1292
    RPR_MESH_NORMAL_STRIDE = 1293
    RPR_MESH_UV_STRIDE = 1294
    RPR_MESH_VERTEX_INDEX_STRIDE = 1295
    RPR_MESH_NORMAL_INDEX_STRIDE = 1296
    RPR_MESH_UV_INDEX_STRIDE = 1297
    RPR_MESH_NUM_FACE_VERTICES_ARRAY = 1298
    RPR_MESH_UV2_COUNT = 1299
    RPR_MESH_UV2_ARRAY = 1300
    RPR_MESH_UV2_INDEX_ARRAY = 1301
    RPR_MESH_UV2_STRIDE = 1302
    RPR_MESH_UV2_INDEX_STRIDE = 1303
    RPR_MESH_UV_DIM = 1304
    RPR_MESH_MOTION_DIMENSION = 1305
    RPR_MESH_VOLUME_FLAG = 1306
end

@cenum rpr_scene_info::UInt32 begin
    RPR_SCENE_SHAPE_COUNT = 1793
    RPR_SCENE_LIGHT_COUNT = 1794
    RPR_SCENE_SHAPE_LIST = 1796
    RPR_SCENE_LIGHT_LIST = 1797
    RPR_SCENE_CAMERA = 1798
    RPR_SCENE_CAMERA_RIGHT = 1799
    RPR_SCENE_BACKGROUND_IMAGE = 1800
    RPR_SCENE_AABB = 1805
    RPR_SCENE_HETEROVOLUME_LIST = 1806
    RPR_SCENE_HETEROVOLUME_COUNT = 1807
    RPR_SCENE_CURVE_LIST = 1808
    RPR_SCENE_CURVE_COUNT = 1809
    RPR_SCENE_ENVIRONMENT_LIGHT = 1810
    RPR_SCENE_NAME = 7829367
    RPR_SCENE_UNIQUE_ID = 7829368
    RPR_SCENE_CUSTOM_PTR = 7829369
end

@cenum rpr_lut_info::UInt32 begin
    RPR_LUT_FILENAME = 2128
    RPR_LUT_DATA = 2129
end

@cenum rpr_light_info::UInt32 begin
    RPR_LIGHT_TYPE = 2049
    RPR_LIGHT_TRANSFORM = 2051
    RPR_LIGHT_GROUP_ID = 2053
    RPR_LIGHT_RENDER_LAYER_LIST = 2054
    RPR_LIGHT_NAME = 7829367
    RPR_LIGHT_UNIQUE_ID = 7829368
    RPR_LIGHT_CUSTOM_PTR = 7829369
    RPR_POINT_LIGHT_RADIANT_POWER = 2052
    RPR_DIRECTIONAL_LIGHT_RADIANT_POWER = 2056
    RPR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE = 2058
    RPR_SPOT_LIGHT_RADIANT_POWER = 2059
    RPR_SPOT_LIGHT_CONE_SHAPE = 2060
    RPR_SPOT_LIGHT_IMAGE = 2061
    RPR_ENVIRONMENT_LIGHT_IMAGE = 2063
    RPR_ENVIRONMENT_LIGHT_INTENSITY_SCALE = 2064
    RPR_ENVIRONMENT_LIGHT_PORTAL_LIST = 2072
    RPR_ENVIRONMENT_LIGHT_PORTAL_COUNT = 2073
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION = 2074
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION = 2075
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY = 2076
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND = 2077
    RPR_ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE = 2078
    RPR_SKY_LIGHT_TURBIDITY = 2066
    RPR_SKY_LIGHT_ALBEDO = 2067
    RPR_SKY_LIGHT_SCALE = 2068
    RPR_SKY_LIGHT_DIRECTION = 2069
    RPR_SKY_LIGHT_PORTAL_LIST = 2080
    RPR_SKY_LIGHT_PORTAL_COUNT = 2081
    RPR_IES_LIGHT_RADIANT_POWER = 2070
    RPR_IES_LIGHT_IMAGE_DESC = 2071
    RPR_SPHERE_LIGHT_RADIANT_POWER = 2082
    RPR_SPHERE_LIGHT_RADIUS = 2084
    RPR_DISK_LIGHT_RADIANT_POWER = 2083
    RPR_DISK_LIGHT_RADIUS = 2085
    RPR_DISK_LIGHT_ANGLE = 2086
end

@cenum rpr_parameter_info::UInt32 begin
    RPR_PARAMETER_NAME = 4609
    RPR_PARAMETER_TYPE = 4611
    RPR_PARAMETER_DESCRIPTION = 4612
    RPR_PARAMETER_VALUE = 4613
end

@cenum rpr_framebuffer_info::UInt32 begin
    RPR_FRAMEBUFFER_FORMAT = 4865
    RPR_FRAMEBUFFER_DESC = 4866
    RPR_FRAMEBUFFER_DATA = 4867
    RPR_FRAMEBUFFER_GL_TARGET = 4868
    RPR_FRAMEBUFFER_GL_MIPLEVEL = 4869
    RPR_FRAMEBUFFER_GL_TEXTURE = 4870
    RPR_FRAMEBUFFER_LPE = 4871
    RPR_FRAMEBUFFER_NAME = 7829367
    RPR_FRAMEBUFFER_UNIQUE_ID = 7829368
    RPR_FRAMEBUFFER_CUSTOM_PTR = 7829369
end

@cenum rpr_component_type::UInt32 begin
    RPR_COMPONENT_TYPE_UINT8 = 1
    RPR_COMPONENT_TYPE_FLOAT16 = 2
    RPR_COMPONENT_TYPE_FLOAT32 = 3
    RPR_COMPONENT_TYPE_UNKNOWN = 4
    RPR_COMPONENT_TYPE_DEEP = 5
end

@cenum rpr_buffer_element_type::UInt32 begin
    RPR_BUFFER_ELEMENT_TYPE_INT32 = 1
    RPR_BUFFER_ELEMENT_TYPE_FLOAT32 = 2
end

@cenum rpr_render_mode::UInt32 begin
    RPR_RENDER_MODE_GLOBAL_ILLUMINATION = 1
    RPR_RENDER_MODE_DIRECT_ILLUMINATION = 2
    RPR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW = 3
    RPR_RENDER_MODE_WIREFRAME = 4
    RPR_RENDER_MODE_MATERIAL_INDEX = 5
    RPR_RENDER_MODE_POSITION = 6
    RPR_RENDER_MODE_NORMAL = 7
    RPR_RENDER_MODE_TEXCOORD = 8
    RPR_RENDER_MODE_AMBIENT_OCCLUSION = 9
    RPR_RENDER_MODE_DIFFUSE = 10
end

@cenum rpr_camera_mode::UInt32 begin
    RPR_CAMERA_MODE_PERSPECTIVE = 1
    RPR_CAMERA_MODE_ORTHOGRAPHIC = 2
    RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360 = 3
    RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO = 4
    RPR_CAMERA_MODE_CUBEMAP = 5
    RPR_CAMERA_MODE_CUBEMAP_STEREO = 6
    RPR_CAMERA_MODE_FISHEYE = 7
end

@cenum rpr_tonemapping_operator::UInt32 begin
    RPR_TONEMAPPING_OPERATOR_NONE = 0
    RPR_TONEMAPPING_OPERATOR_LINEAR = 1
    RPR_TONEMAPPING_OPERATOR_PHOTOLINEAR = 2
    RPR_TONEMAPPING_OPERATOR_AUTOLINEAR = 3
    RPR_TONEMAPPING_OPERATOR_MAXWHITE = 4
    RPR_TONEMAPPING_OPERATOR_REINHARD02 = 5
    RPR_TONEMAPPING_OPERATOR_EXPONENTIAL = 6
end

@cenum rpr_volume_type::UInt32 begin
    RPR_VOLUME_TYPE_NONE = 65535
    RPR_VOLUME_TYPE_HOMOGENEOUS = 0
    RPR_VOLUME_TYPE_HETEROGENEOUS = 1
end

@cenum rpr_material_system_info::UInt32 begin
    RPR_MATERIAL_SYSTEM_NODE_LIST = 4352
end

@cenum rpr_material_node_info::UInt32 begin
    RPR_MATERIAL_NODE_TYPE = 4353
    RPR_MATERIAL_NODE_SYSTEM = 4354
    RPR_MATERIAL_NODE_INPUT_COUNT = 4355
    RPR_MATERIAL_NODE_ID = 4356
    RPR_MATERIAL_NODE_NAME = 7829367
    RPR_MATERIAL_NODE_UNIQUE_ID = 7829368
    RPR_MATERIAL_CUSTOM_PTR = 7829369
end

@cenum rpr_material_node_input_info::UInt32 begin
    RPR_MATERIAL_NODE_INPUT_NAME = 4355
    RPR_MATERIAL_NODE_INPUT_DESCRIPTION = 4357
    RPR_MATERIAL_NODE_INPUT_VALUE = 4358
    RPR_MATERIAL_NODE_INPUT_TYPE = 4359
end

@cenum rpr_material_node_type::UInt32 begin
    RPR_MATERIAL_NODE_DIFFUSE = 1
    RPR_MATERIAL_NODE_MICROFACET = 2
    RPR_MATERIAL_NODE_REFLECTION = 3
    RPR_MATERIAL_NODE_REFRACTION = 4
    RPR_MATERIAL_NODE_MICROFACET_REFRACTION = 5
    RPR_MATERIAL_NODE_TRANSPARENT = 6
    RPR_MATERIAL_NODE_EMISSIVE = 7
    RPR_MATERIAL_NODE_WARD = 8
    RPR_MATERIAL_NODE_ADD = 9
    RPR_MATERIAL_NODE_BLEND = 10
    RPR_MATERIAL_NODE_ARITHMETIC = 11
    RPR_MATERIAL_NODE_FRESNEL = 12
    RPR_MATERIAL_NODE_NORMAL_MAP = 13
    RPR_MATERIAL_NODE_IMAGE_TEXTURE = 14
    RPR_MATERIAL_NODE_NOISE2D_TEXTURE = 15
    RPR_MATERIAL_NODE_DOT_TEXTURE = 16
    RPR_MATERIAL_NODE_GRADIENT_TEXTURE = 17
    RPR_MATERIAL_NODE_CHECKER_TEXTURE = 18
    RPR_MATERIAL_NODE_CONSTANT_TEXTURE = 19
    RPR_MATERIAL_NODE_INPUT_LOOKUP = 20
    RPR_MATERIAL_NODE_BLEND_VALUE = 22
    RPR_MATERIAL_NODE_PASSTHROUGH = 23
    RPR_MATERIAL_NODE_ORENNAYAR = 24
    RPR_MATERIAL_NODE_FRESNEL_SCHLICK = 25
    RPR_MATERIAL_NODE_DIFFUSE_REFRACTION = 27
    RPR_MATERIAL_NODE_BUMP_MAP = 28
    RPR_MATERIAL_NODE_VOLUME = 29
    RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION = 30
    RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION = 31
    RPR_MATERIAL_NODE_TWOSIDED = 32
    RPR_MATERIAL_NODE_UV_PROCEDURAL = 33
    RPR_MATERIAL_NODE_MICROFACET_BECKMANN = 34
    RPR_MATERIAL_NODE_PHONG = 35
    RPR_MATERIAL_NODE_BUFFER_SAMPLER = 36
    RPR_MATERIAL_NODE_UV_TRIPLANAR = 37
    RPR_MATERIAL_NODE_AO_MAP = 38
    RPR_MATERIAL_NODE_USER_TEXTURE_0 = 39
    RPR_MATERIAL_NODE_USER_TEXTURE_1 = 40
    RPR_MATERIAL_NODE_USER_TEXTURE_2 = 41
    RPR_MATERIAL_NODE_USER_TEXTURE_3 = 42
    RPR_MATERIAL_NODE_UBERV2 = 43
    RPR_MATERIAL_NODE_TRANSFORM = 44
    RPR_MATERIAL_NODE_RGB_TO_HSV = 45
    RPR_MATERIAL_NODE_HSV_TO_RGB = 46
    RPR_MATERIAL_NODE_USER_TEXTURE = 47
    RPR_MATERIAL_NODE_TOON_CLOSURE = 48
    RPR_MATERIAL_NODE_TOON_RAMP = 49
    RPR_MATERIAL_NODE_VORONOI_TEXTURE = 50
    RPR_MATERIAL_NODE_GRID_SAMPLER = 51
    RPR_MATERIAL_NODE_BLACKBODY = 52
    RPR_MATERIAL_NODE_MATX_DIFFUSE_BRDF = 4096
    RPR_MATERIAL_NODE_MATX_DIELECTRIC_BRDF = 4097
    RPR_MATERIAL_NODE_MATX_GENERALIZED_SCHLICK_BRDF = 4098
    RPR_MATERIAL_NODE_MATX_NOISE3D = 4099
    RPR_MATERIAL_NODE_MATX_TANGENT = 4100
    RPR_MATERIAL_NODE_MATX_NORMAL = 4101
    RPR_MATERIAL_NODE_MATX_POSITION = 4102
    RPR_MATERIAL_NODE_MATX_ROUGHNESS_ANISOTROPY = 4103
    RPR_MATERIAL_NODE_MATX_ROTATE3D = 4104
    RPR_MATERIAL_NODE_MATX_NORMALIZE = 4105
    RPR_MATERIAL_NODE_MATX_IFGREATER = 4106
    RPR_MATERIAL_NODE_MATX_SHEEN_BRDF = 4107
    RPR_MATERIAL_NODE_MATX_DIFFUSE_BTDF = 4108
    RPR_MATERIAL_NODE_MATX_CONVERT = 4109
    RPR_MATERIAL_NODE_MATX_SUBSURFACE_BRDF = 4110
    RPR_MATERIAL_NODE_MATX_DIELECTRIC_BTDF = 4111
    RPR_MATERIAL_NODE_MATX_CONDUCTOR_BRDF = 4112
    RPR_MATERIAL_NODE_MATX_FRESNEL = 4113
    RPR_MATERIAL_NODE_MATX_LUMINANCE = 4114
    RPR_MATERIAL_NODE_MATX_FRACTAL3D = 4115
    RPR_MATERIAL_NODE_MATX_MIX = 4116
    RPR_MATERIAL_NODE_MATX = 4117
end

@cenum rpr_material_node_input::UInt32 begin
    RPR_MATERIAL_INPUT_COLOR = 0
    RPR_MATERIAL_INPUT_COLOR0 = 1
    RPR_MATERIAL_INPUT_COLOR1 = 2
    RPR_MATERIAL_INPUT_NORMAL = 3
    RPR_MATERIAL_INPUT_UV = 4
    RPR_MATERIAL_INPUT_DATA = 5
    RPR_MATERIAL_INPUT_ROUGHNESS = 6
    RPR_MATERIAL_INPUT_IOR = 7
    RPR_MATERIAL_INPUT_ROUGHNESS_X = 8
    RPR_MATERIAL_INPUT_ROUGHNESS_Y = 9
    RPR_MATERIAL_INPUT_ROTATION = 10
    RPR_MATERIAL_INPUT_WEIGHT = 11
    RPR_MATERIAL_INPUT_OP = 12
    RPR_MATERIAL_INPUT_INVEC = 13
    RPR_MATERIAL_INPUT_UV_SCALE = 14
    RPR_MATERIAL_INPUT_VALUE = 15
    RPR_MATERIAL_INPUT_REFLECTANCE = 16
    RPR_MATERIAL_INPUT_SCALE = 17
    RPR_MATERIAL_INPUT_SCATTERING = 18
    RPR_MATERIAL_INPUT_ABSORBTION = 19
    RPR_MATERIAL_INPUT_EMISSION = 20
    RPR_MATERIAL_INPUT_G = 21
    RPR_MATERIAL_INPUT_MULTISCATTER = 22
    RPR_MATERIAL_INPUT_COLOR2 = 23
    RPR_MATERIAL_INPUT_COLOR3 = 24
    RPR_MATERIAL_INPUT_ANISOTROPIC = 25
    RPR_MATERIAL_INPUT_FRONTFACE = 26
    RPR_MATERIAL_INPUT_BACKFACE = 27
    RPR_MATERIAL_INPUT_ORIGIN = 28
    RPR_MATERIAL_INPUT_ZAXIS = 29
    RPR_MATERIAL_INPUT_XAXIS = 30
    RPR_MATERIAL_INPUT_THRESHOLD = 31
    RPR_MATERIAL_INPUT_OFFSET = 32
    RPR_MATERIAL_INPUT_UV_TYPE = 33
    RPR_MATERIAL_INPUT_RADIUS = 34
    RPR_MATERIAL_INPUT_SIDE = 35
    RPR_MATERIAL_INPUT_CAUSTICS = 36
    RPR_MATERIAL_INPUT_TRANSMISSION_COLOR = 37
    RPR_MATERIAL_INPUT_THICKNESS = 38
    RPR_MATERIAL_INPUT_0 = 39
    RPR_MATERIAL_INPUT_1 = 40
    RPR_MATERIAL_INPUT_2 = 41
    RPR_MATERIAL_INPUT_3 = 42
    RPR_MATERIAL_INPUT_4 = 43
    RPR_MATERIAL_INPUT_SCHLICK_APPROXIMATION = 44
    RPR_MATERIAL_INPUT_APPLYSURFACE = 45
    RPR_MATERIAL_INPUT_TANGENT = 46
    RPR_MATERIAL_INPUT_DISTRIBUTION = 47
    RPR_MATERIAL_INPUT_BASE = 48
    RPR_MATERIAL_INPUT_TINT = 49
    RPR_MATERIAL_INPUT_EXPONENT = 50
    RPR_MATERIAL_INPUT_AMPLITUDE = 51
    RPR_MATERIAL_INPUT_PIVOT = 52
    RPR_MATERIAL_INPUT_POSITION = 53
    RPR_MATERIAL_INPUT_AMOUNT = 54
    RPR_MATERIAL_INPUT_AXIS = 55
    RPR_MATERIAL_INPUT_LUMACOEFF = 56
    RPR_MATERIAL_INPUT_REFLECTIVITY = 57
    RPR_MATERIAL_INPUT_EDGE_COLOR = 58
    RPR_MATERIAL_INPUT_VIEW_DIRECTION = 59
    RPR_MATERIAL_INPUT_INTERIOR = 60
    RPR_MATERIAL_INPUT_OCTAVES = 61
    RPR_MATERIAL_INPUT_LACUNARITY = 62
    RPR_MATERIAL_INPUT_DIMINISH = 63
    RPR_MATERIAL_INPUT_WRAP_U = 64
    RPR_MATERIAL_INPUT_WRAP_V = 65
    RPR_MATERIAL_INPUT_WRAP_W = 66
    RPR_MATERIAL_INPUT_5 = 67
    RPR_MATERIAL_INPUT_6 = 68
    RPR_MATERIAL_INPUT_7 = 69
    RPR_MATERIAL_INPUT_8 = 70
    RPR_MATERIAL_INPUT_9 = 71
    RPR_MATERIAL_INPUT_10 = 72
    RPR_MATERIAL_INPUT_11 = 73
    RPR_MATERIAL_INPUT_12 = 74
    RPR_MATERIAL_INPUT_13 = 75
    RPR_MATERIAL_INPUT_14 = 76
    RPR_MATERIAL_INPUT_15 = 77
    RPR_MATERIAL_INPUT_DIFFUSE_RAMP = 78
    RPR_MATERIAL_INPUT_SHADOW = 79
    RPR_MATERIAL_INPUT_MID = 80
    RPR_MATERIAL_INPUT_HIGHLIGHT = 81
    RPR_MATERIAL_INPUT_POSITION1 = 82
    RPR_MATERIAL_INPUT_POSITION2 = 83
    RPR_MATERIAL_INPUT_RANGE1 = 84
    RPR_MATERIAL_INPUT_RANGE2 = 85
    RPR_MATERIAL_INPUT_INTERPOLATION = 86
    RPR_MATERIAL_INPUT_RANDOMNESS = 87
    RPR_MATERIAL_INPUT_DIMENSION = 88
    RPR_MATERIAL_INPUT_OUTTYPE = 89
    RPR_MATERIAL_INPUT_DENSITY = 90
    RPR_MATERIAL_INPUT_DENSITYGRID = 91
    RPR_MATERIAL_INPUT_DISPLACEMENT = 92
    RPR_MATERIAL_INPUT_TEMPERATURE = 93
    RPR_MATERIAL_INPUT_KELVIN = 94
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_COLOR = 2320
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_WEIGHT = 2343
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_ROUGHNESS = 2321
    RPR_MATERIAL_INPUT_UBER_DIFFUSE_NORMAL = 2322
    RPR_MATERIAL_INPUT_UBER_REFLECTION_COLOR = 2323
    RPR_MATERIAL_INPUT_UBER_REFLECTION_WEIGHT = 2344
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ROUGHNESS = 2324
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY = 2325
    RPR_MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY_ROTATION = 2326
    RPR_MATERIAL_INPUT_UBER_REFLECTION_MODE = 2327
    RPR_MATERIAL_INPUT_UBER_REFLECTION_IOR = 2328
    RPR_MATERIAL_INPUT_UBER_REFLECTION_METALNESS = 2329
    RPR_MATERIAL_INPUT_UBER_REFLECTION_NORMAL = 2345
    RPR_MATERIAL_INPUT_UBER_REFLECTION_DIELECTRIC_REFLECTANCE = 2366
    RPR_MATERIAL_INPUT_UBER_REFRACTION_COLOR = 2330
    RPR_MATERIAL_INPUT_UBER_REFRACTION_WEIGHT = 2346
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ROUGHNESS = 2331
    RPR_MATERIAL_INPUT_UBER_REFRACTION_IOR = 2332
    RPR_MATERIAL_INPUT_UBER_REFRACTION_NORMAL = 2347
    RPR_MATERIAL_INPUT_UBER_REFRACTION_THIN_SURFACE = 2333
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_COLOR = 2348
    RPR_MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_DISTANCE = 2349
    RPR_MATERIAL_INPUT_UBER_REFRACTION_CAUSTICS = 2350
    RPR_MATERIAL_INPUT_UBER_COATING_COLOR = 2334
    RPR_MATERIAL_INPUT_UBER_COATING_WEIGHT = 2351
    RPR_MATERIAL_INPUT_UBER_COATING_ROUGHNESS = 2335
    RPR_MATERIAL_INPUT_UBER_COATING_MODE = 2336
    RPR_MATERIAL_INPUT_UBER_COATING_IOR = 2337
    RPR_MATERIAL_INPUT_UBER_COATING_METALNESS = 2338
    RPR_MATERIAL_INPUT_UBER_COATING_NORMAL = 2339
    RPR_MATERIAL_INPUT_UBER_COATING_TRANSMISSION_COLOR = 2352
    RPR_MATERIAL_INPUT_UBER_COATING_THICKNESS = 2353
    RPR_MATERIAL_INPUT_UBER_SHEEN = 2354
    RPR_MATERIAL_INPUT_UBER_SHEEN_TINT = 2355
    RPR_MATERIAL_INPUT_UBER_SHEEN_WEIGHT = 2356
    RPR_MATERIAL_INPUT_UBER_EMISSION_COLOR = 2340
    RPR_MATERIAL_INPUT_UBER_EMISSION_WEIGHT = 2341
    RPR_MATERIAL_INPUT_UBER_EMISSION_MODE = 2357
    RPR_MATERIAL_INPUT_UBER_TRANSPARENCY = 2342
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_COLOR = 2359
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_DISTANCE = 2360
    RPR_MATERIAL_INPUT_UBER_SSS_SCATTER_DIRECTION = 2361
    RPR_MATERIAL_INPUT_UBER_SSS_WEIGHT = 2362
    RPR_MATERIAL_INPUT_UBER_SSS_MULTISCATTER = 2363
    RPR_MATERIAL_INPUT_UBER_BACKSCATTER_WEIGHT = 2364
    RPR_MATERIAL_INPUT_UBER_BACKSCATTER_COLOR = 2365
    RPR_MATERIAL_INPUT_ADDRESS = 2366
    RPR_MATERIAL_INPUT_TYPE = 2367
    RPR_MATERIAL_INPUT_UBER_FRESNEL_SCHLICK_APPROXIMATION = 44
end

@cenum rpr_material_input_raster::UInt32 begin
    RPR_MATERIAL_INPUT_RASTER_METALLIC = 2305
    RPR_MATERIAL_INPUT_RASTER_ROUGHNESS = 2306
    RPR_MATERIAL_INPUT_RASTER_SUBSURFACE = 2307
    RPR_MATERIAL_INPUT_RASTER_ANISOTROPIC = 2308
    RPR_MATERIAL_INPUT_RASTER_SPECULAR = 2309
    RPR_MATERIAL_INPUT_RASTER_SPECULARTINT = 2310
    RPR_MATERIAL_INPUT_RASTER_SHEEN = 2311
    RPR_MATERIAL_INPUT_RASTER_SHEENTINT = 2312
    RPR_MATERIAL_INPUT_RASTER_CLEARCOAT = 2314
    RPR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS = 2315
    RPR_MATERIAL_INPUT_RASTER_COLOR = 2316
    RPR_MATERIAL_INPUT_RASTER_NORMAL = 2317
end

@cenum rpr_interpolation_mode::UInt32 begin
    RPR_INTERPOLATION_MODE_NONE = 0
    RPR_INTERPOLATION_MODE_LINEAR = 1
end

@cenum rpr_ubermaterial_ior_mode::UInt32 begin
    RPR_UBER_MATERIAL_IOR_MODE_PBR = 1
    RPR_UBER_MATERIAL_IOR_MODE_METALNESS = 2
end

@cenum rpr_ubermaterial_emission_mode::UInt32 begin
    RPR_UBER_MATERIAL_EMISSION_MODE_SINGLESIDED = 1
    RPR_UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED = 2
end

@cenum rpr_material_node_arithmetic_operation::UInt32 begin
    RPR_MATERIAL_NODE_OP_ADD = 0
    RPR_MATERIAL_NODE_OP_SUB = 1
    RPR_MATERIAL_NODE_OP_MUL = 2
    RPR_MATERIAL_NODE_OP_DIV = 3
    RPR_MATERIAL_NODE_OP_SIN = 4
    RPR_MATERIAL_NODE_OP_COS = 5
    RPR_MATERIAL_NODE_OP_TAN = 6
    RPR_MATERIAL_NODE_OP_SELECT_X = 7
    RPR_MATERIAL_NODE_OP_SELECT_Y = 8
    RPR_MATERIAL_NODE_OP_SELECT_Z = 9
    RPR_MATERIAL_NODE_OP_COMBINE = 10
    RPR_MATERIAL_NODE_OP_DOT3 = 11
    RPR_MATERIAL_NODE_OP_CROSS3 = 12
    RPR_MATERIAL_NODE_OP_LENGTH3 = 13
    RPR_MATERIAL_NODE_OP_NORMALIZE3 = 14
    RPR_MATERIAL_NODE_OP_POW = 15
    RPR_MATERIAL_NODE_OP_ACOS = 16
    RPR_MATERIAL_NODE_OP_ASIN = 17
    RPR_MATERIAL_NODE_OP_ATAN = 18
    RPR_MATERIAL_NODE_OP_AVERAGE_XYZ = 19
    RPR_MATERIAL_NODE_OP_AVERAGE = 20
    RPR_MATERIAL_NODE_OP_MIN = 21
    RPR_MATERIAL_NODE_OP_MAX = 22
    RPR_MATERIAL_NODE_OP_FLOOR = 23
    RPR_MATERIAL_NODE_OP_MOD = 24
    RPR_MATERIAL_NODE_OP_ABS = 25
    RPR_MATERIAL_NODE_OP_SHUFFLE_YZWX = 26
    RPR_MATERIAL_NODE_OP_SHUFFLE_ZWXY = 27
    RPR_MATERIAL_NODE_OP_SHUFFLE_WXYZ = 28
    RPR_MATERIAL_NODE_OP_MAT_MUL = 29
    RPR_MATERIAL_NODE_OP_SELECT_W = 30
    RPR_MATERIAL_NODE_OP_DOT4 = 31
    RPR_MATERIAL_NODE_OP_LOG = 32
    RPR_MATERIAL_NODE_OP_LOWER_OR_EQUAL = 33
    RPR_MATERIAL_NODE_OP_LOWER = 34
    RPR_MATERIAL_NODE_OP_GREATER_OR_EQUAL = 35
    RPR_MATERIAL_NODE_OP_GREATER = 36
    RPR_MATERIAL_NODE_OP_EQUAL = 37
    RPR_MATERIAL_NODE_OP_NOT_EQUAL = 38
    RPR_MATERIAL_NODE_OP_AND = 39
    RPR_MATERIAL_NODE_OP_OR = 40
    RPR_MATERIAL_NODE_OP_TERNARY = 41
end

@cenum rpr_material_node_lookup_value::UInt32 begin
    RPR_MATERIAL_NODE_LOOKUP_UV = 0
    RPR_MATERIAL_NODE_LOOKUP_N = 1
    RPR_MATERIAL_NODE_LOOKUP_P = 2
    RPR_MATERIAL_NODE_LOOKUP_INVEC = 3
    RPR_MATERIAL_NODE_LOOKUP_OUTVEC = 4
    RPR_MATERIAL_NODE_LOOKUP_UV1 = 5
    RPR_MATERIAL_NODE_LOOKUP_P_LOCAL = 6
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE0 = 7
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE1 = 8
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE2 = 9
    RPR_MATERIAL_NODE_LOOKUP_VERTEX_VALUE3 = 10
    RPR_MATERIAL_NODE_LOOKUP_SHAPE_RANDOM_COLOR = 11
    RPR_MATERIAL_NODE_LOOKUP_OBJECT_ID = 12
    RPR_MATERIAL_NODE_LOOKUP_PRIMITIVE_RANDOM_COLOR = 13
end

@cenum rpr_material_node_uvtype_value::UInt32 begin
    RPR_MATERIAL_NODE_UVTYPE_PLANAR = 0
    RPR_MATERIAL_NODE_UVTYPE_CYLINDICAL = 1
    RPR_MATERIAL_NODE_UVTYPE_SPHERICAL = 2
    RPR_MATERIAL_NODE_UVTYPE_PROJECT = 3
end

@cenum rpr_material_node_transform_op::UInt32 begin
    RPR_MATERIAL_NODE_TRANSFORM_ROTATE_LOCAL_TO_WORLD = 1
end

@cenum rpr_post_effect_info::UInt32 begin
    RPR_POST_EFFECT_TYPE = 0
    RPR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE = 4
    RPR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE = 5
    RPR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE = 6
    RPR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST = 7
    RPR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP = 8
    RPR_POST_EFFECT_BLOOM_RADIUS = 9
    RPR_POST_EFFECT_BLOOM_THRESHOLD = 10
    RPR_POST_EFFECT_BLOOM_WEIGHT = 11
    RPR_POST_EFFECT_NAME = 7829367
    RPR_POST_EFFECT_UNIQUE_ID = 7829368
    RPR_POST_EFFECT_CUSTOM_PTR = 7829369
end

@cenum rpr_aov::UInt32 begin
    RPR_AOV_COLOR = 0
    RPR_AOV_OPACITY = 1
    RPR_AOV_WORLD_COORDINATE = 2
    RPR_AOV_UV = 3
    RPR_AOV_MATERIAL_ID = 4
    RPR_AOV_GEOMETRIC_NORMAL = 5
    RPR_AOV_SHADING_NORMAL = 6
    RPR_AOV_DEPTH = 7
    RPR_AOV_OBJECT_ID = 8
    RPR_AOV_OBJECT_GROUP_ID = 9
    RPR_AOV_SHADOW_CATCHER = 10
    RPR_AOV_BACKGROUND = 11
    RPR_AOV_EMISSION = 12
    RPR_AOV_VELOCITY = 13
    RPR_AOV_DIRECT_ILLUMINATION = 14
    RPR_AOV_INDIRECT_ILLUMINATION = 15
    RPR_AOV_AO = 16
    RPR_AOV_DIRECT_DIFFUSE = 17
    RPR_AOV_DIRECT_REFLECT = 18
    RPR_AOV_INDIRECT_DIFFUSE = 19
    RPR_AOV_INDIRECT_REFLECT = 20
    RPR_AOV_REFRACT = 21
    RPR_AOV_VOLUME = 22
    RPR_AOV_LIGHT_GROUP0 = 23
    RPR_AOV_LIGHT_GROUP1 = 24
    RPR_AOV_LIGHT_GROUP2 = 25
    RPR_AOV_LIGHT_GROUP3 = 26
    RPR_AOV_DIFFUSE_ALBEDO = 27
    RPR_AOV_VARIANCE = 28
    RPR_AOV_VIEW_SHADING_NORMAL = 29
    RPR_AOV_REFLECTION_CATCHER = 30
    RPR_AOV_COLOR_RIGHT = 31
    RPR_AOV_LPE_0 = 32
    RPR_AOV_LPE_1 = 33
    RPR_AOV_LPE_2 = 34
    RPR_AOV_LPE_3 = 35
    RPR_AOV_LPE_4 = 36
    RPR_AOV_LPE_5 = 37
    RPR_AOV_LPE_6 = 38
    RPR_AOV_LPE_7 = 39
    RPR_AOV_LPE_8 = 40
    RPR_AOV_CAMERA_NORMAL = 41
    RPR_AOV_CRYPTOMATTE_MAT0 = 48
    RPR_AOV_CRYPTOMATTE_MAT1 = 49
    RPR_AOV_CRYPTOMATTE_MAT2 = 50
    RPR_AOV_CRYPTOMATTE_OBJ0 = 56
    RPR_AOV_CRYPTOMATTE_OBJ1 = 57
    RPR_AOV_CRYPTOMATTE_OBJ2 = 58
    RPR_AOV_DEEP_COLOR = 64
    RPR_AOV_LIGHT_GROUP4 = 80
    RPR_AOV_LIGHT_GROUP5 = 81
    RPR_AOV_LIGHT_GROUP6 = 82
    RPR_AOV_LIGHT_GROUP7 = 83
    RPR_AOV_LIGHT_GROUP8 = 84
    RPR_AOV_LIGHT_GROUP9 = 85
    RPR_AOV_LIGHT_GROUP10 = 86
    RPR_AOV_LIGHT_GROUP11 = 87
    RPR_AOV_LIGHT_GROUP12 = 88
    RPR_AOV_LIGHT_GROUP13 = 89
    RPR_AOV_LIGHT_GROUP14 = 90
    RPR_AOV_LIGHT_GROUP15 = 91
end

@cenum rpr_post_effect_type::UInt32 begin
    RPR_POST_EFFECT_TONE_MAP = 0
    RPR_POST_EFFECT_WHITE_BALANCE = 1
    RPR_POST_EFFECT_SIMPLE_TONEMAP = 2
    RPR_POST_EFFECT_NORMALIZATION = 3
    RPR_POST_EFFECT_GAMMA_CORRECTION = 4
    RPR_POST_EFFECT_BLOOM = 5
end

@cenum rpr_color_space::UInt32 begin
    RPR_COLOR_SPACE_SRGB = 1
    RPR_COLOR_SPACE_ADOBE_RGB = 2
    RPR_COLOR_SPACE_REC2020 = 3
    RPR_COLOR_SPACE_DCIP3 = 4
end

@cenum rpr_material_node_input_type::UInt32 begin
    RPR_MATERIAL_NODE_INPUT_TYPE_FLOAT4 = 1
    RPR_MATERIAL_NODE_INPUT_TYPE_UINT = 2
    RPR_MATERIAL_NODE_INPUT_TYPE_NODE = 3
    RPR_MATERIAL_NODE_INPUT_TYPE_IMAGE = 4
    RPR_MATERIAL_NODE_INPUT_TYPE_BUFFER = 5
    RPR_MATERIAL_NODE_INPUT_TYPE_GRID = 6
end

@cenum rpr_subdiv_boundary_interfop_type::UInt32 begin
    RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER = 1
    RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY = 2
end

@cenum rpr_image_wrap_type::UInt32 begin
    RPR_IMAGE_WRAP_TYPE_REPEAT = 1
    RPR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT = 2
    RPR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE = 3
    RPR_IMAGE_WRAP_TYPE_CLAMP_ZERO = 5
    RPR_IMAGE_WRAP_TYPE_CLAMP_ONE = 6
end

@cenum rpr_voronoi_out_type::UInt32 begin
    RPR_VORONOI_OUT_TYPE_DISTANCE = 1
    RPR_VORONOI_OUT_TYPE_COLOR = 2
    RPR_VORONOI_OUT_TYPE_POSITION = 3
end

@cenum rpr_image_filter_type::UInt32 begin
    RPR_IMAGE_FILTER_TYPE_NEAREST = 1
    RPR_IMAGE_FILTER_TYPE_LINEAR = 2
end

@cenum rpr_composite_info::UInt32 begin
    RPR_COMPOSITE_TYPE = 1
    RPR_COMPOSITE_FRAMEBUFFER_INPUT_FB = 2
    RPR_COMPOSITE_NORMALIZE_INPUT_COLOR = 3
    RPR_COMPOSITE_NORMALIZE_INPUT_AOVTYPE = 4
    RPR_COMPOSITE_CONSTANT_INPUT_VALUE = 5
    RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR0 = 6
    RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR1 = 7
    RPR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT = 8
    RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR0 = 9
    RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR1 = 10
    RPR_COMPOSITE_ARITHMETIC_INPUT_OP = 11
    RPR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR = 12
    RPR_COMPOSITE_LUT_INPUT_LUT = 13
    RPR_COMPOSITE_LUT_INPUT_COLOR = 14
    RPR_COMPOSITE_NAME = 7829367
    RPR_COMPOSITE_UNIQUE_ID = 7829368
    RPR_COMPOSITE_CUSTOM_PTR = 7829369
end

@cenum rpr_composite_type::UInt32 begin
    RPR_COMPOSITE_ARITHMETIC = 1
    RPR_COMPOSITE_LERP_VALUE = 2
    RPR_COMPOSITE_INVERSE = 3
    RPR_COMPOSITE_NORMALIZE = 4
    RPR_COMPOSITE_GAMMA_CORRECTION = 5
    RPR_COMPOSITE_EXPOSURE = 6
    RPR_COMPOSITE_CONTRAST = 7
    RPR_COMPOSITE_SIDE_BY_SIDE = 8
    RPR_COMPOSITE_TONEMAP_ACES = 9
    RPR_COMPOSITE_TONEMAP_REINHARD = 10
    RPR_COMPOSITE_TONEMAP_LINEAR = 11
    RPR_COMPOSITE_FRAMEBUFFER = 12
    RPR_COMPOSITE_CONSTANT = 13
    RPR_COMPOSITE_LUT = 14
end

@cenum rpr_grid_parameter::UInt32 begin
    RPR_GRID_SIZE_X = 2352
    RPR_GRID_SIZE_Y = 2353
    RPR_GRID_SIZE_Z = 2354
    RPR_GRID_DATA = 2355
    RPR_GRID_DATA_SIZEBYTE = 2356
    RPR_GRID_INDICES = 2358
    RPR_GRID_INDICES_NUMBER = 2359
    RPR_GRID_INDICES_TOPOLOGY = 2360
    RPR_GRID_NAME = 7829367
    RPR_GRID_UNIQUE_ID = 7829368
    RPR_GRID_CUSTOM_PTR = 7829369
end

@cenum rpr_hetero_volume_parameter::UInt32 begin
    RPR_HETEROVOLUME_TRANSFORM = 1845
    RPR_HETEROVOLUME_ALBEDO_V2 = 1852
    RPR_HETEROVOLUME_DENSITY_V2 = 1853
    RPR_HETEROVOLUME_EMISSION_V2 = 1854
    RPR_HETEROVOLUME_ALBEDO_LOOKUP_VALUES = 1855
    RPR_HETEROVOLUME_ALBEDO_LOOKUP_VALUES_COUNT = 1856
    RPR_HETEROVOLUME_DENSITY_LOOKUP_VALUES = 1857
    RPR_HETEROVOLUME_DENSITY_LOOKUP_VALUES_COUNT = 1858
    RPR_HETEROVOLUME_EMISSION_LOOKUP_VALUES = 1859
    RPR_HETEROVOLUME_EMISSION_LOOKUP_VALUES_COUNT = 1860
    RPR_HETEROVOLUME_ALBEDO_SCALE = 1861
    RPR_HETEROVOLUME_DENSITY_SCALE = 1862
    RPR_HETEROVOLUME_EMISSION_SCALE = 1863
    RPR_HETEROVOLUME_NAME = 7829367
    RPR_HETEROVOLUME_UNIQUE_ID = 7829368
    RPR_HETEROVOLUME_CUSTOM_PTR = 7829369
end

@cenum rpr_grid_indices_topology::UInt32 begin
    RPR_GRID_INDICES_TOPOLOGY_I_U64 = 2384
    RPR_GRID_INDICES_TOPOLOGY_XYZ_U32 = 2385
    RPR_GRID_INDICES_TOPOLOGY_I_S64 = 2386
    RPR_GRID_INDICES_TOPOLOGY_XYZ_S32 = 2387
end

@cenum rpr_curve_parameter::UInt32 begin
    RPR_CURVE_CONTROLPOINTS_COUNT = 2096
    RPR_CURVE_CONTROLPOINTS_DATA = 2097
    RPR_CURVE_CONTROLPOINTS_STRIDE = 2098
    RPR_CURVE_INDICES_COUNT = 2099
    RPR_CURVE_INDICES_DATA = 2100
    RPR_CURVE_RADIUS = 2101
    RPR_CURVE_UV = 2102
    RPR_CURVE_COUNT_CURVE = 2103
    RPR_CURVE_SEGMENTS_PER_CURVE = 2104
    RPR_CURVE_CREATION_FLAG = 2105
    RPR_CURVE_NAME = 7829367
    RPR_CURVE_UNIQUE_ID = 7829368
    RPR_CURVE_CUSTOM_PTR = 7829369
    RPR_CURVE_TRANSFORM = 1027
    RPR_CURVE_MATERIAL = 1028
    RPR_CURVE_VISIBILITY_PRIMARY_ONLY_FLAG = 1036
    RPR_CURVE_VISIBILITY_SHADOW = 1050
    RPR_CURVE_VISIBILITY_REFLECTION = 1051
    RPR_CURVE_VISIBILITY_REFRACTION = 1052
    RPR_CURVE_VISIBILITY_TRANSPARENT = 1053
    RPR_CURVE_VISIBILITY_DIFFUSE = 1054
    RPR_CURVE_VISIBILITY_GLOSSY_REFLECTION = 1055
    RPR_CURVE_VISIBILITY_GLOSSY_REFRACTION = 1056
    RPR_CURVE_VISIBILITY_LIGHT = 1057
end

struct rpr_image_desc
    image_width::rpr_uint
    image_height::rpr_uint
    image_depth::rpr_uint
    image_row_pitch::rpr_uint
    image_slice_pitch::rpr_uint
end

struct rpr_buffer_desc
    nb_element::rpr_uint
    element_type::rpr_buffer_element_type
    element_channel_size::rpr_uint
end

struct rpr_framebuffer_desc
    fb_width::rpr_uint
    fb_height::rpr_uint
end

struct rpr_render_statistics
    gpumem_usage::rpr_longlong
    gpumem_total::rpr_longlong
    gpumem_max_allocation::rpr_longlong
    sysmem_usage::rpr_longlong
end

struct rpr_image_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct rpr_framebuffer_format
    num_components::rpr_uint
    type::rpr_component_type
end

struct rpr_ies_image_desc
    w::rpr_int
    h::rpr_int
    data::Ptr{rpr_char}
    filename::Ptr{rpr_char}
end

function rprRegisterPlugin(path)
    return ccall((:rprRegisterPlugin, libRadeonProRender64), rpr_int, (Ptr{rpr_char},), path)
end

function rprCreateContext(api_version, pluginIDs, pluginCount, creation_flags, props, cache_path)
    out_context = Ref{rpr_context}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprCreateContext, libRadeonProRender64), rpr_status,
                      (rpr_uint, Ptr{rpr_int}, Cint, rpr_creation_flags, Ptr{rpr_context_properties},
                       Ptr{rpr_char}, Ptr{rpr_context}), api_version, pluginIDs, pluginCount, creation_flags,
                      props, cache_path, out_context))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_context[]
end

function rprContextSetActivePlugin(context, pluginID)
    return check_error(ccall((:rprContextSetActivePlugin, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_int), context, pluginID))
end

function rprContextGetInfo(context, context_info, size, data, size_ret)
    return check_error(ccall((:rprContextGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, Cint, Ptr{Cvoid}, Ptr{Cint}), context,
                             context_info, size, data, size_ret))
end

function rprContextGetParameterInfo(context, param_idx, parameter_info, size, data, size_ret)
    return check_error(ccall((:rprContextGetParameterInfo, libRadeonProRender64), rpr_status,
                             (rpr_context, Cint, rpr_parameter_info, Cint, Ptr{Cvoid}, Ptr{Cint}), context,
                             param_idx, parameter_info, size, data, size_ret))
end

function rprContextGetAOV(context, aov)
    out_fb = Ref{rpr_framebuffer}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextGetAOV, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_aov, Ptr{rpr_framebuffer}), context, aov, out_fb))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_fb[]
end

function rprContextSetAOV(context, aov, frame_buffer)
    return check_error(ccall((:rprContextSetAOV, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_aov, rpr_framebuffer), context, aov, frame_buffer))
end

function rprContextAttachRenderLayer(context, renderLayerString)
    return check_error(ccall((:rprContextAttachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_char}), context, renderLayerString))
end

function rprContextDetachRenderLayer(context, renderLayerString)
    return check_error(ccall((:rprContextDetachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_char}), context, renderLayerString))
end

function rprFrameBufferSetLPE(frame_buffer, lpe)
    return check_error(ccall((:rprFrameBufferSetLPE, libRadeonProRender64), rpr_status,
                             (rpr_framebuffer, Ptr{rpr_char}), frame_buffer, lpe))
end

function rprContextSetAOVindexLookup(context, key, colorR, colorG, colorB, colorA)
    return check_error(ccall((:rprContextSetAOVindexLookup, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_int, rpr_float, rpr_float, rpr_float, rpr_float), context, key,
                             colorR, colorG, colorB, colorA))
end

function rprContextSetAOVindicesLookup(context, keyOffset, keyCount, colorRGBA)
    return check_error(ccall((:rprContextSetAOVindicesLookup, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_int, rpr_int, Ptr{rpr_float}), context, keyOffset, keyCount,
                             colorRGBA))
end

function rprContextSetUserTexture(context, index, gpuCode, cpuCode)
    return check_error(ccall((:rprContextSetUserTexture, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_int, Ptr{rpr_char}, Ptr{Cvoid}), context, index, gpuCode,
                             cpuCode))
end

function rprContextGetUserTexture(context, index, bufferSizeByte, buffer, size_ret)
    return check_error(ccall((:rprContextGetUserTexture, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_int, Cint, Ptr{Cvoid}, Ptr{Cint}), context, index,
                             bufferSizeByte, buffer, size_ret))
end

function rprContextSetScene(context, scene)
    return check_error(ccall((:rprContextSetScene, libRadeonProRender64), rpr_status, (rpr_context, rpr_scene),
                             context, scene))
end

function rprContextGetScene(arg0)
    out_scene = Ref{rpr_scene}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextGetScene, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_scene}),
                      arg0, out_scene))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_scene[]
end

function rprContextSetParameterByKey1u(context, in_input, x)
    return check_error(ccall((:rprContextSetParameterByKey1u, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, rpr_uint), context, in_input, x))
end

function rprContextSetParameterByKeyPtr(context, in_input, x)
    return check_error(ccall((:rprContextSetParameterByKeyPtr, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, Ptr{Cvoid}), context, in_input, x))
end

function rprContextSetParameterByKey1f(context, in_input, x)
    return check_error(ccall((:rprContextSetParameterByKey1f, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, rpr_float), context, in_input, x))
end

function rprContextSetParameterByKey3f(context, in_input, x, y, z)
    return check_error(ccall((:rprContextSetParameterByKey3f, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, rpr_float, rpr_float, rpr_float), context,
                             in_input, x, y, z))
end

function rprContextSetParameterByKey4f(context, in_input, x, y, z, w)
    return check_error(ccall((:rprContextSetParameterByKey4f, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, rpr_float, rpr_float, rpr_float, rpr_float),
                             context, in_input, x, y, z, w))
end

function rprContextSetParameterByKeyString(context, in_input, value)
    return check_error(ccall((:rprContextSetParameterByKeyString, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_context_info, Ptr{rpr_char}), context, in_input, value))
end

function rprContextSetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w)
    return check_error(ccall((:rprContextSetInternalParameter4f, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float,
                              rpr_float), context, pluginIndex, paramName, x, y, z, w))
end

function rprContextSetInternalParameter1u(context, pluginIndex, paramName, x)
    return check_error(ccall((:rprContextSetInternalParameter1u, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, rpr_uint), context, pluginIndex,
                             paramName, x))
end

function rprContextSetInternalParameterBuffer(context, pluginIndex, paramName, buffer, bufferSizeByte)
    return check_error(ccall((:rprContextSetInternalParameterBuffer, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{Cvoid}, Cint), context, pluginIndex,
                             paramName, buffer, bufferSizeByte))
end

function rprContextGetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w)
    return check_error(ccall((:rprContextGetInternalParameter4f, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{rpr_float}, Ptr{rpr_float},
                              Ptr{rpr_float}, Ptr{rpr_float}), context, pluginIndex, paramName, x, y, z, w))
end

function rprContextGetInternalParameter1u(context, pluginIndex, paramName, x)
    return check_error(ccall((:rprContextGetInternalParameter1u, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, Ptr{rpr_uint}), context, pluginIndex,
                             paramName, x))
end

function rprContextGetInternalParameterBuffer(context, pluginIndex, paramName, bufferSizeByte, buffer,
                                              size_ret)
    return check_error(ccall((:rprContextGetInternalParameterBuffer, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, Ptr{rpr_char}, Cint, Ptr{Cvoid}, Ptr{Cint}), context,
                             pluginIndex, paramName, bufferSizeByte, buffer, size_ret))
end

function rprContextRender(context)
    return check_error(ccall((:rprContextRender, libRadeonProRender64), rpr_status, (rpr_context,), context))
end

function rprContextAbortRender(context)
    return check_error(ccall((:rprContextAbortRender, libRadeonProRender64), rpr_status, (rpr_context,),
                             context))
end

function rprContextRenderTile(context, xmin, xmax, ymin, ymax)
    return check_error(ccall((:rprContextRenderTile, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_uint, rpr_uint, rpr_uint, rpr_uint), context, xmin, xmax, ymin,
                             ymax))
end

function rprContextClearMemory(context)
    return check_error(ccall((:rprContextClearMemory, libRadeonProRender64), rpr_status, (rpr_context,),
                             context))
end

function rprContextCreateImage(context, format, image_desc, data)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateImage, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_image_format, Ptr{rpr_image_desc}, Ptr{Cvoid}, Ptr{rpr_image}),
                      context, format, image_desc, data, out_image))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_image[]
end

function rprContextCreateBuffer(context, buffer_desc, data)
    out_buffer = Ref{rpr_buffer}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateBuffer, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_buffer_desc}, Ptr{Cvoid}, Ptr{rpr_buffer}), context, buffer_desc,
                      data, out_buffer))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_buffer[]
end

function rprContextCreateImageFromFile(context, path)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateImageFromFile, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_char}, Ptr{rpr_image}), context, path, out_image))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_image[]
end

function rprContextCreateImageFromFileMemory(context, extension, data, dataSizeByte)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateImageFromFileMemory, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_char}, Ptr{Cvoid}, Cint, Ptr{rpr_image}), context, extension,
                      data, dataSizeByte, out_image))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_image[]
end

function rprContextCreateScene(context)
    out_scene = Ref{rpr_scene}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateScene, libRadeonProRender64), rpr_status, (rpr_context, Ptr{rpr_scene}),
                      context, out_scene))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_scene[]
end

function rprContextCreateInstance(context, shape)
    out_instance = Ref{rpr_shape}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateInstance, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_shape, Ptr{rpr_shape}), context, shape, out_instance))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_instance[]
end

function rprContextCreateMesh(context, vertices, num_vertices, vertex_stride, normals, num_normals,
                              normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices,
                              vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride,
                              num_face_vertices, num_faces)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateMesh, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_float}, Cint, rpr_int, Ptr{rpr_float}, Cint, rpr_int,
                       Ptr{rpr_float}, Cint, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int,
                       Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, Cint, Ptr{rpr_shape}), context, vertices,
                      num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords,
                      num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices,
                      nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_mesh[]
end

function rprContextCreateMeshEx(context, vertices, num_vertices, vertex_stride, normals, num_normals,
                                normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride,
                                numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride,
                                vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices,
                                tidx_stride, num_face_vertices, num_faces)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateMeshEx, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_float}, Cint, rpr_int, Ptr{rpr_float}, Cint, rpr_int,
                       Ptr{rpr_int}, Cint, rpr_int, rpr_int, Ptr{Ptr{rpr_float}}, Ptr{Cint}, Ptr{rpr_int},
                       Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{Ptr{rpr_int}}, Ptr{rpr_int},
                       Ptr{rpr_int}, Cint, Ptr{rpr_shape}), context, vertices, num_vertices, vertex_stride,
                      normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags,
                      perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride,
                      vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride,
                      num_face_vertices, num_faces, out_mesh))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_mesh[]
end

function rprContextCreateMeshEx2(context, vertices, num_vertices, vertex_stride, normals, num_normals,
                                 normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride,
                                 numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride,
                                 vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices,
                                 tidx_stride, num_face_vertices, num_faces, mesh_properties)
    out_mesh = Ref{rpr_shape}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateMeshEx2, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_float}, Cint, rpr_int, Ptr{rpr_float}, Cint, rpr_int,
                       Ptr{rpr_int}, Cint, rpr_int, rpr_int, Ptr{Ptr{rpr_float}}, Ptr{Cint}, Ptr{rpr_int},
                       Ptr{rpr_int}, rpr_int, Ptr{rpr_int}, rpr_int, Ptr{Ptr{rpr_int}}, Ptr{rpr_int},
                       Ptr{rpr_int}, Cint, Ptr{rpr_mesh_info}, Ptr{rpr_shape}), context, vertices,
                      num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag,
                      num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords,
                      num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices,
                      nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces,
                      mesh_properties, out_mesh))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_mesh[]
end

function rprContextCreateCamera(context)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateCamera, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_camera}), context, out_camera))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_camera[]
end

function rprContextCreateFrameBuffer(context, format, fb_desc)
    out_fb = Ref{rpr_framebuffer}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateFrameBuffer, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_framebuffer_format, Ptr{rpr_framebuffer_desc}, Ptr{rpr_framebuffer}),
                      context, format, fb_desc, out_fb))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_fb[]
end

function rprContextGetFunctionPtr(context, function_name)
    out_function_ptr = Ref{Ptr{Cvoid}}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextGetFunctionPtr, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_char}, Ptr{Ptr{Cvoid}}), context, function_name,
                      out_function_ptr))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_function_ptr[]
end

function rprCameraGetInfo(camera, camera_info, size, data, size_ret)
    return check_error(ccall((:rprCameraGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_camera_info, Cint, Ptr{Cvoid}, Ptr{Cint}), camera, camera_info,
                             size, data, size_ret))
end

function rprCameraSetFocalLength(camera, flength)
    return check_error(ccall((:rprCameraSetFocalLength, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, flength))
end

function rprCameraSetLinearMotion(camera, x, y, z)
    return check_error(ccall((:rprCameraSetLinearMotion, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float, rpr_float), camera, x, y, z))
end

function rprCameraSetAngularMotion(camera, x, y, z, w)
    return check_error(ccall((:rprCameraSetAngularMotion, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float, rpr_float, rpr_float), camera, x, y, z, w))
end

function rprCameraSetMotionTransformCount(camera, transformCount)
    return check_error(ccall((:rprCameraSetMotionTransformCount, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_uint), camera, transformCount))
end

function rprCameraSetMotionTransform(camera, transpose, transform, timeIndex)
    return check_error(ccall((:rprCameraSetMotionTransform, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_bool, Ptr{rpr_float}, rpr_uint), camera, transpose, transform,
                             timeIndex))
end

function rprCameraSetFocusDistance(camera, fdist)
    return check_error(ccall((:rprCameraSetFocusDistance, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, fdist))
end

function rprCameraSetTransform(camera, transpose, transform)
    return check_error(ccall((:rprCameraSetTransform, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_bool, Ptr{rpr_float}), camera, transpose, transform))
end

function rprCameraSetSensorSize(camera, width, height)
    return check_error(ccall((:rprCameraSetSensorSize, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float), camera, width, height))
end

function rprCameraLookAt(camera, posx, posy, posz, atx, aty, atz, upx, upy, upz)
    return check_error(ccall((:rprCameraLookAt, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float, rpr_float,
                              rpr_float, rpr_float, rpr_float), camera, posx, posy, posz, atx, aty, atz, upx,
                             upy, upz))
end

function rprCameraSetFStop(camera, fstop)
    return check_error(ccall((:rprCameraSetFStop, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float),
                             camera, fstop))
end

function rprCameraSetApertureBlades(camera, num_blades)
    return check_error(ccall((:rprCameraSetApertureBlades, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_uint), camera, num_blades))
end

function rprCameraSetExposure(camera, exposure)
    return check_error(ccall((:rprCameraSetExposure, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float),
                             camera, exposure))
end

function rprCameraSetMode(camera, mode)
    return check_error(ccall((:rprCameraSetMode, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_camera_mode), camera, mode))
end

function rprCameraSetOrthoWidth(camera, width)
    return check_error(ccall((:rprCameraSetOrthoWidth, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, width))
end

function rprCameraSetFocalTilt(camera, tilt)
    return check_error(ccall((:rprCameraSetFocalTilt, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, tilt))
end

function rprCameraSetIPD(camera, ipd)
    return check_error(ccall((:rprCameraSetIPD, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float),
                             camera, ipd))
end

function rprCameraSetLensShift(camera, shiftx, shifty)
    return check_error(ccall((:rprCameraSetLensShift, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float), camera, shiftx, shifty))
end

function rprCameraSetTiltCorrection(camera, tiltX, tiltY)
    return check_error(ccall((:rprCameraSetTiltCorrection, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float, rpr_float), camera, tiltX, tiltY))
end

function rprCameraSetOrthoHeight(camera, height)
    return check_error(ccall((:rprCameraSetOrthoHeight, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, height))
end

function rprCameraSetNearPlane(camera, near)
    return check_error(ccall((:rprCameraSetNearPlane, libRadeonProRender64), rpr_status,
                             (rpr_camera, rpr_float), camera, near))
end

function rprCameraSetFarPlane(camera, far)
    return check_error(ccall((:rprCameraSetFarPlane, libRadeonProRender64), rpr_status, (rpr_camera, rpr_float),
                             camera, far))
end

function rprImageGetInfo(image, image_info, size, data, size_ret)
    return check_error(ccall((:rprImageGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_image_info, Cint, Ptr{Cvoid}, Ptr{Cint}), image, image_info,
                             size, data, size_ret))
end

function rprImageSetWrap(image, type)
    return check_error(ccall((:rprImageSetWrap, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_image_wrap_type), image, type))
end

function rprImageSetInternalCompression(image, compressionEnabled)
    return check_error(ccall((:rprImageSetInternalCompression, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_uint), image, compressionEnabled))
end

function rprImageSetOcioColorspace(image, ocioColorspace)
    return check_error(ccall((:rprImageSetOcioColorspace, libRadeonProRender64), rpr_status,
                             (rpr_image, Ptr{rpr_char}), image, ocioColorspace))
end

function rprImageSetUDIM(imageUdimRoot, tileIndex, imageTile)
    return check_error(ccall((:rprImageSetUDIM, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_uint, rpr_image), imageUdimRoot, tileIndex, imageTile))
end

function rprImageSetFilter(image, type)
    return check_error(ccall((:rprImageSetFilter, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_image_filter_type), image, type))
end

function rprImageSetGamma(image, type)
    return check_error(ccall((:rprImageSetGamma, libRadeonProRender64), rpr_status, (rpr_image, rpr_float),
                             image, type))
end

function rprImageSetMipmapEnabled(image, enabled)
    return check_error(ccall((:rprImageSetMipmapEnabled, libRadeonProRender64), rpr_status,
                             (rpr_image, rpr_bool), image, enabled))
end

function rprShapeSetTransform(shape, transpose, transform)
    return check_error(ccall((:rprShapeSetTransform, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool, Ptr{rpr_float}), shape, transpose, transform))
end

function rprShapeSetVertexValue(in_shape, setIndex, indices, values, indicesCount)
    return check_error(ccall((:rprShapeSetVertexValue, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_int, Ptr{rpr_int}, Ptr{rpr_float}, rpr_int), in_shape, setIndex,
                             indices, values, indicesCount))
end

function rprShapeSetSubdivisionFactor(shape, factor)
    return check_error(ccall((:rprShapeSetSubdivisionFactor, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_uint), shape, factor))
end

function rprShapeSetSubdivisionAutoRatioCap(shape, autoRatioCap)
    return check_error(ccall((:rprShapeSetSubdivisionAutoRatioCap, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float), shape, autoRatioCap))
end

function rprShapeSetSubdivisionCreaseWeight(shape, factor)
    return check_error(ccall((:rprShapeSetSubdivisionCreaseWeight, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float), shape, factor))
end

function rprShapeAttachRenderLayer(shape, renderLayerString)
    return check_error(ccall((:rprShapeAttachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_shape, Ptr{rpr_char}), shape, renderLayerString))
end

function rprShapeDetachRenderLayer(shape, renderLayerString)
    return check_error(ccall((:rprShapeDetachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_shape, Ptr{rpr_char}), shape, renderLayerString))
end

function rprLightAttachRenderLayer(light, renderLayerString)
    return check_error(ccall((:rprLightAttachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_light, Ptr{rpr_char}), light, renderLayerString))
end

function rprLightDetachRenderLayer(light, renderLayerString)
    return check_error(ccall((:rprLightDetachRenderLayer, libRadeonProRender64), rpr_status,
                             (rpr_light, Ptr{rpr_char}), light, renderLayerString))
end

function rprShapeSetSubdivisionBoundaryInterop(shape, type)
    return check_error(ccall((:rprShapeSetSubdivisionBoundaryInterop, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_subdiv_boundary_interfop_type), shape, type))
end

function rprShapeAutoAdaptSubdivisionFactor(shape, framebuffer, camera, factor)
    return check_error(ccall((:rprShapeAutoAdaptSubdivisionFactor, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_framebuffer, rpr_camera, rpr_int), shape, framebuffer, camera,
                             factor))
end

function rprShapeSetDisplacementScale(shape, minscale, maxscale)
    return check_error(ccall((:rprShapeSetDisplacementScale, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float, rpr_float), shape, minscale, maxscale))
end

function rprShapeSetObjectGroupID(shape, objectGroupID)
    return check_error(ccall((:rprShapeSetObjectGroupID, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_uint), shape, objectGroupID))
end

function rprShapeSetObjectID(shape, objectID)
    return check_error(ccall((:rprShapeSetObjectID, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint),
                             shape, objectID))
end

function rprShapeSetLightGroupID(shape, lightGroupID)
    return check_error(ccall((:rprShapeSetLightGroupID, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_uint), shape, lightGroupID))
end

function rprShapeSetLayerMask(shape, layerMask)
    return check_error(ccall((:rprShapeSetLayerMask, libRadeonProRender64), rpr_status, (rpr_shape, rpr_uint),
                             shape, layerMask))
end

function rprShapeSetDisplacementMaterial(shape, materialNode)
    return check_error(ccall((:rprShapeSetDisplacementMaterial, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_material_node), shape, materialNode))
end

function rprShapeSetMaterial(shape, node)
    return check_error(ccall((:rprShapeSetMaterial, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_material_node), shape, node))
end

function rprShapeSetMaterialFaces(shape, node, face_indices, num_faces)
    return check_error(ccall((:rprShapeSetMaterialFaces, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_material_node, Ptr{rpr_int}, Cint), shape, node, face_indices,
                             num_faces))
end

function rprShapeSetVolumeMaterial(shape, node)
    return check_error(ccall((:rprShapeSetVolumeMaterial, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_material_node), shape, node))
end

function rprShapeSetLinearMotion(shape, x, y, z)
    return check_error(ccall((:rprShapeSetLinearMotion, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float, rpr_float, rpr_float), shape, x, y, z))
end

function rprShapeSetAngularMotion(shape, x, y, z, w)
    return check_error(ccall((:rprShapeSetAngularMotion, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float, rpr_float, rpr_float, rpr_float), shape, x, y, z, w))
end

function rprShapeSetScaleMotion(shape, x, y, z)
    return check_error(ccall((:rprShapeSetScaleMotion, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_float, rpr_float, rpr_float), shape, x, y, z))
end

function rprShapeSetMotionTransformCount(shape, transformCount)
    return check_error(ccall((:rprShapeSetMotionTransformCount, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_uint), shape, transformCount))
end

function rprShapeSetMotionTransform(shape, transpose, transform, timeIndex)
    return check_error(ccall((:rprShapeSetMotionTransform, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool, Ptr{rpr_float}, rpr_uint), shape, transpose, transform,
                             timeIndex))
end

function rprShapeSetVisibilityFlag(shape, visibilityFlag, visible)
    return check_error(ccall((:rprShapeSetVisibilityFlag, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_shape_info, rpr_bool), shape, visibilityFlag, visible))
end

function rprCurveSetVisibilityFlag(curve, visibilityFlag, visible)
    return check_error(ccall((:rprCurveSetVisibilityFlag, libRadeonProRender64), rpr_status,
                             (rpr_curve, rpr_curve_parameter, rpr_bool), curve, visibilityFlag, visible))
end

function rprShapeSetVisibility(shape, visible)
    return check_error(ccall((:rprShapeSetVisibility, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool),
                             shape, visible))
end

function rprCurveSetVisibility(curve, visible)
    return check_error(ccall((:rprCurveSetVisibility, libRadeonProRender64), rpr_status, (rpr_curve, rpr_bool),
                             curve, visible))
end

function rprShapeSetVisibilityInSpecular(shape, visible)
    return check_error(ccall((:rprShapeSetVisibilityInSpecular, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool), shape, visible))
end

function rprShapeSetShadowCatcher(shape, shadowCatcher)
    return check_error(ccall((:rprShapeSetShadowCatcher, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool), shape, shadowCatcher))
end

function rprShapeSetReflectionCatcher(shape, reflectionCatcher)
    return check_error(ccall((:rprShapeSetReflectionCatcher, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool), shape, reflectionCatcher))
end

function rprShapeSetContourIgnore(shape, ignoreInContour)
    return check_error(ccall((:rprShapeSetContourIgnore, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_bool), shape, ignoreInContour))
end

function rprShapeMarkStatic(in_shape, in_is_static)
    return check_error(ccall((:rprShapeMarkStatic, libRadeonProRender64), rpr_status, (rpr_shape, rpr_bool),
                             in_shape, in_is_static))
end

function rprLightSetTransform(light, transpose, transform)
    return check_error(ccall((:rprLightSetTransform, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_bool, Ptr{rpr_float}), light, transpose, transform))
end

function rprLightSetGroupId(light, groupId)
    return check_error(ccall((:rprLightSetGroupId, libRadeonProRender64), rpr_status, (rpr_light, rpr_uint),
                             light, groupId))
end

function rprShapeGetInfo(arg0, arg1, arg2, arg3, arg4)
    return check_error(ccall((:rprShapeGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_shape_info, Cint, Ptr{Cvoid}, Ptr{Cint}), arg0, arg1, arg2, arg3,
                             arg4))
end

function rprMeshGetInfo(mesh, mesh_info, size, data, size_ret)
    return check_error(ccall((:rprMeshGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_mesh_info, Cint, Ptr{Cvoid}, Ptr{Cint}), mesh, mesh_info, size,
                             data, size_ret))
end

function rprCurveGetInfo(curve, curve_info, size, data, size_ret)
    return check_error(ccall((:rprCurveGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_curve, rpr_curve_parameter, Cint, Ptr{Cvoid}, Ptr{Cint}), curve, curve_info,
                             size, data, size_ret))
end

function rprHeteroVolumeGetInfo(heteroVol, heteroVol_info, size, data, size_ret)
    return check_error(ccall((:rprHeteroVolumeGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_hetero_volume_parameter, Cint, Ptr{Cvoid}, Ptr{Cint}),
                             heteroVol, heteroVol_info, size, data, size_ret))
end

function rprGridGetInfo(grid, grid_info, size, data, size_ret)
    return check_error(ccall((:rprGridGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_grid, rpr_grid_parameter, Cint, Ptr{Cvoid}, Ptr{Cint}), grid, grid_info,
                             size, data, size_ret))
end

function rprBufferGetInfo(buffer, buffer_info, size, data, size_ret)
    return check_error(ccall((:rprBufferGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_buffer, rpr_buffer_info, Cint, Ptr{Cvoid}, Ptr{Cint}), buffer, buffer_info,
                             size, data, size_ret))
end

function rprInstanceGetBaseShape(shape)
    out_shape = Ref{rpr_shape}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprInstanceGetBaseShape, libRadeonProRender64), rpr_status, (rpr_shape, Ptr{rpr_shape}),
                      shape, out_shape))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_shape[]
end

function rprContextCreatePointLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreatePointLight, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_light[]
end

function rprPointLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprPointLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprContextCreateSpotLight(context, light)
    return check_error(ccall((:rprContextCreateSpotLight, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_light}), context, light))
end

function rprContextCreateSphereLight(context, light)
    return check_error(ccall((:rprContextCreateSphereLight, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_light}), context, light))
end

function rprContextCreateDiskLight(context, light)
    return check_error(ccall((:rprContextCreateDiskLight, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_light}), context, light))
end

function rprSpotLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprSpotLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprSpotLightSetImage(light, img)
    return check_error(ccall((:rprSpotLightSetImage, libRadeonProRender64), rpr_status, (rpr_light, rpr_image),
                             light, img))
end

function rprSphereLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprSphereLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprSphereLightSetRadius(light, angle)
    return check_error(ccall((:rprSphereLightSetRadius, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float), light, angle))
end

function rprDiskLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprDiskLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprDiskLightSetRadius(light, radius)
    return check_error(ccall((:rprDiskLightSetRadius, libRadeonProRender64), rpr_status, (rpr_light, rpr_float),
                             light, radius))
end

function rprDiskLightSetAngle(light, angle)
    return check_error(ccall((:rprDiskLightSetAngle, libRadeonProRender64), rpr_status, (rpr_light, rpr_float),
                             light, angle))
end

function rprSpotLightSetConeShape(light, iangle, oangle)
    return check_error(ccall((:rprSpotLightSetConeShape, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float), light, iangle, oangle))
end

function rprContextCreateDirectionalLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateDirectionalLight, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_light[]
end

function rprDirectionalLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprDirectionalLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprDirectionalLightSetShadowSoftnessAngle(light, softnessAngle)
    return check_error(ccall((:rprDirectionalLightSetShadowSoftnessAngle, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float), light, softnessAngle))
end

function rprContextCreateEnvironmentLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateEnvironmentLight, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_light[]
end

function rprEnvironmentLightSetImage(env_light, image)
    return check_error(ccall((:rprEnvironmentLightSetImage, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_image), env_light, image))
end

function rprEnvironmentLightSetIntensityScale(env_light, intensity_scale)
    return check_error(ccall((:rprEnvironmentLightSetIntensityScale, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float), env_light, intensity_scale))
end

function rprEnvironmentLightAttachPortal(scene, env_light, portal)
    return check_error(ccall((:rprEnvironmentLightAttachPortal, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_light, rpr_shape), scene, env_light, portal))
end

function rprEnvironmentLightDetachPortal(scene, env_light, portal)
    return check_error(ccall((:rprEnvironmentLightDetachPortal, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_light, rpr_shape), scene, env_light, portal))
end

function rprEnvironmentLightSetEnvironmentLightOverride(in_ibl, overrideType, in_iblOverride)
    return check_error(ccall((:rprEnvironmentLightSetEnvironmentLightOverride, libRadeonProRender64),
                             rpr_status, (rpr_light, rpr_environment_override, rpr_light), in_ibl,
                             overrideType, in_iblOverride))
end

function rprEnvironmentLightGetEnvironmentLightOverride(in_ibl, overrideType)
    out_iblOverride = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprEnvironmentLightGetEnvironmentLightOverride, libRadeonProRender64), rpr_status,
                      (rpr_light, rpr_environment_override, Ptr{rpr_light}), in_ibl, overrideType,
                      out_iblOverride))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_iblOverride[]
end

function rprContextCreateSkyLight(context)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateSkyLight, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_light}), context, out_light))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_light[]
end

function rprSkyLightSetTurbidity(skylight, turbidity)
    return check_error(ccall((:rprSkyLightSetTurbidity, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float), skylight, turbidity))
end

function rprSkyLightSetAlbedo(skylight, albedo)
    return check_error(ccall((:rprSkyLightSetAlbedo, libRadeonProRender64), rpr_status, (rpr_light, rpr_float),
                             skylight, albedo))
end

function rprSkyLightSetScale(skylight, scale)
    return check_error(ccall((:rprSkyLightSetScale, libRadeonProRender64), rpr_status, (rpr_light, rpr_float),
                             skylight, scale))
end

function rprSkyLightSetDirection(skylight, x, y, z)
    return check_error(ccall((:rprSkyLightSetDirection, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), skylight, x, y, z))
end

function rprSkyLightAttachPortal(scene, skylight, portal)
    return check_error(ccall((:rprSkyLightAttachPortal, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_light, rpr_shape), scene, skylight, portal))
end

function rprSkyLightDetachPortal(scene, skylight, portal)
    return check_error(ccall((:rprSkyLightDetachPortal, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_light, rpr_shape), scene, skylight, portal))
end

function rprContextCreateIESLight(context, light)
    return check_error(ccall((:rprContextCreateIESLight, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_light}), context, light))
end

function rprIESLightSetRadiantPower3f(light, r, g, b)
    return check_error(ccall((:rprIESLightSetRadiantPower3f, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_float, rpr_float, rpr_float), light, r, g, b))
end

function rprIESLightSetImageFromFile(env_light, imagePath, nx, ny)
    return check_error(ccall((:rprIESLightSetImageFromFile, libRadeonProRender64), rpr_status,
                             (rpr_light, Ptr{rpr_char}, rpr_int, rpr_int), env_light, imagePath, nx, ny))
end

function rprIESLightSetImageFromIESdata(env_light, iesData, nx, ny)
    return check_error(ccall((:rprIESLightSetImageFromIESdata, libRadeonProRender64), rpr_status,
                             (rpr_light, Ptr{rpr_char}, rpr_int, rpr_int), env_light, iesData, nx, ny))
end

function rprLightGetInfo(light, info, size, data, size_ret)
    return check_error(ccall((:rprLightGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_light, rpr_light_info, Cint, Ptr{Cvoid}, Ptr{Cint}), light, info, size,
                             data, size_ret))
end

function rprSceneClear(scene)
    return check_error(ccall((:rprSceneClear, libRadeonProRender64), rpr_status, (rpr_scene,), scene))
end

function rprSceneAttachShape(scene, shape)
    return check_error(ccall((:rprSceneAttachShape, libRadeonProRender64), rpr_status, (rpr_scene, rpr_shape),
                             scene, shape))
end

function rprSceneDetachShape(scene, shape)
    return check_error(ccall((:rprSceneDetachShape, libRadeonProRender64), rpr_status, (rpr_scene, rpr_shape),
                             scene, shape))
end

function rprSceneAttachHeteroVolume(scene, heteroVolume)
    return check_error(ccall((:rprSceneAttachHeteroVolume, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_hetero_volume), scene, heteroVolume))
end

function rprSceneDetachHeteroVolume(scene, heteroVolume)
    return check_error(ccall((:rprSceneDetachHeteroVolume, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_hetero_volume), scene, heteroVolume))
end

function rprSceneAttachCurve(scene, curve)
    return check_error(ccall((:rprSceneAttachCurve, libRadeonProRender64), rpr_status, (rpr_scene, rpr_curve),
                             scene, curve))
end

function rprSceneDetachCurve(scene, curve)
    return check_error(ccall((:rprSceneDetachCurve, libRadeonProRender64), rpr_status, (rpr_scene, rpr_curve),
                             scene, curve))
end

function rprCurveSetMaterial(curve, material)
    return check_error(ccall((:rprCurveSetMaterial, libRadeonProRender64), rpr_status,
                             (rpr_curve, rpr_material_node), curve, material))
end

function rprCurveSetTransform(curve, transpose, transform)
    return check_error(ccall((:rprCurveSetTransform, libRadeonProRender64), rpr_status,
                             (rpr_curve, rpr_bool, Ptr{rpr_float}), curve, transpose, transform))
end

function rprContextCreateCurve(context, out_curve, num_controlPoints, controlPointsData, controlPointsStride,
                               num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve,
                               creationFlag_tapered)
    return check_error(ccall((:rprContextCreateCurve, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_curve}, Cint, Ptr{rpr_float}, rpr_int, Cint, rpr_uint,
                              Ptr{rpr_uint}, Ptr{rpr_float}, Ptr{rpr_float}, Ptr{rpr_int}, rpr_uint), context,
                             out_curve, num_controlPoints, controlPointsData, controlPointsStride,
                             num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve,
                             creationFlag_tapered))
end

function rprSceneAttachLight(scene, light)
    return check_error(ccall((:rprSceneAttachLight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light),
                             scene, light))
end

function rprSceneDetachLight(scene, light)
    return check_error(ccall((:rprSceneDetachLight, libRadeonProRender64), rpr_status, (rpr_scene, rpr_light),
                             scene, light))
end

function rprSceneSetEnvironmentLight(in_scene, in_light)
    return check_error(ccall((:rprSceneSetEnvironmentLight, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_light), in_scene, in_light))
end

function rprSceneGetEnvironmentLight(in_scene)
    out_light = Ref{rpr_light}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprSceneGetEnvironmentLight, libRadeonProRender64), rpr_status,
                      (rpr_scene, Ptr{rpr_light}), in_scene, out_light))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_light[]
end

function rprSceneGetInfo(scene, info, size, data, size_ret)
    return check_error(ccall((:rprSceneGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_scene_info, Cint, Ptr{Cvoid}, Ptr{Cint}), scene, info, size,
                             data, size_ret))
end

function rprSceneSetBackgroundImage(scene, image)
    return check_error(ccall((:rprSceneSetBackgroundImage, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_image), scene, image))
end

function rprSceneGetBackgroundImage(scene)
    out_image = Ref{rpr_image}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprSceneGetBackgroundImage, libRadeonProRender64), rpr_status,
                      (rpr_scene, Ptr{rpr_image}), scene, out_image))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_image[]
end

function rprSceneSetCameraRight(scene, camera)
    return check_error(ccall((:rprSceneSetCameraRight, libRadeonProRender64), rpr_status,
                             (rpr_scene, rpr_camera), scene, camera))
end

function rprSceneGetCameraRight(scene)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprSceneGetCameraRight, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_camera}),
                      scene, out_camera))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_camera[]
end

function rprSceneSetCamera(scene, camera)
    return check_error(ccall((:rprSceneSetCamera, libRadeonProRender64), rpr_status, (rpr_scene, rpr_camera),
                             scene, camera))
end

function rprSceneGetCamera(scene)
    out_camera = Ref{rpr_camera}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprSceneGetCamera, libRadeonProRender64), rpr_status, (rpr_scene, Ptr{rpr_camera}),
                      scene, out_camera))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_camera[]
end

function rprFrameBufferGetInfo(framebuffer, info, size, data, size_ret)
    return check_error(ccall((:rprFrameBufferGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_framebuffer, rpr_framebuffer_info, Cint, Ptr{Cvoid}, Ptr{Cint}),
                             framebuffer, info, size, data, size_ret))
end

function rprFrameBufferClear(frame_buffer)
    return check_error(ccall((:rprFrameBufferClear, libRadeonProRender64), rpr_status, (rpr_framebuffer,),
                             frame_buffer))
end

function rprFrameBufferFillWithColor(frame_buffer, r, g, b, a)
    return check_error(ccall((:rprFrameBufferFillWithColor, libRadeonProRender64), rpr_status,
                             (rpr_framebuffer, rpr_float, rpr_float, rpr_float, rpr_float), frame_buffer, r,
                             g, b, a))
end

function rprFrameBufferSaveToFile(frame_buffer, file_path)
    return check_error(ccall((:rprFrameBufferSaveToFile, libRadeonProRender64), rpr_status,
                             (rpr_framebuffer, Ptr{rpr_char}), frame_buffer, file_path))
end

function rprFrameBufferSaveToFileEx(framebufferList, framebufferCount, filePath, extraOptions)
    return check_error(ccall((:rprFrameBufferSaveToFileEx, libRadeonProRender64), rpr_status,
                             (Ptr{rpr_framebuffer}, rpr_uint, Ptr{rpr_char}, Ptr{Cvoid}), framebufferList,
                             framebufferCount, filePath, extraOptions))
end

function rprContextResolveFrameBuffer(context, src_frame_buffer, dst_frame_buffer, normalizeOnly)
    return check_error(ccall((:rprContextResolveFrameBuffer, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_framebuffer, rpr_framebuffer, rpr_bool), context,
                             src_frame_buffer, dst_frame_buffer, normalizeOnly))
end

function rprMaterialSystemGetInfo(in_material_system, type, in_size, in_data)
    out_size = Ref{Cint}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprMaterialSystemGetInfo, libRadeonProRender64), rpr_status,
                      (rpr_material_system, rpr_material_system_info, Cint, Ptr{Cvoid}, Ptr{Cint}),
                      in_material_system, type, in_size, in_data, out_size))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_size[]
end

function rprContextCreateMaterialSystem(in_context, type)
    out_matsys = Ref{rpr_material_system}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateMaterialSystem, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_material_system_type, Ptr{rpr_material_system}), in_context, type,
                      out_matsys))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_matsys[]
end

function rprMaterialSystemGetSize(in_context)
    out_size = Ref{rpr_uint}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprMaterialSystemGetSize, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_uint}), in_context, out_size))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_size[]
end

function rprMaterialSystemCreateNode(in_matsys, in_type)
    out_node = Ref{rpr_material_node}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprMaterialSystemCreateNode, libRadeonProRender64), rpr_status,
                      (rpr_material_system, rpr_material_node_type, Ptr{rpr_material_node}), in_matsys,
                      in_type, out_node))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_node[]
end

function rprMaterialNodeSetID(in_node, id)
    return check_error(ccall((:rprMaterialNodeSetID, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_uint), in_node, id))
end

function rprMaterialNodeSetInputNByKey(in_node, in_input, in_input_node)
    return check_error(ccall((:rprMaterialNodeSetInputNByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_material_node), in_node,
                             in_input, in_input_node))
end

function rprMaterialNodeSetInputFByKey(in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w)
    return check_error(ccall((:rprMaterialNodeSetInputFByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_float, rpr_float, rpr_float,
                              rpr_float), in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w))
end

function rprMaterialNodeSetInputUByKey(in_node, in_input, in_value)
    return check_error(ccall((:rprMaterialNodeSetInputUByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_uint), in_node, in_input,
                             in_value))
end

function rprMaterialNodeSetInputImageDataByKey(in_node, in_input, image)
    return check_error(ccall((:rprMaterialNodeSetInputImageDataByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_image), in_node, in_input,
                             image))
end

function rprMaterialNodeSetInputBufferDataByKey(in_node, in_input, buffer)
    return check_error(ccall((:rprMaterialNodeSetInputBufferDataByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_buffer), in_node, in_input,
                             buffer))
end

function rprMaterialNodeSetInputGridDataByKey(in_node, in_input, grid)
    return check_error(ccall((:rprMaterialNodeSetInputGridDataByKey, libRadeonProRender64), rpr_status,
                             (rpr_material_node, rpr_material_node_input, rpr_grid), in_node, in_input, grid))
end

function rprMaterialNodeGetInfo(in_node, in_info, in_size, in_data)
    out_size = Ref{Cint}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprMaterialNodeGetInfo, libRadeonProRender64), rpr_status,
                      (rpr_material_node, rpr_material_node_info, Cint, Ptr{Cvoid}, Ptr{Cint}), in_node,
                      in_info, in_size, in_data, out_size))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_size[]
end

function rprMaterialNodeGetInputInfo(in_node, in_input_idx, in_info, in_size, in_data)
    out_size = Ref{Cint}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprMaterialNodeGetInputInfo, libRadeonProRender64), rpr_status,
                      (rpr_material_node, rpr_int, rpr_material_node_input_info, Cint, Ptr{Cvoid}, Ptr{Cint}),
                      in_node, in_input_idx, in_info, in_size, in_data, out_size))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_size[]
end

function rprContextCreateComposite(context, in_type)
    out_composite = Ref{rpr_composite}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateComposite, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_composite_type, Ptr{rpr_composite}), context, in_type, out_composite))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_composite[]
end

function rprContextCreateLUTFromFile(context, fileLutPath)
    out_lut = Ref{rpr_lut}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateLUTFromFile, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_char}, Ptr{rpr_lut}), context, fileLutPath, out_lut))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_lut[]
end

function rprContextCreateLUTFromData(context, lutData)
    out_lut = Ref{rpr_lut}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateLUTFromData, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_char}, Ptr{rpr_lut}), context, lutData, out_lut))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_lut[]
end

function rprCompositeSetInputFb(composite, inputName, input)
    return check_error(ccall((:rprCompositeSetInputFb, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, rpr_framebuffer), composite, inputName, input))
end

function rprCompositeSetInputC(composite, inputName, input)
    return check_error(ccall((:rprCompositeSetInputC, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, rpr_composite), composite, inputName, input))
end

function rprCompositeSetInputLUT(composite, inputName, input)
    return check_error(ccall((:rprCompositeSetInputLUT, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, rpr_lut), composite, inputName, input))
end

function rprCompositeSetInput4f(composite, inputName, x, y, z, w)
    return check_error(ccall((:rprCompositeSetInput4f, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, Cfloat, Cfloat, Cfloat, Cfloat), composite,
                             inputName, x, y, z, w))
end

function rprCompositeSetInput1u(composite, inputName, value)
    return check_error(ccall((:rprCompositeSetInput1u, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, rpr_uint), composite, inputName, value))
end

function rprCompositeSetInputOp(composite, inputName, op)
    return check_error(ccall((:rprCompositeSetInputOp, libRadeonProRender64), rpr_status,
                             (rpr_composite, Ptr{rpr_char}, rpr_material_node_arithmetic_operation),
                             composite, inputName, op))
end

function rprCompositeCompute(composite, fb)
    return check_error(ccall((:rprCompositeCompute, libRadeonProRender64), rpr_status,
                             (rpr_composite, rpr_framebuffer), composite, fb))
end

function rprCompositeGetInfo(composite, composite_info, size, data, size_ret)
    return check_error(ccall((:rprCompositeGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_composite, rpr_composite_info, Cint, Ptr{Cvoid}, Ptr{Cint}), composite,
                             composite_info, size, data, size_ret))
end

function rprObjectDelete(obj)
    return check_error(ccall((:rprObjectDelete, libRadeonProRender64), rpr_status, (Ptr{Cvoid},), obj))
end

function rprObjectSetName(node, name)
    return check_error(ccall((:rprObjectSetName, libRadeonProRender64), rpr_status, (Ptr{Cvoid}, Ptr{rpr_char}),
                             node, name))
end

function rprObjectSetCustomPointer(node, customPtr)
    return check_error(ccall((:rprObjectSetCustomPointer, libRadeonProRender64), rpr_status,
                             (Ptr{Cvoid}, Ptr{Cvoid}), node, customPtr))
end

function rprObjectGetCustomPointer(node, customPtr_out)
    return check_error(ccall((:rprObjectGetCustomPointer, libRadeonProRender64), rpr_status,
                             (Ptr{Cvoid}, Ptr{Ptr{Cvoid}}), node, customPtr_out))
end

function rprContextCreatePostEffect(context, type)
    out_effect = Ref{rpr_post_effect}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreatePostEffect, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_post_effect_type, Ptr{rpr_post_effect}), context, type, out_effect))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_effect[]
end

function rprContextAttachPostEffect(context, effect)
    return check_error(ccall((:rprContextAttachPostEffect, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_post_effect), context, effect))
end

function rprContextDetachPostEffect(context, effect)
    return check_error(ccall((:rprContextDetachPostEffect, libRadeonProRender64), rpr_status,
                             (rpr_context, rpr_post_effect), context, effect))
end

function rprPostEffectSetParameter1u(effect, name, x)
    return check_error(ccall((:rprPostEffectSetParameter1u, libRadeonProRender64), rpr_status,
                             (rpr_post_effect, Ptr{rpr_char}, rpr_uint), effect, name, x))
end

function rprPostEffectSetParameter1f(effect, name, x)
    return check_error(ccall((:rprPostEffectSetParameter1f, libRadeonProRender64), rpr_status,
                             (rpr_post_effect, Ptr{rpr_char}, rpr_float), effect, name, x))
end

function rprPostEffectSetParameter3f(effect, name, x, y, z)
    return check_error(ccall((:rprPostEffectSetParameter3f, libRadeonProRender64), rpr_status,
                             (rpr_post_effect, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float), effect, name,
                             x, y, z))
end

function rprPostEffectSetParameter4f(effect, name, x, y, z, w)
    return check_error(ccall((:rprPostEffectSetParameter4f, libRadeonProRender64), rpr_status,
                             (rpr_post_effect, Ptr{rpr_char}, rpr_float, rpr_float, rpr_float, rpr_float),
                             effect, name, x, y, z, w))
end

function rprContextGetAttachedPostEffectCount(context, nb)
    return check_error(ccall((:rprContextGetAttachedPostEffectCount, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_uint}), context, nb))
end

function rprContextGetAttachedPostEffect(context, i)
    out_effect = Ref{rpr_post_effect}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextGetAttachedPostEffect, libRadeonProRender64), rpr_status,
                      (rpr_context, rpr_uint, Ptr{rpr_post_effect}), context, i, out_effect))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_effect[]
end

function rprPostEffectGetInfo(effect, info, size, data, size_ret)
    return check_error(ccall((:rprPostEffectGetInfo, libRadeonProRender64), rpr_status,
                             (rpr_post_effect, rpr_post_effect_info, Cint, Ptr{Cvoid}, Ptr{Cint}), effect,
                             info, size, data, size_ret))
end

function rprContextCreateGrid(context, out_grid, gridSizeX, gridSizeY, gridSizeZ, indicesList,
                              numberOfIndices, indicesListTopology, gridData, gridDataSizeByte,
                              gridDataTopology___unused)
    return check_error(ccall((:rprContextCreateGrid, libRadeonProRender64), rpr_status,
                             (rpr_context, Ptr{rpr_grid}, Cint, Cint, Cint, Ptr{Cvoid}, Cint,
                              rpr_grid_indices_topology, Ptr{Cvoid}, Cint, rpr_uint), context, out_grid,
                             gridSizeX, gridSizeY, gridSizeZ, indicesList, numberOfIndices,
                             indicesListTopology, gridData, gridDataSizeByte, gridDataTopology___unused))
end

function rprContextCreateHeteroVolume(context)
    out_heteroVolume = Ref{rpr_hetero_volume}()
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    check_error(ccall((:rprContextCreateHeteroVolume, libRadeonProRender64), rpr_status,
                      (rpr_context, Ptr{rpr_hetero_volume}), context, out_heteroVolume))
    #= c:\Users\sdani\MakieDev\dev\RadeonProRender\build\generate-master.jl:34 =#
    return out_heteroVolume[]
end

function rprShapeSetHeteroVolume(shape, heteroVolume)
    return check_error(ccall((:rprShapeSetHeteroVolume, libRadeonProRender64), rpr_status,
                             (rpr_shape, rpr_hetero_volume), shape, heteroVolume))
end

function rprHeteroVolumeSetTransform(heteroVolume, transpose, transform)
    return check_error(ccall((:rprHeteroVolumeSetTransform, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_bool, Ptr{rpr_float}), heteroVolume, transpose,
                             transform))
end

function rprHeteroVolumeSetEmissionGrid(heteroVolume, grid)
    return check_error(ccall((:rprHeteroVolumeSetEmissionGrid, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetDensityGrid(heteroVolume, grid)
    return check_error(ccall((:rprHeteroVolumeSetDensityGrid, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetAlbedoGrid(heteroVolume, grid)
    return check_error(ccall((:rprHeteroVolumeSetAlbedoGrid, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_grid), heteroVolume, grid))
end

function rprHeteroVolumeSetEmissionLookup(heteroVolume, ptr, n)
    return check_error(ccall((:rprHeteroVolumeSetEmissionLookup, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetDensityLookup(heteroVolume, ptr, n)
    return check_error(ccall((:rprHeteroVolumeSetDensityLookup, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetAlbedoLookup(heteroVolume, ptr, n)
    return check_error(ccall((:rprHeteroVolumeSetAlbedoLookup, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, Ptr{rpr_float}, rpr_uint), heteroVolume, ptr, n))
end

function rprHeteroVolumeSetAlbedoScale(heteroVolume, scale)
    return check_error(ccall((:rprHeteroVolumeSetAlbedoScale, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

function rprHeteroVolumeSetEmissionScale(heteroVolume, scale)
    return check_error(ccall((:rprHeteroVolumeSetEmissionScale, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

function rprHeteroVolumeSetDensityScale(heteroVolume, scale)
    return check_error(ccall((:rprHeteroVolumeSetDensityScale, libRadeonProRender64), rpr_status,
                             (rpr_hetero_volume, rpr_float), heteroVolume, scale))
end

const RPR_VERSION_MAJOR = 2

const RPR_VERSION_MINOR = 2

const RPR_VERSION_REVISION = 7

const RPR_VERSION_BUILD = 0xdeae87c8

const RPR_VERSION_MAJOR_MINOR_REVISION = 0x00200207

const RPR_API_VERSION = RPR_VERSION_MAJOR_MINOR_REVISION

const RPR_API_VERSION_MINOR = RPR_VERSION_BUILD

const RPR_OBJECT_NAME = 0x00777777

const RPR_OBJECT_UNIQUE_ID = 0x00777778

const RPR_OBJECT_CUSTOM_PTR = 0x00777779

const RPR_INSTANCE_PARENT_SHAPE = 0x1601

const RPR_FALSE = Cuint(0)

const RPR_TRUE = Cuint(1)

# exports
const PREFIXES = ["RPR", "rpr"]
for name in names(@__MODULE__; all=true), prefix in PREFIXES
    if startswith(string(name), prefix)
        @eval export $name
    end
end

end # module
